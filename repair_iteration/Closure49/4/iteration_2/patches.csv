bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
2	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getName());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
3	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  name.getName());  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  name.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  name.getName());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol  name	61	None	replace
4	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
5	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	116	None	replace
6	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	106	1	add
7	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	106	1	add
8	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString	  timeout    	non-compiled	[CE]  	106	None	add
9	[BUG]  [BUGGY]  T.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  T.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	T.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    T.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol  T	51	None	replace
10	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  parent.getCompiler();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  parent.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  parent.getCompiler();	  ContextualRenamer    compiler    =    n.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
11	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  rootRenamer.getCompiler();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  rootRenamer.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  rootRenamer.getCompiler();	  ContextualRenamer    compiler    =    n.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
12	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  nameStack.getCompiler();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  nameStack.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  nameStack.getCompiler();	  ContextualRenamer    compiler    =    n.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
13	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  n,  parent.getCompiler();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  n,  parent.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  n,  parent.getCompiler();	  ContextualRenamer    compiler    =    n.getCompiler();    	non-compiled	[CE]  ';'  expected	47	None	replace
14	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  name.getCompiler();  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  name.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  name.getCompiler();	  ContextualRenamer    compiler    =    n.getCompiler();    	non-compiled	[CE]  cannot  find  symbol  name	47	None	replace
15	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  name);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  name	94	None	replace
16	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  nameUsage);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	94	None	replace
17	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	94	None	replace
18	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  ARGUMENTS);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	94	None	replace
19	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  parent);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	94	None	replace
20	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	33	None	replace
21	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	33	None	replace
22	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	33	None	replace
23	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
24	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
25	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  nameName	70	None	replace
26	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack);  [CE]  no  suitable  method  found  for  report(boolean,Deque<Renamer>)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Deque<Renamer>)	70	None	replace
27	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  parent);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	70	None	replace
28	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  namePrefix);  [CE]  cannot  find  symbol  namePrefix  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  namePrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  namePrefix);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  namePrefix	70	None	replace
29	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	53	1	add
30	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	53	1	add
31	[BUG]  [BUGGY]  parent.replaceChild(n,  renamer).reportCodeChange();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.replaceChild(n,  renamer).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.replaceChild(n,  renamer).reportCodeChange();	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
32	[BUG]  [BUGGY]  parent.replaceChild(n,  renamer.getCompiler()).reportCodeChange();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.replaceChild(n,  renamer.getCompiler()).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.replaceChild(n,  renamer.getCompiler()).reportCodeChange();	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
33	[BUG]  [BUGGY]  parent.replaceChild(n,  renamer.getCompiler().reportCodeChange());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.replaceChild(n,  renamer.getCompiler().reportCodeChange());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.replaceChild(n,  renamer.getCompiler().reportCodeChange());	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
34	[BUG]  [BUGGY]  parent,  n.getCompiler().reportCodeChange();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent,  n.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent,  n.getCompiler().reportCodeChange();	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  not  a  statement	45	None	replace
35	[BUG]  [BUGGY]  parent.replaceChild(n,  newName).reportCodeChange();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.replaceChild(n,  newName).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.replaceChild(n,  newName).reportCodeChange();	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
36	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameNode);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameNode);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  nameNode	14	None	replace
37	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  namePrefix);  [CE]  cannot  find  symbol  namePrefix  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  namePrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  namePrefix);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  namePrefix	14	None	replace
38	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  cannot  find  symbol  NameUsage  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  cannot  find  symbol  NameUsage	30	None	replace
39	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	parent.putProp(Node.IS_CONSTANT_NAME,  renamer);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	compilable	timeout	30	1	replace
40	[BUG]  [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  renamer);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.putProp(Node.IS_CONSTANT_NAME,  renamer);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	compilable	timeout	30	1	replace
41	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
42	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  node.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  node.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  node.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
43	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  parent);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	39	None	replace
44	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  namePrefix);  [CE]  cannot  find  symbol  namePrefix  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  namePrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  namePrefix);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  namePrefix	39	None	replace
45	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	5	None	replace
46	[BUG]  [BUGGY]  t.getCompiler().report(n,  parent.getType(),  UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n,  parent.getType(),  UNIQUE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n,  parent.getType(),  UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	5	None	replace
47	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  ARGUMENTS_UNIQUE_ID_SEPARATOR  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_UNIQUE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_UNIQUE_ID_SEPARATOR	5	None	replace
48	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_NAME);  [CE]  cannot  find  symbol  ARGUMENTS_NAME  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_NAME);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_NAME	5	None	replace
49	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_UNKNOWN);  [CE]  cannot  find  symbol  ARGUMENTS_UNKNOWN  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_UNKNOWN);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_UNKNOWN);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_UNKNOWN	5	None	replace
50	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_NULL);  [CE]  cannot  find  symbol  ARGUMENTS_NULL  [FE]                                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_NULL);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_NULL);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_NULL	5	None	replace
51	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	88	None	replace
52	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Node.EXPR_RESULT);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Node.EXPR_RESULT);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Node.EXPR_RESULT);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	88	None	replace
53	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Token.EXPR_RESULT);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Token.EXPR_RESULT);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	88	None	replace
54	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  EXPR_RESULT);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  EXPR_RESULT);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  EXPR_RESULT);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	88	None	replace
55	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(int,int,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,int,String)	80	None	replace
56	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	80	None	replace
57	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKEN_FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().report(n.getType(),  TOKEN_FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	compilable	timeout	80	1	replace
58	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  TOKEN_FUNCTION,  newName);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKEN_FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  TOKEN_FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	compilable	timeout	80	1	replace
59	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS,  newName);  [CE]  no  suitable  method  found  for  report(int,String,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String,String)	80	None	replace
60	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().report(n.getType(),  TOKENS_FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	compilable	timeout	80	1	replace
61	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_FUNCTION,  newName);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  TOKENS_FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	compilable	timeout	80	1	replace
62	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  -  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  -  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  -  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	80	None	replace
63	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  NON_GLOBAL_NAME,  newName);  [CE]  cannot  find  symbol  NON_GLOBAL_NAME  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  NON_GLOBAL_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  NON_GLOBAL_NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAME	80	None	replace
64	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	compilable	timeout	78	1	add
65	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	compilable	timeout	78	1	add
66	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peek();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peek();	  timeout    	compilable	timeout	78	1	add
67	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peek();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peek();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peek();	  timeout    	compilable	timeout	78	1	add
68	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();	  timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	78	None	add
69	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peer();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peer();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.peer();	  timeout    	non-compiled	[CE]  cannot  find  symbol	78	None	add
70	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
71	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n,  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n,  n.getName());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
72	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getName());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
73	[BUG]  [BUGGY]  name.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  name.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	name.getCompiler().reportCodeChange();	  ner.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  name	48	None	replace
74	[BUG]  [BUGGY]  ContextualRenamer.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer.getCompiler().reportCodeChange();	  ner.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
75	[BUG]  [BUGGY]  nameStack.peek().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameStack.peek().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameStack.peek().reportCodeChange();	  ner.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
76	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.NAME,  newName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	3	None	replace
77	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix,  newName);  [CE]  cannot  find  symbol  idPrefix  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	3	None	replace
78	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.NAME,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	3	None	replace
79	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  name,  newName);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  name,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  name,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
80	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  newName,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	3	None	replace
81	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  newName,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	3	None	replace
82	[BUG]  [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	node.removeProp(Node.IS_CONSTANT_NAME);  compiler.reportCodeChange();	          n.removeProp(Node.IS_CONSTANT_NAME);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
83	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  parent.reportCodeChange();	          n.removeProp(Node.IS_CONSTANT_NAME);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
84	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
85	[BUG]  [BUGGY]  t.getCompiler().report(n,  parent.getType()  ==  Token.EXPR_RESULT,  n.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n,  parent.getType()  ==  Token.EXPR_RESULT,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n,  parent.getType()  ==  Token.EXPR_RESULT,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
86	[BUG]  [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
87	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n.getName());  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol  name	65	None	replace
88	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
89	[BUG]  [BUGGY]  Renamer  renamer  =  n.getCompiler().reportCodeChange();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Renamer  renamer  =  n.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Renamer  renamer  =  n.getCompiler().reportCodeChange();	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	44	None	replace
90	[BUG]  [BUGGY]  Renamer  renamer  =  t.getCompiler().reportCodeChange();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Renamer  renamer  =  t.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Renamer  renamer  =  t.getCompiler().reportCodeChange();	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	44	None	replace
91	[BUG]  [BUGGY]  renamer.getCompiler().reportCodeChange(t,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.getCompiler().reportCodeChange(t,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.getCompiler().reportCodeChange(t,  n);	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
92	[BUG]  [BUGGY]  Renamer  renamer  =  parent.getCompiler().reportCodeChange();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Renamer  renamer  =  parent.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Renamer  renamer  =  parent.getCompiler().reportCodeChange();	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	44	None	replace
93	[BUG]  [BUGGY]  Renamer.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Renamer.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Renamer.getCompiler().reportCodeChange();	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
94	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	49	1	add
95	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	49	1	add
96	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  n.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  n.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    n.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol	49	None	add
97	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	58	1	add
98	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	58	1	add
99	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	compilable	timeout	27	1	replace
100	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n);  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	compilable	timeout	27	1	replace
101	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  n);  [CE]  no  suitable  method  found  for  addToDebugLog(String,Node)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  n);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,Node)	27	None	replace
102	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
103	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(int)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.FUNCTION);	  t.getCompiler().report(n.getType()    [Delete]    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	113	None	replace
104	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >=  Token.FUNCTION);	  t.getCompiler().report(n.getType()    [Delete]    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	113	None	replace
105	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());	  timeout    	compilable	timeout	10	1	add
106	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());	  timeout    	compilable	timeout	10	1	add
107	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  parent.getString());	  timeout    	compilable	timeout	10	1	add
108	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  parent.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  parent.getString());	  timeout    	compilable	timeout	10	1	add
109	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  T.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  [CE]  cannot  find  symbol  T  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  T.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    T.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	10	None	add
110	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  parent.getString());	  timeout    	non-compiled	[CE]  	10	None	add
111	[BUG]  [BUGGY]  compiler.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.getCompiler().reportCodeChange();	  parser.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  compiler	46	None	replace
112	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.peek());  [CE]  no  suitable  method  found  for  report(boolean,Renamer)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.peek());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.peek());	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    nameStack);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer)	22	None	replace
113	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.pop());  [CE]  no  suitable  method  found  for  report(boolean,Renamer)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.pop());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.pop());	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    nameStack);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer)	22	None	replace
114	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack);  [CE]  no  suitable  method  found  for  report(boolean,Deque<Renamer>)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    nameStack);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Deque<Renamer>)	22	None	replace
115	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameNameStack);  [CE]  cannot  find  symbol  nameNameStack  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameNameStack);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameNameStack);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    nameStack);    	non-compiled	[CE]  cannot  find  symbol  nameNameStack	22	None	replace
116	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	34	None	replace
117	[BUG]  [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  compiler  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  compiler	34	None	replace
118	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  compiler  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  compiler	34	None	replace
119	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nameUsage  [FE]                                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	34	None	replace
120	[BUG]  [BUGGY]  namingUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  namingUsage  [FE]                                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  namingUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	namingUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  namingUsage	34	None	replace
121	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    nameName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	81	None	replace
122	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  parent);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	111	None	replace
123	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());	  timeout    	compilable	timeout	98	1	add
124	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());	  timeout    	compilable	timeout	98	1	add
125	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	98	None	add
126	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlining  constant  name:   "  +  n.getString());	  timeout    	compilable	timeout	98	1	add
127	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  constant  name:   "  +  n.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlining  constant  name:   "  +  n.getString());	  timeout    	compilable	timeout	98	1	add
128	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "Inlining  constant  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	98	None	add
129	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
130	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  parent);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  parent);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
131	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName(),  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName(),  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName(),  n);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
132	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName(),  newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName(),  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
133	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  parent);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  parent);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
134	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  nameUsage);	  t.getCompiler().report(n.getType()!=    Token.VAR,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	117	None	replace
135	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >=  Token.VAR,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	117	None	replace
136	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(newName);	          n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	79	None	replace
137	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
138	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
139	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  parent.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
140	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLineno());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLineno());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
141	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLineno());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLineno());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLineno());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
142	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
143	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  newName);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
144	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  parent);	  t.getCompiler().report(n.getType()!=    Token.VAR,    name);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	77	None	replace
145	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler(n);  [CE]  method  getCompiler  in  class  NodeTraversal  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler(n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompiler(n);	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  method  getCompiler  in  class  NodeTraversal  cannot  be  applied  to  given  types;	68	None	replace
146	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInstance();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInstance();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerInstance();	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
147	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerConfig();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerConfig();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerConfig();	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
148	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerConstructor();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerConstructor();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerConstructor();	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
149	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerBuilder();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerBuilder();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerBuilder();	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
150	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  getReplacementName(n.getString()));  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  getReplacementName(n.getString()));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  getReplacementName(n.getString()));	  t.getCompiler().report(n.getType()    {    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	16	None	replace
151	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  getReplacementName(n.getString()),  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  getReplacementName(n.getString()),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  getReplacementName(n.getString()),  newName);	  t.getCompiler().report(n.getType()    {    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	16	None	replace
152	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  idPrefix);	  t.getCompiler().report(n.getType()    {    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	16	None	replace
153	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  NameUsage  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  NameUsage	31	None	replace
154	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	parent.putProp(Node.IS_CONSTANT_NAME,  newName);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	compilable	timeout	31	1	replace
155	[BUG]  [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  newName);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.putProp(Node.IS_CONSTANT_NAME,  newName);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	compilable	timeout	31	1	replace
156	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	n.putProp(Node.IS_CONSTANT_NAME,  newName);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	compilable	timeout	31	1	replace
157	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  newName);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	compilable	timeout	31	1	replace
158	[BUG]  [BUGGY]  T.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  T.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	T.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    T.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol  T	57	None	replace
159	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name,  newName);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name,  newName);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    name);    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
160	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Token.NAME,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Token.NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	71	None	replace
161	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  NAME_NAME,  newName);  [CE]  cannot  find  symbol  NAME_NAME  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  NAME_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  NAME_NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  NAME_NAME	71	None	replace
162	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Node.IS_CONSTANT_NAME,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Node.IS_CONSTANT_NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	71	None	replace
163	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	parent.removeProp(Node.IS_CONSTANT_NAME);	          nameUsage.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	36	1	replace
164	[BUG]  [BUGGY]  parent.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.removeProp(Node.IS_CONSTANT_NAME);	          nameUsage.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	36	1	replace
165	[BUG]  [BUGGY]  NameUsage.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  NameUsage  [FE]                                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NameUsage.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NameUsage.removeProp(Node.IS_CONSTANT_NAME);	          nameUsage.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  NameUsage	36	None	replace
166	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	compilable	timeout	9	1	replace
167	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	compilable	timeout	9	1	replace
168	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlining  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "inlining  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	compilable	timeout	9	1	replace
169	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "inlining  name: "  +  n.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlining  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "inlining  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	compilable	timeout	9	1	replace
170	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
171	[BUG]  [BUGGY]  Node  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Node  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Node  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    	non-compiled	[CE]  	52	None	replace
172	[BUG]  [BUGGY]  Node  t  =  n.getCompiler();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Node  t  =  n.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Node  t  =  n.getCompiler();	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	52	None	replace
173	[BUG]  [BUGGY]  Node  n  =  n.getCompiler();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Node  n  =  n.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Node  n  =  n.getCompiler();	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	52	None	replace
174	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  DEFAULT_NAME);  [CE]  cannot  find  symbol  DEFAULT_NAME  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  DEFAULT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  DEFAULT_NAME);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    nameName);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAME	41	None	replace
175	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	28	1	add
176	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	28	1	add
177	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  Node  n  =  nameStack.peek();  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  Node  n  =  nameStack.peek();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    Node  n  =  nameStack.peek();  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
178	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    renamer.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	28	None	add
179	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	28	None	add
180	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();	  timeout    	compilable	timeout	28	1	add
181	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();	  timeout    	compilable	timeout	28	1	add
182	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	28	None	add
183	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
184	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
185	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
186	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",unknown  name:   "  +  n.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
187	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	72	None	add
188	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ".unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ".unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
189	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ".unknown  name:   "  +  n.getString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ".unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ".unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
190	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Token.FUNCTION);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Token.FUNCTION);	  t.getCompiler().report(n.getType()    >    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	20	None	replace
191	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    >    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	20	None	replace
192	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.FUNCTION);	  t.getCompiler().report(n.getType()    >    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	20	None	replace
193	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  <  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  <  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  <  Token.FUNCTION);	  t.getCompiler().report(n.getType()    >    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	20	None	replace
194	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	107	1	replace
195	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	107	1	replace
196	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.name,  n.getName());  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.name,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.name,  n.getName());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol  name	62	None	replace
197	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  n.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  n.getName());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
198	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
199	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  newName.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  newName.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  newName.getName());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
200	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  ARGUMENTS,  newName));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,String,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  ARGUMENTS,  newName));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  ARGUMENTS,  newName));	  compiler.reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,String,String)	69	None	replace
201	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  INVALID_NAME,  newName));  [CE]  cannot  find  symbol  INVALID_NAME  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  INVALID_NAME,  newName));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  INVALID_NAME,  newName));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAME	69	None	replace
202	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  NON_GLOBAL_NAME,  newName));  [CE]  cannot  find  symbol  NON_GLOBAL_NAME  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  NON_GLOBAL_NAME,  newName));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  NON_GLOBAL_NAME,  newName));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAME	69	None	replace
203	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [CE]  cannot  find  symbol  NON_GLOBAL_NAME  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  NON_GLOBAL_NAME));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAME	69	None	replace
204	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  INVALID_NAME));  [CE]  cannot  find  symbol  INVALID_NAME  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  INVALID_NAME));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  INVALID_NAME));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  INVALID_NAME	69	None	replace
205	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  NON_GLOBAL_ID_SEPARATOR));  [CE]  cannot  find  symbol  NON_GLOBAL_ID_SEPARATOR  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  NON_GLOBAL_ID_SEPARATOR));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  NON_GLOBAL_ID_SEPARATOR));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_ID_SEPARATOR	69	None	replace
206	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	90	None	replace
207	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
208	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
209	[BUG]  [BUGGY]  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  	60	None	replace
210	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  	60	None	replace
211	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
212	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
213	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	42	None	replace
214	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  n.getString());  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  n.getString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	42	None	replace
215	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n.getString());  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n.getString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  name	42	None	replace
216	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  n.getString());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  n.getString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  ')'  expected	42	None	replace
217	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);	  timeout    	compilable	timeout	26	1	add
218	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);	  timeout    	compilable	timeout	26	1	add
219	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  T.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  [CE]  cannot  find  symbol  T  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  T.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    T.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	26	None	add
220	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( "Unknown  name:... "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    t.getCompiler().addToDebugLog( "Unknown  name:... "  +  newName);	  timeout    	compilable	timeout	26	1	add
221	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( "Unknown  name:... "  +  newName);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( "Unknown  name:... "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    t.getCompiler().addToDebugLog( "Unknown  name:... "  +  newName);	  timeout    	compilable	timeout	26	1	add
222	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  newName);	  timeout    	compilable	timeout	26	1	add
223	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  newName);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  newName);	  timeout    	compilable	timeout	26	1	add
224	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	37	None	replace
225	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  newName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  ')'  expected	37	None	replace
226	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  newName);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	37	None	replace
227	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
228	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  rootRenamer);  [CE]  no  suitable  method  found  for  report(boolean,String,Renamer)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Renamer)	37	None	replace
229	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  ')'  expected	37	None	replace
230	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  parent);  [CE]  no  suitable  method  found  for  report(boolean,String,Node)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  parent);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Node)	37	None	replace
231	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME);	  t.getCompiler().report(n.getType()    }    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	97	None	replace
232	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  report(int)  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.NAME);	  t.getCompiler().report(n.getType()    }    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	97	None	replace
233	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  );  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  );  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  );	  t.getCompiler().report(n.getType()    }    Token.NAME);    	non-compiled	[CE]  ')'  expected	97	None	replace
234	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.NAME);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >=  Token.NAME);	  t.getCompiler().report(n.getType()    }    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	97	None	replace
235	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP);  [CE]  cannot  find  symbol  IS_CONSTANT_PROP  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_PROP);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PROP	29	None	replace
236	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  no  suitable  method  found  for  removeProp(int,String)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String)	29	None	replace
237	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	n.removeProp(Node.IS_CONSTANT_NAME  +  1);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	29	1	replace
238	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  1);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	29	1	replace
239	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PREFIX);  [CE]  cannot  find  symbol  IS_CONSTANT_PREFIX  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_PREFIX);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_PREFIX);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PREFIX	29	None	replace
240	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeChild(parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	n.removeChild(parent);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	29	1	replace
241	[BUG]  [BUGGY]  n.removeChild(parent);  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeChild(parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeChild(parent);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	29	1	replace
242	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  ARGUMENTS_UNIQUE_ID_SEPARATOR  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_UNIQUE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_UNIQUE_ID_SEPARATOR	95	None	replace
243	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_UNKNOWN);  [CE]  cannot  find  symbol  ARGUMENTS_UNKNOWN  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_UNKNOWN);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_UNKNOWN);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_UNKNOWN	95	None	replace
244	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    timeout    	compilable	timeout	11	1	replace
245	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName);  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    timeout    	compilable	timeout	11	1	replace
246	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  renamer.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
247	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  DEFAULT_NAME);  [CE]  cannot  find  symbol  DEFAULT_NAME  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  DEFAULT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  DEFAULT_NAME);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    nameName);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAME	74	None	replace
248	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFAULT_NAME);  [CE]  cannot  find  symbol  DEFAULT_NAME  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFAULT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFAULT_NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    name);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAME	7	None	replace
249	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  NAME);  [CE]  cannot  find  symbol  NAME  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    name);    	non-compiled	[CE]  cannot  find  symbol  NAME	7	None	replace
250	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
251	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	compilable	timeout	101	1	replace
252	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  parent.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	compilable	timeout	101	1	replace
253	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
254	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlining  empty  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "inlining  empty  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	compilable	timeout	101	1	replace
255	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "inlining  empty  name: "  +  n.getString());  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlining  empty  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "inlining  empty  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	compilable	timeout	101	1	replace
256	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Token.VAR);  [CE]  no  suitable  method  found  for  report(int)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Token.VAR);	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	118	None	replace
257	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  newName  }  Token.VAR);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  newName  }  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  newName  }  Token.VAR);	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	118	None	replace
258	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Node.VAR);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Node.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Node.VAR);	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	118	None	replace
259	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Token.VAR);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Token.VAR);	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	118	None	replace
260	[BUG]  [BUGGY]  Deque  referencedNames  =  name.getReferencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  name.getReferencedNames();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  name.getReferencedNames();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  name	108	None	replace
261	[BUG]  [BUGGY]  Deque  referencedNames  =  parent.getReferencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  parent.getReferencedNames();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  parent.getReferencedNames();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
262	[BUG]  [BUGGY]  Deque  referencedNames  =  nameStack.getReferencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  nameStack.getReferencedNames();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  nameStack.getReferencedNames();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
263	[BUG]  [BUGGY]  Deque  referencedNames  =  nameUsage.getReferencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  nameUsage.getReferencedNames();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  nameUsage.getReferencedNames();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	108	None	replace
264	[BUG]  [BUGGY]  Deque  referencedNames  =  n.referencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  n.referencedNames();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  n.referencedNames();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
265	[BUG]  [BUGGY]  Deque  referencedNames  =  compiler.referencedNames(n.getReferencedNames());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  compiler.referencedNames(n.getReferencedNames());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  compiler.referencedNames(n.getReferencedNames());	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
266	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  Token.NAME);  [CE]  no  suitable  method  found  for  report(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,int)	2	None	replace
267	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  newName,  Token.NAME);  [CE]  no  suitable  method  found  for  report(int,String,int)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  newName,  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  newName,  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String,int)	2	None	replace
268	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  token,  Token.NAME);  [CE]  cannot  find  symbol  token  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  token,  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  token,  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  token	2	None	replace
269	[BUG]  [BUGGY]  n.getCompiler().report(n.getType(),  Token.NAME);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().report(n.getType(),  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().report(n.getType(),  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
270	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_PER_NAME,  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().report(n.getType(),  TOKENS_PER_NAME,  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	compilable	timeout	2	1	replace
271	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_PER_NAME,  Token.NAME);  timeout  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_PER_NAME,  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  TOKENS_PER_NAME,  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	compilable	timeout	2	1	replace
272	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage,  newName);	  t.getCompiler().report(n.getType()    {    Token.VAR,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	17	None	replace
273	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameRenamer);  [CE]  cannot  find  symbol  nameRenamer  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameRenamer);	  t.getCompiler().report(n.getType()    {    Token.VAR,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	17	None	replace
274	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	4	None	replace
275	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Token.NAME);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
276	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.NAME);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
277	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Node.NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Node.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Node.NAME);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
278	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  <  Token.NAME);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  <  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  <  Token.NAME);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	4	None	replace
279	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	114	1	add
280	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	114	1	add
281	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  n.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  n.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    n.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol	114	None	add
282	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	114	1	add
283	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	114	1	add
284	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
285	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
286	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
287	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",inlined  name:   "  +  n.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
288	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	86	None	add
289	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ".inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ".inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
290	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ".inlined  name:   "  +  n.getString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ".inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ".inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
291	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  -  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  -  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  -  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    >>    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	76	None	replace
292	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  NAME_VAR,  newName);  [CE]  cannot  find  symbol  NAME_VAR  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  NAME_VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  NAME_VAR,  newName);	  t.getCompiler().report(n.getType()    >>    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  NAME_VAR	76	None	replace
293	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  DEPRECATED_NAME,  newName);  [CE]  cannot  find  symbol  DEPRECATED_NAME  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  DEPRECATED_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  DEPRECATED_NAME,  newName);	  t.getCompiler().report(n.getType()    >>    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_NAME	76	None	replace
294	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  NO_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  NO_CONSTANT_NAME  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  NO_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  NO_CONSTANT_NAME,  newName);	  t.getCompiler().report(n.getType()    >>    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  NO_CONSTANT_NAME	76	None	replace
295	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  NAME_SEPARATOR,  newName);  [CE]  cannot  find  symbol  NAME_SEPARATOR  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  NAME_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  NAME_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()    >>    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  NAME_SEPARATOR	76	None	replace
296	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());	  timeout    	compilable	timeout	100	1	add
297	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());	  timeout    	compilable	timeout	100	1	add
298	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	100	None	add
299	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlining  empty  name:   "  +  n.getString());	  timeout    	compilable	timeout	100	1	add
300	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  empty  name:   "  +  n.getString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlining  empty  name:   "  +  n.getString());	  timeout    	compilable	timeout	100	1	add
301	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "Inlining  empty  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	100	None	add
302	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());	  n.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
303	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  name.getString());  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  name.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  name.getString());	  n.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol  name	25	None	replace
304	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  n.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  n.getString());	  n.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
305	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  newName.getString());	  n.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
306	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent,  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,Node,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent,  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,Node,String)	91	None	replace
307	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  parent);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String,Node)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  parent);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String,Node)	91	None	replace
308	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  idPrefix);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	91	None	replace
309	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(n,   "Inlined  name: "  +  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(n,   "Inlined  name: "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(n,   "Inlined  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(Node,String)	91	None	replace
310	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  rootRenamer);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String,Renamer)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  rootRenamer);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String,Renamer)	91	None	replace
311	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR,  newName);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	40	None	replace
312	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  EXPR_RESULT,  newName);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	40	None	replace
313	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKEN_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().report(n.getType(),  TOKEN_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	compilable	timeout	40	1	replace
314	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  TOKEN_RESULT,  newName);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKEN_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  TOKEN_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	compilable	timeout	40	1	replace
315	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().report(n.getType(),  TOKENS_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	compilable	timeout	40	1	replace
316	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_RESULT,  newName);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  TOKENS_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  TOKENS_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	compilable	timeout	40	1	replace
317	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
318	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  name.getString());  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  name.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  name.getString());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol  name	102	None	replace
319	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n.getString());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
320	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  n);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n);    	non-compiled	[CE]  cannot  find  symbol  name	89	None	replace
321	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  parent);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node,Node)	89	None	replace
322	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  newName);  [CE]  no  suitable  method  found  for  report(boolean,Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node,String)	89	None	replace
323	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  rootRenamer);  [CE]  no  suitable  method  found  for  report(boolean,Node,Renamer)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node,Renamer)	89	None	replace
324	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.FUNCTION,  newName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	19	None	replace
325	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	19	None	replace
326	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  0,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  0,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  0,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	19	None	replace
327	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unused  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unused  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	87	1	replace
328	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unused  name: "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unused  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unused  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	87	1	replace
329	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
330	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());	  timeout    	compilable	timeout	103	1	add
331	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());	  timeout    	compilable	timeout	103	1	add
332	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  T.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  [CE]  cannot  find  symbol  T  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  T.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    T.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	103	None	add
333	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  parent.getString());	  timeout    	compilable	timeout	103	1	add
334	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  parent.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  parent.getString());	  timeout    	compilable	timeout	103	1	add
335	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  parent.getString());	  timeout    	non-compiled	[CE]  	103	None	add
336	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.getCompiler().reportCodeChange(n);	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
337	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n,  newName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.getCompiler().reportCodeChange(n,  newName);	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
338	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.getCompiler().reportCodeChange(n,  parent);	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
339	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange(name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.getCompiler().reportCodeChange(name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.getCompiler().reportCodeChange(name);	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  name	67	None	replace
340	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  parent).reportCodeChange();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.replaceChild(n,  parent).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.replaceChild(n,  parent).reportCodeChange();	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
341	[BUG]  [BUGGY]  NodeUtil.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.reportCodeChange();	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
342	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  Token.VAR);  [CE]  no  suitable  method  found  for  report(int,int)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  Token.VAR);	  t.getCompiler().report(n.getType()    frumoase,    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,int)	12	None	replace
343	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  newName,  Token.VAR);  [CE]  no  suitable  method  found  for  report(int,String,int)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  newName,  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  newName,  Token.VAR);	  t.getCompiler().report(n.getType()    frumoase,    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String,int)	12	None	replace
344	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  frumoase,  Token.VAR);  [CE]  cannot  find  symbol  frumoase  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  frumoase,  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  frumoase,  Token.VAR);	  t.getCompiler().report(n.getType()    frumoase,    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  frumoase	12	None	replace
345	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
346	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
347	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	8	None	add
348	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlining  name:   "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
349	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  name:   "  +  n.getString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlining  name:   "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
350	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  name:... "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  name:... "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
351	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  name:... "  +  n.getString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlining  name:... "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlining  name:... "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
352	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.VAR,  newName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.VAR,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  ')'  expected	75	None	replace
353	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Token.VAR,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	75	None	replace
354	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  this);  [CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  this);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)	93	None	replace
355	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  newName  }  Token.FUNCTION);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  newName  }  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  newName  }  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	110	None	replace
356	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  newName!=  Token.FUNCTION);  [CE]  incomparable  types:  String  and  int  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  newName!=  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  newName!=  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  incomparable  types:  String  and  int	110	None	replace
357	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  -  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(int)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  -  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  -  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	110	None	replace
358	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(int)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	110	None	replace
359	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  n!=  Token.FUNCTION);  [CE]  incomparable  types:  Node  and  int  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  n!=  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  n!=  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  incomparable  types:  Node  and  int	110	None	replace
360	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  /  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(int)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  /  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  /  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	110	None	replace
361	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
362	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  name,  newName);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  name,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  name,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
363	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	13	None	replace
364	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  name,  newName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  name,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.VAR,  name,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  ')'  expected	13	None	replace
365	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  parent);  [CE]  no  suitable  method  found  for  report(boolean,String,Node)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  parent);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Node)	13	None	replace
366	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());	  timeout    	compilable	timeout	84	1	add
367	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());	  timeout    	compilable	timeout	84	1	add
368	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  T.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  [CE]  cannot  find  symbol  T  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  T.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    T.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	84	None	add
369	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.toString());	  timeout    	compilable	timeout	84	1	add
370	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.toString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.toString());	  timeout    	compilable	timeout	84	1	add
371	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.toString());	  timeout    	non-compiled	[CE]  	84	None	add
372	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  1);  [CE]  no  suitable  method  found  for  report(int)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  1);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  1);	  t.getCompiler().report(n.getType()    frumoase);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	1	None	replace
373	[BUG]  [BUGGY]  t.getCompiler().report(n.getType());  [CE]  no  suitable  method  found  for  report(int)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType());	  t.getCompiler().report(n.getType()    frumoase);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	1	None	replace
374	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  parent);  [CE]  no  suitable  method  found  for  report(int,Node)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  parent);	  t.getCompiler().report(n.getType()    frumoase);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,Node)	1	None	replace
375	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	compilable	timeout	85	1	replace
376	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	compilable	timeout	85	1	replace
377	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getLocalName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getLocalName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getLocalName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
378	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  n.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName,  n.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
379	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  parent.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
380	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  t.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  t.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  t.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
381	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n.getName());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
382	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);	          renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
383	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME,  n);	          renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
384	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  parent);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME,  parent);	          renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
385	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME,  name);	          renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  name	32	None	replace
386	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  rootRenamer,  renamer);  [CE]  no  suitable  method  found  for  report(boolean,Renamer,Renamer)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  rootRenamer,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  rootRenamer,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer,Renamer)	66	None	replace
387	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  renamer);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
388	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  rootRenamer,  renamer);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  rootRenamer,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  rootRenamer,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  ')'  expected	66	None	replace
389	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  renamer);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.EXPR_RESULT,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  ')'  expected	66	None	replace
390	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  rootRenamer,  renamer);  [CE]  no  suitable  method  found  for  report(boolean,Renamer,Renamer)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  rootRenamer,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  rootRenamer,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer,Renamer)	66	None	replace
391	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  renamer);  [CE]  no  suitable  method  found  for  report(boolean,String,Renamer)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Renamer)	66	None	replace
392	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  parent.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  parent.getName());	  n.getCompiler().addToDebugLog(   "Unknown    component:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
393	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  name.getName());  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  name.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  name.getName());	  n.getCompiler().addToDebugLog(   "Unknown    component:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol  name	109	None	replace
394	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  renamer.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  renamer.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  renamer.getName());	  n.getCompiler().addToDebugLog(   "Unknown    component:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
395	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  n.getString());	  n.getCompiler().addToDebugLog(   "Unknown    component:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
396	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  getReplacementName(n.getString()),  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  getReplacementName(n.getString()),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  getReplacementName(n.getString()),  newName);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	18	None	replace
397	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  idPrefix);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	18	None	replace
398	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  getReplacementName(n.getString()));  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  getReplacementName(n.getString()));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  getReplacementName(n.getString()));	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	18	None	replace
399	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  getReplacementName(n.getString()));  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  getReplacementName(n.getString()));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  getReplacementName(n.getString()));	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	18	None	replace
400	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  null);  [CE]  no  suitable  method  found  for  report(boolean,String,<null>)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  null);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  null);	  t.getCompiler().report(n.getType()    {    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,<null>)	43	None	replace
401	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  ARGUMENTS,  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  ARGUMENTS,  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString(),    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String,String)	105	None	replace
402	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName,  idPrefix);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString(),    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	105	None	replace
403	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(n,   "Unknown  name: "  +  n.getString(),  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(Node,String,String)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(n,   "Unknown  name: "  +  n.getString(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(n,   "Unknown  name: "  +  n.getString(),  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString(),    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(Node,String,String)	105	None	replace
404	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName,  parent);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String,Node)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName,  parent);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString(),    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String,Node)	105	None	replace
405	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  getReplacementName(n.getString()));  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  getReplacementName(n.getString()));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  getReplacementName(n.getString()));	  t.getCompiler().report(n.getType()    {    Token.NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	6	None	replace
406	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  getRenamementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  getRenamementName(n.getString()));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  getRenamementName(n.getString()));	  t.getCompiler().report(n.getType()    {    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
407	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	96	None	replace
408	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.NAME,  ARGUMENTS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.NAME,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.NAME,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  ')'  expected	96	None	replace
409	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	96	None	replace
410	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  name);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  name);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
411	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  ARGUMENTS,  newName);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.NAME,  ARGUMENTS,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  ')'  expected	96	None	replace
412	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  ARGUMENTS);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  ')'  expected	96	None	replace
413	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  ARGUMENTS,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  ARGUMENTS,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	96	None	replace
414	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  parent);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  parent);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    name);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	15	None	replace
415	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	55	1	add
416	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	55	1	add
417	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  n.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  n.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    n.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol	55	None	add
418	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	compilable	timeout	27	1	replace
419	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer);  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  renamer);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	compilable	timeout	27	1	replace
420	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Missing  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Missing  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	compilable	timeout	9	1	replace
421	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Missing  name: "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Missing  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Missing  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    timeout    	compilable	timeout	9	1	replace
422	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  &  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  &  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  &  Token.NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	71	None	replace
423	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  -  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  -  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  -  Token.NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	71	None	replace
424	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Token.NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	71	None	replace
425	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.VAR,  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.VAR,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.VAR,  name);	  t.getCompiler().report(n.getType()!=    Token.VAR,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  name	117	None	replace
426	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  nameName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  nameName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  nameName	117	None	replace
427	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  newName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  newName);	  t.getCompiler().report(n.getType()    frumoase,    Token.VAR);    	non-compiled	[CE]  ')'  expected	12	None	replace
428	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  -  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  -  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  -  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	40	None	replace
429	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_RESULT,  newName);  [CE]  cannot  find  symbol  ARGUMENTS_RESULT  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_RESULT	40	None	replace
430	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  &  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  &  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  &  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	40	None	replace
431	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	40	None	replace
432	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(int,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,int,String)	40	None	replace
433	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Node.EXPR_RESULT,  newName);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Node.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Node.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	40	None	replace
434	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  T.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  T.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  T.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    T.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
435	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_INITIALIZER);  [CE]  cannot  find  symbol  ARGUMENTS_INITIALIZER  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_INITIALIZER);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_INITIALIZER);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_INITIALIZER	5	None	replace
436	[BUG]  [BUGGY]  nameUsage.removeProp(Node.IS_CONSTANT_NAME,  n);  [CE]  cannot  find  symbol  nameUsage  [FE]                                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.removeProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.removeProp(Node.IS_CONSTANT_NAME,  n);	          nameUsage.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	36	None	replace
437	[BUG]  [BUGGY]  nameUsage.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.removeProp(Node.IS_CONSTANT_NAME,  newName);	          nameUsage.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	36	None	replace
438	[BUG]  [BUGGY]  nameUsage.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  cannot  find  symbol  nameUsage  [FE]                                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.removeProp(Node.IS_CONSTANT_NAME  +  1);	          nameUsage.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	36	None	replace
439	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    nameName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	41	None	replace
440	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeChild(parent);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	n.removeChild(parent);  nameStack.pop();	          n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    timeout    	compilable	timeout	79	1	replace
441	[BUG]  [BUGGY]  n.removeChild(parent);  nameStack.pop();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeChild(parent);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeChild(parent);  nameStack.pop();	          n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    timeout    	compilable	timeout	79	1	replace
442	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.reportProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.reportProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.reportProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	28	None	add
443	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	compilable	timeout	28	1	add
444	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	compilable	timeout	28	1	add
445	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).setName(newName);  [CE]  void  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).setName(newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).setName(newName);	  timeout    	non-compiled	[CE]  void  cannot  be  dereferenced	28	None	add
446	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME;	  timeout    	non-compiled	[CE]  ')'  expected	28	None	add
447	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  newName);  Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  newName);	  timeout    	non-compiled	[CE]  	26	None	add
448	[BUG]  [BUGGY]  NodeUtil.setCompiler(n.getCompiler()).reportCodeChange();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.setCompiler(n.getCompiler()).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.setCompiler(n.getCompiler()).reportCodeChange();	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
449	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n,  nameStack);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.getCompiler().reportCodeChange(n,  nameStack);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.getCompiler().reportCodeChange(n,  nameStack);	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
450	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  &  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  &  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  &  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	80	None	replace
451	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Node.FUNCTION_NAME,  newName);  [CE]  cannot  find  symbol  FUNCTION_NAME  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Node.FUNCTION_NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Node.FUNCTION_NAME,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION_NAME	80	None	replace
452	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.VAR,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	118	None	replace
453	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  name);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.VAR,  name);	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	118	None	replace
454	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  compiler.getCompiler();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  compiler.getCompiler();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  compiler.getCompiler();	  ContextualRenamer    compiler    =    n.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
455	[BUG]  [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    name);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
456	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(n, "Unknown  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(n, "Unknown  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(n, "Unknown  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
457	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  NameUsage  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NameUsage	34	None	replace
458	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  compiler.reportCodeChange();	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	34	None	replace
459	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
460	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLocalName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLocalName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getLocalName());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
461	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlining  constant  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "inlining  constant  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
462	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "inlining  constant  name: "  +  n.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlining  constant  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "inlining  constant  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	compilable	timeout	99	1	replace
463	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  newName);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	37	None	replace
464	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  global);  [CE]  cannot  find  symbol  global  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  global);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  global);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  global	37	None	replace
465	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  nameStack);  [CE]  no  suitable  method  found  for  report(boolean,String,Deque<Renamer>)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  nameStack);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  nameStack);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Deque<Renamer>)	37	None	replace
466	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  report(int)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(int)	88	None	replace
467	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >  Token.EXPR_RESULT);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >  Token.EXPR_RESULT);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	88	None	replace
468	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  newName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	88	None	replace
469	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix,  newName);  [CE]  cannot  find  symbol  idPrefix  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	13	None	replace
470	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  rootRenamer);  [CE]  no  suitable  method  found  for  report(boolean,String,Renamer)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Renamer)	13	None	replace
471	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  global);  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  global);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  global);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  global	42	None	replace
472	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.toString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	42	None	replace
473	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  name,  n.getName());  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  name,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  name,  n.getName());	  n.getCompiler().addToDebugLog(   "Unknown    component:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol  name	109	None	replace
474	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  DEFINE_NAME);  [CE]  cannot  find  symbol  DEFINE_NAME  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  DEFINE_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  DEFINE_NAME);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_NAME	111	None	replace
475	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().reportToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().reportToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    t.getCompiler().reportToDebugLog( "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol	49	None	add
476	[BUG]  [BUGGY]  parent.replaceChild(n,  renamer.getCompiler());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent.replaceChild(n,  renamer.getCompiler());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.replaceChild(n,  renamer.getCompiler());	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
477	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR,  Token.NAME);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR,  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR,  Token.NAME);	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	2	None	replace
478	[BUG]  [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.NAME,  newName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.NAME,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().report(n.getType()  ==  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    {    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
479	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  n);  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  n);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	89	None	replace
480	[BUG]  [BUGGY]  n.replaceChild(n,  Node.IS_CONSTANT_NAME);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.replaceChild(n,  Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.replaceChild(n,  Node.IS_CONSTANT_NAME);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	29	None	replace
481	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "Inlining  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	8	None	add
482	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  n.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  n.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    n.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol	106	None	add
483	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString()  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog(   ")Inlined  name:   "  +  n.getString()	  timeout    	non-compiled	[CE]  	106	None	add
484	[BUG]  [BUGGY]  t.getCompiler().report(n,  n.getType()  ==  Token.EXPR_RESULT,  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n,  n.getType()  ==  Token.EXPR_RESULT,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n,  n.getType()  ==  Token.EXPR_RESULT,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
485	[BUG]  [BUGGY]  t.getCompiler().report(n,  newName.getType()  ==  Token.EXPR_RESULT,  n.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n,  newName.getType()  ==  Token.EXPR_RESULT,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n,  newName.getType()  ==  Token.EXPR_RESULT,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
486	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  MISSING_NAME);  [CE]  cannot  find  symbol  MISSING_NAME  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  MISSING_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  MISSING_NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    name);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NAME	7	None	replace
487	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFINE_NAME);  [CE]  cannot  find  symbol  DEFINE_NAME  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFINE_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFINE_NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    name);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_NAME	7	None	replace
488	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  parent.getString());	  timeout    	compilable	timeout	10	1	add
489	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  parent.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  parent.getString());	  timeout    	compilable	timeout	10	1	add
490	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  null);  [CE]  no  suitable  method  found  for  report(boolean,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  null);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  null);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,<null>)	90	None	replace
491	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  rootRenamer);  [CE]  no  suitable  method  found  for  report(boolean,Renamer)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer)	66	None	replace
492	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInverter();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInverter();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerInverter();	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
493	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  ARGUMENTS,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  ARGUMENTS,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	19	None	replace
494	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	19	None	replace
495	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  idPrefix,  newName);  [CE]  cannot  find  symbol  idPrefix  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	19	None	replace
496	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  rootRenamer);  [CE]  no  suitable  method  found  for  report(boolean,String,Renamer)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Renamer)	19	None	replace
497	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  null);  [CE]  no  suitable  method  found  for  report(boolean,<null>)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  null);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  null);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,<null>)	116	None	replace
498	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	3	None	replace
499	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(n, "Inlined  name: "  +  newName,  n);  [CE]  no  suitable  method  found  for  addToDebugLog(Node,String,Node)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(n, "Inlined  name: "  +  newName,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(n, "Inlined  name: "  +  newName,  n);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(Node,String,Node)	91	None	replace
500	[BUG]  [BUGGY]  t.getCompiler().report(n.getString()  }  Token.FUNCTION);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getString()  }  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getString()  }  Token.FUNCTION);	  t.getCompiler().report(n.getType()    }    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	112	None	replace
501	[BUG]  [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().report(n.getType()  ==  Token.FUNCTION);	  t.getCompiler().report(n.getType()    }    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
502	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name:n "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlined  name:n "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    timeout    	compilable	timeout	11	1	replace
503	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name:n "  +  parent.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name:n "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name:n "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    timeout    	compilable	timeout	11	1	replace
504	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( ", "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( ", "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( ", "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
505	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	54	1	replace
506	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  timeout  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( ",Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	54	1	replace
507	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ", "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( ", "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	54	1	replace
508	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( ", "  +  n.getString());  timeout  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ", "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( ", "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	54	1	replace
509	[BUG]  [BUGGY]  t.getCompiler().report(n.getString()  frumoase);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getString()  frumoase);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getString()  frumoase);	  t.getCompiler().report(n.getType()    frumoase);    	non-compiled	[CE]  ')'  expected	1	None	replace
510	[BUG]  [BUGGY]  Deque  referencedNames  =  nameMap.getReferencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nameMap  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  nameMap.getReferencedNames();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  nameMap.getReferencedNames();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameMap	108	None	replace
511	[BUG]  [BUGGY]  Deque  referencedNames  =  n.referencedNames;  compiler.reportCodeChange();  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  n.referencedNames;  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  n.referencedNames;  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  referencedNames	108	None	replace
512	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  idPrefix,  newName);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  idPrefix,  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString(),    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	105	None	replace
513	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
514	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	59	1	replace
515	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	59	1	replace
516	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
517	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  &  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  &  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  &  Token.VAR,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	75	None	replace
518	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  +  Node.VAR,  newName);  [CE]  cannot  find  symbol  VAR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  +  Node.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  +  Node.VAR,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  VAR	75	None	replace
519	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.NAME,  name);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  name	94	None	replace
520	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	72	None	add
521	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  ARGUMENTS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  ARGUMENTS);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
522	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  [Delete]  Token.NAME);	  t.getCompiler().report(n.getType()    >    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
523	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName(),  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName(),  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName(),  n);	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
524	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(n, "Inlined  name: "  +  parent.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(n, "Inlined  name: "  +  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(n, "Inlined  name: "  +  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
525	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  ARGUMENTS));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  ARGUMENTS));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  ARGUMENTS));	  compiler.reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,String)	69	None	replace
526	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  ARGUMENTS,  nameUsage));  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  ARGUMENTS,  nameUsage));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  ARGUMENTS,  nameUsage));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	69	None	replace
527	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  node.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  node.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    node.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	78	None	add
528	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.reportProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  n.reportProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    n.reportProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	non-compiled	[CE]  cannot  find  symbol	78	None	add
529	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  global);  [CE]  cannot  find  symbol  global  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  global);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  global);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  global	18	None	replace
530	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  null);  [CE]  no  suitable  method  found  for  report(boolean,String,<null>)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  null);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  null);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,<null>)	18	None	replace
531	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  nameStack.peek());  [CE]  no  suitable  method  found  for  report(boolean,String,Renamer)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  nameStack.peek());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName,  nameStack.peek());	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Renamer)	18	None	replace
532	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  renamer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  renamer);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
533	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	115	1	replace
534	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	115	1	replace
535	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	115	None	replace
536	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString()  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString()	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	115	None	replace
537	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  orphaned  case	115	None	replace
538	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  newName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	110	None	replace
539	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEPRECATED);  [CE]  cannot  find  symbol  DEPRECATED  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEPRECATED);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  DEPRECATED);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED	93	None	replace
540	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  NAME_SEPARATOR);  [CE]  cannot  find  symbol  NAME_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  NAME_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  NAME_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  NAME_SEPARATOR	93	None	replace
541	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEPRECATED_NAME);  [CE]  cannot  find  symbol  DEPRECATED_NAME  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEPRECATED_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  DEPRECATED_NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_NAME	93	None	replace
542	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  parent.getString());	  timeout    	compilable	timeout	103	1	add
543	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  parent.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  parent.getString());	  timeout    	compilable	timeout	103	1	add
544	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  MISSING_NAME);  [CE]  cannot  find  symbol  MISSING_NAME  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  MISSING_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  MISSING_NAME);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    name);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NAME	23	None	replace
545	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  n.getString());  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  n.getString());	  t.getCompiler().report(n.getType()    {    Token.VAR,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	17	None	replace
546	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  n.getName());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  n.getName());	  t.getCompiler().report(n.getType()    {    Token.VAR,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
547	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  global);  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  global);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  global);	  t.getCompiler().report(n.getType()    {    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  global	16	None	replace
548	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	compilable	timeout	101	1	replace
549	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	compilable	timeout	101	1	replace
550	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  global);  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  global);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  global);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  global	96	None	replace
551	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  nameName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  nameName	96	None	replace
552	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	96	None	replace
553	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  parent);  [CE]  no  suitable  method  found  for  report(boolean,String,Node)  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  parent);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,Node)	96	None	replace
554	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  -  1,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  -  1,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  -  1,  newName);	  t.getCompiler().report(n.getType()    >>    Token.FUNCTION,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	83	None	replace
555	[BUG]  [BUGGY]  t.getCompiler().report(n.getString()  }  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getString()  }  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getString()  }  Token.NAME);	  t.getCompiler().report(n.getType()    }    Token.NAME);    	non-compiled	[CE]  ')'  expected	97	None	replace
556	[BUG]  [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().report(n.getType()  ==  Token.NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().report(n.getType()  ==  Token.NAME);	  t.getCompiler().report(n.getType()    }    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
557	[BUG]  [BUGGY]  t.getCompiler().reportToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().reportToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().reportToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    parent.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
558	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "inlined  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	compilable	timeout	85	1	replace
559	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "inlined  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	compilable	timeout	85	1	replace
560	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	30	None	replace
561	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [CE]  cannot  find  symbol  NameUsage  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  cannot  find  symbol  NameUsage	30	None	replace
562	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(int,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  Token.VAR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    >>    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,int,String)	76	None	replace
563	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_NULL);  [CE]  cannot  find  symbol  ARGUMENTS_NULL  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_NULL);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS_NULL);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_NULL	95	None	replace
564	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  ARGUMENTS);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.NAME,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	95	None	replace
565	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	86	None	add
566	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  uniqueIdSEPARATOR);  [CE]  cannot  find  symbol  uniqueIdSEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  uniqueIdSEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  uniqueIdSEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSEPARATOR	70	None	replace
567	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(n, "Unknown  name: "  +  n.getString(),  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(n, "Unknown  name: "  +  n.getString(),  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(n, "Unknown  name: "  +  n.getString(),  newName,  idPrefix);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString(),    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	105	None	replace
568	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.FUNCTION,  name);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    name);    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
569	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name,  idPrefix);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name,  idPrefix);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    name);    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
570	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.FUNCTION,  name);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.FUNCTION,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  [Delete]  Token.FUNCTION,  name);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    name);    	non-compiled	[CE]  ')'  expected	21	None	replace
571	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString(),  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String)  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString(),  newName);	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String)	99	None	replace
572	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
573	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  if(renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  if(renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  }  else  if(renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }	  timeout    	non-compiled	[CE]  orphaned  case	28	None	add
574	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [CE]  cannot  find  symbol  removeConstness  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	28	None	add
575	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  String  newName  =  getReplacementName(n.getString());  if(newName!=  null)  {  return;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  String  newName  =  getReplacementName(n.getString());  if(newName!=  null)  {  return;  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  String  newName  =  getReplacementName(n.getString());  if(newName!=  null)  {  return;  }	  timeout    	non-compiled	[CE]  orphaned  case	28	None	add
576	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();  break;  }  [CE]  cannot  find  symbol  removeConstness  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();  break;  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    if(!removeConstness)  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  else  {  nameStack.pop();  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	28	None	add
577	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  NEW_NAME);  [CE]  cannot  find  symbol  NEW_NAME  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  NEW_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  NEW_NAME);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    nameName);    	non-compiled	[CE]  cannot  find  symbol  NEW_NAME	81	None	replace
578	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  this);  [CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  this);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    nameName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)	81	None	replace
579	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  DECLARATION);  [CE]  cannot  find  symbol  DECLARATION  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  DECLARATION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  DECLARATION);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    nameName);    	non-compiled	[CE]  cannot  find  symbol  DECLARATION	81	None	replace
580	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  this);  [CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  this);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)	94	None	replace
581	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  DEPRECATED);  [CE]  cannot  find  symbol  DEPRECATED  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  DEPRECATED);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  DEPRECATED);	  t.getCompiler().report(n.getType()!=    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED	94	None	replace
582	[BUG]  [BUGGY]  ContextualRenamer  n  =  n.getCompiler().reportCodeChange();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  n  =  n.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  n  =  n.getCompiler().reportCodeChange();	  ner.getCompiler().reportCodeChange();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	48	None	replace
583	[BUG]  [BUGGY]  ContextualRenamer.getInstance().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer.getInstance().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer.getInstance().reportCodeChange();	  ner.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
584	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  idPrefix,  newName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.FUNCTION,  idPrefix,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	80	None	replace
585	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	80	None	replace
586	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  newName,  idPrefix);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.FUNCTION,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	80	None	replace
587	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  n,  parent.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  n,  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  n,  parent.getName());	  n.getCompiler().addToDebugLog(   "Unknown    component:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
588	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	compilable	timeout	85	1	replace
589	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    timeout    	compilable	timeout	85	1	replace
590	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ')');  [CE]  no  suitable  method  found  for  report(int,char)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ')');  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ')');	  t.getCompiler().report(n.getType()    frumoase,    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,char)	2	None	replace
591	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.FUNCTION,  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	19	None	replace
592	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.FUNCTION,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	19	None	replace
593	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  },  Token.FUNCTION,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  },  Token.FUNCTION,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  },  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    newName);    	non-compiled	[CE]  ')'  expected	19	None	replace
594	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.VAR,  nameUsage);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.VAR,  nameUsage);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.VAR,  nameUsage);	  t.getCompiler().report(n.getType()    frumoase,    Token.VAR);    	non-compiled	[CE]  ')'  expected	12	None	replace
595	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  null);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  null);	  t.getCompiler().report(n.getType()    frumoase,    Token.VAR);    	non-compiled	[CE]  ')'  expected	12	None	replace
596	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	59	1	replace
597	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	59	1	replace
598	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	59	None	replace
599	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.get  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.get	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	59	None	replace
600	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  <identifier>  expected	59	None	replace
601	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString()  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name: "  +  n.getString()	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ",Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	59	None	replace
602	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  MISSING_ID_SEPARATOR);  [CE]  cannot  find  symbol  MISSING_ID_SEPARATOR  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  MISSING_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  MISSING_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  MISSING_ID_SEPARATOR	111	None	replace
603	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  uniqueIdSEPARATOR);  [CE]  cannot  find  symbol  uniqueIdSEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  uniqueIdSEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  uniqueIdSEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSEPARATOR	90	None	replace
604	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  this);  [CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  this);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    idPrefix);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)	90	None	replace
605	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Undefined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Undefined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	87	1	replace
606	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Undefined  name: "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Undefined  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Undefined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	87	1	replace
607	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  uniqueIdSEPARATOR);  [CE]  cannot  find  symbol  uniqueIdSEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  uniqueIdSEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  uniqueIdSEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSEPARATOR	82	None	replace
608	[BUG]  [BUGGY]  renamer.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
609	[BUG]  [BUGGY]  renamer.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  renamer.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
610	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	56	1	replace
611	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    timeout    	compilable	timeout	56	1	replace
612	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	56	None	replace
613	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.get  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.get  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.get	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	56	None	replace
614	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  <identifier>  expected	56	None	replace
615	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString()  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString()	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	56	None	replace
616	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME  +  1);	          renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
617	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.NAME,  idPrefix,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	71	None	replace
618	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	71	None	replace
619	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  idPrefix,  newName);  [CE]  cannot  find  symbol  idPrefix  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  idPrefix,  newName);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	71	None	replace
620	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  newName,  idPrefix);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.NAME,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	71	None	replace
621	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  UNIQUE_ID_SEPARATOR);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME,  UNIQUE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.NAME,  UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()!=    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	71	None	replace
622	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  n.getString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	42	None	replace
623	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  n.getString(),  newName);  [CE]  no  suitable  method  found  for  report(int,String,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  n.getString(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  n.getString(),  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String,String)	42	None	replace
624	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.EXPR_RESULT,  n.getString());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.EXPR_RESULT,  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  [Delete]  Token.EXPR_RESULT,  n.getString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  ')'  expected	42	None	replace
625	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  name);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString(),  name);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  name	42	None	replace
626	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.EXPR_RESULT,  n.getString(),  newName);  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >=  Token.EXPR_RESULT,  n.getString(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >=  Token.EXPR_RESULT,  n.getString(),  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	42	None	replace
627	[BUG]  [BUGGY]  n.setProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.setProp(Node.IS_CONSTANT_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.setProp(Node.IS_CONSTANT_NAME);	          n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    timeout    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
628	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();	          n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	79	None	replace
629	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForCodeInsertion(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForCodeInsertion(n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerForCodeInsertion(n);	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
630	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForNode(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForNode(n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompilerForNode(n);	  ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
631	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  idPrefix,  newName);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  ')'  expected	40	None	replace
632	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  newName,  idPrefix);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.EXPR_RESULT,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  ')'  expected	40	None	replace
633	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	40	None	replace
634	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  uniqueIdSEPARATOR);  [CE]  cannot  find  symbol  uniqueIdSEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  uniqueIdSEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  uniqueIdSEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSEPARATOR	14	None	replace
635	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  this);  [CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  this);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)	14	None	replace
636	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent,  n.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent,  n.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
637	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    n.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
638	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  UNKNOWN_SYMBOL_WARNING,  newName));  [CE]  cannot  find  symbol  UNKNOWN_SYMBOL_WARNING  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  UNKNOWN_SYMBOL_WARNING,  newName));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  UNKNOWN_SYMBOL_WARNING,  newName));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYMBOL_WARNING	69	None	replace
639	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC,  newName));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC,  newName));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC,  newName));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	69	None	replace
640	[BUG]  [BUGGY]  compiler.report(JSError.make(t,  n,  UNKNOWN_SYMBOL_NAME,  newName));  [CE]  cannot  find  symbol  UNKNOWN_SYMBOL_NAME  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  compiler.report(JSError.make(t,  n,  UNKNOWN_SYMBOL_NAME,  newName));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.report(JSError.make(t,  n,  UNKNOWN_SYMBOL_NAME,  newName));	  compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYMBOL_NAME	69	None	replace
641	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.VAR,  idPrefix,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  ')'  expected	75	None	replace
642	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  newName,  idPrefix);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.VAR,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  ')'  expected	75	None	replace
643	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	75	None	replace
644	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.VAR,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.VAR,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.VAR,  newName,  idPrefix);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	75	None	replace
645	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  name,  newName);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  name,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.VAR,  name,  newName);	  t.getCompiler().report(n.getType()!=    Token.VAR,    newName);    	non-compiled	[CE]  ')'  expected	75	None	replace
646	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: ".  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Inlined    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Inlined  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name: ".  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Inlined        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name: ".  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  <identifier>  expected	55	None	add
647	[BUG]  [BUGGY]  namingUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  cannot  find  symbol  namingUsage  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  namingUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	namingUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);	          nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  cannot  find  symbol  namingUsage	30	None	replace
648	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	50	1	replace
649	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	compilable	timeout	50	1	replace
650	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	50	None	replace
651	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  orphaned  case	50	None	replace
652	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString()  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString()	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	50	None	replace
653	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.get  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.get	  t.getCompiler().addToDebugLog(       "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	50	None	replace
654	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  NEW_NAME);  [CE]  cannot  find  symbol  NEW_NAME  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  NEW_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  NEW_NAME);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    name);    	non-compiled	[CE]  cannot  find  symbol  NEW_NAME	38	None	replace
655	[BUG]  [BUGGY]  NodeUtil.setCompiler(n.getCompiler());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.setCompiler(n.getCompiler());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.setCompiler(n.getCompiler());	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
656	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n.getCompiler(),  n.reportCodeChange());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.copyNameAnnotations(n.getCompiler(),  n.reportCodeChange());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.copyNameAnnotations(n.getCompiler(),  n.reportCodeChange());	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
657	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent.getCompiler()).reportCodeChange();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent.getCompiler()).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.copyNameAnnotations(n,  parent.getCompiler()).reportCodeChange();	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
658	[BUG]  [BUGGY]  NodeUtil.insertCompiler(n,  parent).reportCodeChange();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  NodeUtil.insertCompiler(n,  parent).reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.insertCompiler(n,  parent).reportCodeChange();	  NodeUtil.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
659	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  idPrefix,  newName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  idPrefix,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.VAR,  idPrefix,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  ')'  expected	13	None	replace
660	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  UNIQUE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    newName);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	13	None	replace
661	[BUG]  [BUGGY]  t.getCompiler().report(n,  parent.getType()  ==  Token.EXPR_RESULT,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n,  parent.getType()  ==  Token.EXPR_RESULT,  nameName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n,  parent.getType()  ==  Token.EXPR_RESULT,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    nameName);    	non-compiled	[CE]  cannot  find  symbol  nameName	41	None	replace
662	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  n.getName());	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
663	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  name);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  name);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  name);	  t.getCompiler().report(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  name	88	None	replace
664	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getQualifiedName());  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getQualifiedName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getQualifiedName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    n.getName());    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	65	None	replace
665	[BUG]  [BUGGY]  nameUsage.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  nameUsage.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	nameUsage.getCompiler().reportCodeChange();	  parser.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	46	None	replace
666	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n,  newName);	  t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getName());    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String)	62	None	replace
667	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  NEW_NAME);  [CE]  cannot  find  symbol  NEW_NAME  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  NEW_NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  NEW_NAME);	  t.getCompiler().report(n.getType()    ==    Token.VAR,    name);    	non-compiled	[CE]  cannot  find  symbol  NEW_NAME	15	None	replace
668	[BUG]  [BUGGY]  Deque  referencedNames  =  n.referencedNames.iterator();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  n.referencedNames.iterator();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  n.referencedNames.iterator();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  referencedNames	108	None	replace
669	[BUG]  [BUGGY]  Deque  referencedNames  =  n.referencedNames.values();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  n.referencedNames.values();  compiler.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  n.referencedNames.values();  compiler.reportCodeChange();	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  referencedNames	108	None	replace
670	[BUG]  [BUGGY]  Deque  referencedNames  =  n.getReferencedNames();  compiler.addChangeListener(this);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  Deque  referencedNames  =  n.getReferencedNames();  compiler.addChangeListener(this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  n.getReferencedNames();  compiler.addChangeListener(this);	  Deque    referencedNames    =    n.getReferencedNames();    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
671	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n);  [CE]  no  suitable  method  found  for  addToDebugLog(String,Node)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  newName,  n);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,Node)	91	None	replace
672	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  uniqueIdSupplier);  [CE]  cannot  find  symbol  uniqueIdSupplier  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  uniqueIdSupplier);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  uniqueIdSupplier);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSupplier	39	None	replace
673	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
674	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")inlined  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")inlined  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	86	1	add
675	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  n.getName());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  }  Token.VAR,  n.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.VAR,  n.getName());	  t.getCompiler().report(n.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	118	None	replace
676	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlining  name:   "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
677	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlining  name:   "  +  n.getString());	  timeout    	compilable	timeout	8	1	add
678	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  writer.reportCodeChange();  [CE]  cannot  find  symbol  writer  [FE]                                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  writer.reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  writer.reportCodeChange();	          n.removeProp(Node.IS_CONSTANT_NAME);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  writer	35	None	replace
679	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_UNINITIALIZER);  [CE]  cannot  find  symbol  ARGUMENTS_UNINITIALIZER  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_UNINITIALIZER);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_UNINITIALIZER);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_UNINITIALIZER	5	None	replace
680	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_VARIABLE);  [CE]  cannot  find  symbol  ARGUMENTS_VARIABLE  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType(),  ARGUMENTS_VARIABLE);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  ARGUMENTS_VARIABLE);	  t.getCompiler().report(n.getType(),    UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_VARIABLE	5	None	replace
681	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  this);  [CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  this);	  t.getCompiler().report(n.getType()!=    Token.VAR,    name);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,MakeDeclaredNamesUnique)	77	None	replace
682	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlining  constant  name:   "  +  n.getString());	  timeout    	compilable	timeout	98	1	add
683	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  constant  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  constant  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  constant  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    constant    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlining  constant  name:   "  +  n.getString());	  timeout    	compilable	timeout	98	1	add
684	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  MISSING_ID_SEPARATOR);  [CE]  cannot  find  symbol  MISSING_ID_SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  MISSING_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  MISSING_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  MISSING_ID_SEPARATOR	93	None	replace
685	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFINE_ID_SEPARATOR);  [CE]  cannot  find  symbol  DEFINE_ID_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFINE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  DEFINE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_ID_SEPARATOR	93	None	replace
686	[BUG]  [BUGGY]  parent,  t.getCompiler().reportCodeChange();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  parent,  t.getCompiler().reportCodeChange();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent,  t.getCompiler().reportCodeChange();	  parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  not  a  statement	45	None	replace
687	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  t.getCompiler().report(n.getType()    {    Token.VAR,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	17	None	replace
688	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  t.getCompiler().report(n.getType()    {    Token.VAR,    nameUsage);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	17	None	replace
689	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  renamer);  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  renamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	66	None	replace
690	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer,  rootRenamer);  [CE]  no  suitable  method  found  for  report(boolean,Renamer,Renamer)  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer,Renamer)	66	None	replace
691	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  n,  rootRenamer);  [CE]  no  suitable  method  found  for  report(int,Node,Renamer)  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  n,  rootRenamer);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  n,  rootRenamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,Node,Renamer)	66	None	replace
692	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlined  name: "  +  n.getString	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    t.getCompiler().addToDebugLog(   ")Inlined    name:       "    +    n.getString());    timeout    	non-compiled	[CE]  	107	None	replace
693	[BUG]  [BUGGY]  n.setProp(Node.IS_CONSTANT_PROP);  [CE]  cannot  find  symbol  IS_CONSTANT_PROP  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.setProp(Node.IS_CONSTANT_PROP);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.setProp(Node.IS_CONSTANT_PROP);	          n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PROP	29	None	replace
694	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  UNIQUE_ID_SEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    newName);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	18	None	replace
695	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.toString());	  timeout    	compilable	timeout	84	1	add
696	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.toString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.toString());    t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.toString());	  timeout    	compilable	timeout	84	1	add
697	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION,  nameStack);  [CE]  no  suitable  method  found  for  report(boolean,Deque<Renamer>)  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION,  nameStack);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.FUNCTION,  nameStack);	  t.getCompiler().report(n.getType()    {    Token.FUNCTION,    nameStack);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Deque<Renamer>)	22	None	replace
698	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: ",  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [CE]  no  suitable  method  found  for  addToDebugLog(String,String)  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(     "Unknown    name:     "    +    n.getString());    t.getCompiler().addToDebugLog(   "Unknown  name:     "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name: ",  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(       "Unknown        name:       "        +        n.getString());        t.getCompiler().addToDebugLog(   "Unknown    name:       "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name: ",  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String)	49	None	add
699	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  newName,  idPrefix);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.EXPR_RESULT,  newName,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	37	None	replace
700	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  this);  [CE]  no  suitable  method  found  for  report(boolean,String,MakeDeclaredNamesUnique)  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  this);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName,  this);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,MakeDeclaredNamesUnique)	37	None	replace
701	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName(),  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName(),  n);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName(),  n);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
702	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	compilable	timeout	24	1	replace
703	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.toString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getName());    	compilable	timeout	24	1	replace
704	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
705	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")unknown  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")unknown  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	72	1	add
706	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlining  empty  name:   "  +  n.getString());	  timeout    	compilable	timeout	100	1	add
707	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  empty  name:   "  +  n.getString());  timeout  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlining  empty  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlining  empty  name:   "  +  n.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlining  empty  name:   "  +  n.getString());	  timeout    	compilable	timeout	100	1	add
708	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  newName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  newName);	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
709	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
710	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog(. "Inlined  name:   "  +  parent.getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  parent.getString());  t.getCompiler().addToDebugLog(. "Inlined  name:   "  +  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getString());    t.getCompiler().addToDebugLog(. "Inlined  name:   "  +  parent.getString());	  timeout    	non-compiled	[CE]  illegal  start  of  expression	10	None	add
711	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.NAME,  UNIQUE_ID_SEPARATOR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    newName);    	non-compiled	[CE]  ')'  expected	3	None	replace
712	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  localName);  [CE]  cannot  find  symbol  localName  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  localName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName,  localName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    newName);    timeout    	non-compiled	[CE]  cannot  find  symbol  localName	27	None	replace
713	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getString());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  parent.getString());	  n.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
714	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  getReplacementName(n.getString()));  [CE]  no  suitable  method  found  for  report(boolean,String,String)  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  getReplacementName(n.getString()));  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  getReplacementName(n.getString()));	  t.getCompiler().report(n.getType()    {    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,String)	16	None	replace
715	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  null);  [CE]  no  suitable  method  found  for  report(boolean,String,<null>)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  null);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName,  null);	  t.getCompiler().report(n.getType()    {    Token.VAR,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String,<null>)	16	None	replace
716	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName(),  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName(),  parent);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName(),  parent);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
717	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName(),  newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName(),  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName(),    n);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
718	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString(),  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String)  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString(),  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString(),  newName);	  t.getCompiler().addToDebugLog(   "Inlining    empty    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String)	101	None	replace
719	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  NAME);  [CE]  cannot  find  symbol  NAME  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  NAME);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  NAME);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION,    name);    	non-compiled	[CE]  cannot  find  symbol  NAME	23	None	replace
720	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  }	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  	60	None	replace
721	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  	60	None	replace
722	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  	60	None	replace
723	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.get  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.get  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	if(n.getType()  ==  Token.NAME)  {  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.get	  t.getCompiler().addToDebugLog(       "Inlined    name:       "    +    n.getString());    Node    t.getCompiler().addToDebugLog(   "Inlined    name:       "    +    n.getString());    	non-compiled	[CE]  	60	None	replace
724	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  uniqueIdSEPARATOR);  [CE]  cannot  find  symbol  uniqueIdSEPARATOR  [FE]                        AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  uniqueIdSEPARATOR);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  uniqueIdSEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSEPARATOR	96	None	replace
725	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  ARGUMENTS,  newName);  [CE]  no  suitable  method  found  for  report(int,String,String)  [FE]                          AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.NAME,  ARGUMENTS,  newName);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.NAME,  ARGUMENTS,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String,String)	96	None	replace
726	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  uniqueIdSupplier);  [CE]  cannot  find  symbol  uniqueIdSupplier  [FE]                            AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  uniqueIdSupplier);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS,  uniqueIdSupplier);	  t.getCompiler().report(n.getType()    ==    Token.NAME,    ARGUMENTS);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSupplier	96	None	replace
727	[BUG]  [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  Node.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [CE]  non-static  method  removeProp(int)  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]          n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  Node.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	                n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    Node.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	non-compiled	[CE]  non-static  method  removeProp(int)  cannot  be  referenced  from  a  static  context	78	None	add
728	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.FUNCTION);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.FUNCTION);  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.FUNCTION);	  t.getCompiler().report(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	110	None	replace
729	[BUG]  [BUGGY]  t,  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);      [BUGGY]  t,  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());  [BUGGY]      }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t,  n.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    parent.getName());    	non-compiled	[CE]  not  a  statement	64	None	replace
