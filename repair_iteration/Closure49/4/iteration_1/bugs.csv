bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  n.getCompiler().reportCodeChange();  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().reportCodeChange();	t.getCompiler().reportCodeChange();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION);  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION);	t.getCompiler().reportCodeChange();  	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	7	None	replace
3	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]        AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR);  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR);	t.getCompiler().reportCodeChange();  	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	7	None	replace
4	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]          AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME);  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME);	t.getCompiler().reportCodeChange();  	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	7	None	replace
5	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]    [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	  	t.getCompiler().reportCodeChange();  	compilable	timeout	7	1	replace
6	[BUG]  [BUGGY]    timeout  [FE]            AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]    [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	  	t.getCompiler().reportCodeChange();  	compilable	timeout	7	1	replace
7	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());	t.getCompiler().reportCodeChange();  	compilable	timeout	7	1	replace
8	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  timeout  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());	t.getCompiler().reportCodeChange();  	compilable	timeout	7	1	replace
9	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT);	t.getCompiler().reportCodeChange();  	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	7	None	replace
10	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	t.getCompiler().reportCodeChange();  	compilable	timeout	7	1	replace
11	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  timeout  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	t.getCompiler().reportCodeChange();  	compilable	timeout	7	1	replace
12	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  [BUGGY]  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());	t.getCompiler().reportCodeChange();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
