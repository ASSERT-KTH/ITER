bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	compilable	timeout	11	1	replace
2	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	compilable	timeout	11	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.substring(0,  newName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	compilable	timeout	11	1	replace
4	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  timeout  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.substring(0,  newName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	compilable	timeout	11	1	replace
5	[BUG]  [BUGGY]  return  name.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  name.substring(0,  oldName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	11	None	replace
6	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.length()  +  1);	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	compilable	timeout	11	1	replace
7	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  timeout  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length()  +  1);	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	compilable	timeout	11	1	replace
8	[BUG]  [BUGGY]  return  newName.substring(0,  names.length()  -  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  names.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  names.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    return  newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
10	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    return  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
11	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    return  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
12	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  newName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  newName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
13	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  name.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  name.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    return  name.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	3	None	add
14	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  Return  newName.substring(0,  newName.length()  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  Return  newName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    Return  newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
15	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  String  newName  =  newName.substring(0,  newName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  String  newName  =  newName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    String  newName  =  newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	3	None	add
16	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  result.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  result  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  result.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    result.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  result	3	None	add
17	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      newName  =  names.getReplacementName(oldName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	        newName  =  names.getReplacementName(oldName);	  timeout    	compilable	timeout	14	1	add
18	[BUG]  [BUGGY]      newName  =  names.getReplacementName(oldName);  timeout  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      newName  =  names.getReplacementName(oldName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        newName  =  names.getReplacementName(oldName);	  timeout    	compilable	timeout	14	1	add
19	[BUG]  [BUGGY]      newName  =  names.get(oldName);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      newName  =  names.get(oldName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        newName  =  names.get(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol	14	None	add
20	[BUG]  [BUGGY]      renamer.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  renamer  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      renamer.replaceChild(oldName,  newName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        renamer.replaceChild(oldName,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	14	None	add
21	[BUG]  [BUGGY]      return  newName.substring(0,  oldName.length()  -  2);  [CE]  unreachable  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      return  newName.substring(0,  oldName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        return  newName.substring(0,  oldName.length()  -  2);	  timeout    	non-compiled	[CE]  unreachable  statement	14	None	add
22	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toLowerCase();	  return    oldName;    timeout    	compilable	timeout	17	1	replace
23	[BUG]  [BUGGY]  return  oldName.toLowerCase();  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase();	  return    oldName;    timeout    	compilable	timeout	17	1	replace
24	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length()  -  1);	  return    oldName;    timeout    	compilable	timeout	17	1	replace
25	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length()  -  1);	  return    oldName;    timeout    	compilable	timeout	17	1	replace
26	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return(newName  ==  null)?  null  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  oldName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
27	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return(newName  ==  null)?  null  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  oldName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
28	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return(newName!=  null)?  null  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName!=  null)?  null  :  oldName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
29	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return(newName!=  null)?  null  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=  null)?  null  :  oldName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
30	[BUG]  [BUGGY]  return  newName.trim();  return  newName.trim();  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  return  newName.trim();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    return  newName.trim();	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
31	[BUG]  [BUGGY]  return  newName.trim();  if(newName.trim().equals( " "))  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName.trim().equals( " "))  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName.trim().equals( " "))  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
32	[BUG]  [BUGGY]  return  newName.trim();  if(newName.trim().equals( " "))  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName.trim().equals( " "))  {  return  oldName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName.trim().equals( " "))  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
33	[BUG]  [BUGGY]  return  newName.trim();  if(newName.trim().length()  ==  0)  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName.trim().length()  ==  0)  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName.trim().length()  ==  0)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
34	[BUG]  [BUGGY]  return  newName.trim();  if(newName.trim().equals( "- "))  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName.trim().equals( "- "))  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName.trim().equals( "- "))  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
35	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
36	[BUG]  [BUGGY]  return  newName.trim();  if(newName.trim().length()!=  0)  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName.trim().length()!=  0)  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName.trim().length()!=  0)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
37	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  newName.length()  -  2);  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    return  newName.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  unreachable  statement	12	None	add
38	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  oldName.length()  -  2);  [CE]  unreachable  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  oldName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    return  newName.substring(0,  oldName.length()  -  2);	  timeout    	non-compiled	[CE]  unreachable  statement	12	None	add
39	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  oldName.substring(0,  newName.length()  -  2);  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  oldName.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    return  oldName.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  unreachable  statement	12	None	add
40	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  newName.substring(0,  newName.length()  -  2);  [CE]  unreachable  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  newName.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    newName.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  unreachable  statement	12	None	add
41	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  Return  newName.substring(0,  newName.length()  -  2);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  Return  newName.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    Return  newName.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  ';'  expected	12	None	add
42	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  String  newName  =  newName.substring(0,  newName.length()  -  2);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  String  newName  =  newName.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    String  newName  =  newName.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	12	None	add
43	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  name.substring(0,  newName.length()  -  2);  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  name.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    return  name.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	12	None	add
44	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  newName.length()  -  2);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  newName.length()  -  2);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    return  newName.substring(0,  newName.length()  -  2);  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	12	None	add
45	[BUG]  [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(Locale.ENGLISH);	  return    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
46	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase()  +  1;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toLowerCase()  +  1;	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
47	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase()  +  1;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  1;	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
48	[BUG]  [BUGGY]  return  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  name.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase();	  return    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	2	None	replace
49	[BUG]  [BUGGY]  return  oldName;  return  oldName;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  return  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    return  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
50	[BUG]  [BUGGY]  return  oldName;  if(oldName.length()  ==  0)  {  return  newName;  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName.length()  ==  0)  {  return  newName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName.length()  ==  0)  {  return  newName;  }	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
51	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  return  newName;  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  return  newName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  return  newName;  }	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
52	[BUG]  [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
53	[BUG]  [BUGGY]  return  oldName;  if(oldName.length()!=  0)  {  return  newName;  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName.length()!=  0)  {  return  newName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName.length()!=  0)  {  return  newName;  }	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
54	[BUG]  [BUGGY]  return  oldName;  newName  =  names.getReplacementName(oldName);  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  names.getReplacementName(oldName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  names.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
55	[BUG]  [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length()  -  2);  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  newName.substring(0,  newName.length()  -  2);	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
56	[BUG]  [BUGGY]  return  oldName;  if(oldName.length()  ==  0)  {  return  oldName;  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName.length()  ==  0)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName.length()  ==  0)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
57	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.trim()  +  oldName.toLowerCase();	  return    newName.trim();    timeout    	compilable	timeout	6	1	replace
58	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.toLowerCase();	  return    newName.trim();    timeout    	compilable	timeout	6	1	replace
59	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.trim();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.trim();	  return    newName.trim();    timeout    	compilable	timeout	6	1	replace
60	[BUG]  [BUGGY]  return  oldName.trim();  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.trim();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim();	  return    newName.trim();    timeout    	compilable	timeout	6	1	replace
61	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  return    newName.trim();    timeout    	compilable	timeout	6	1	replace
62	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  return    newName.trim();    timeout    	compilable	timeout	6	1	replace
63	[BUG]  [BUGGY]  return  newName.toLowerCase();  return  newName.toLowerCase();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  return  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    return  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
64	[BUG]  [BUGGY]  return  newName.toLowerCase();  return  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  return  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    return  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
65	[BUG]  [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	1	None	add
66	[BUG]  [BUGGY]  return  newName.toLowerCase();  newName.toLowerCase();  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
67	[BUG]  [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	1	None	add
68	[BUG]  [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	1	None	add
69	[BUG]  [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	1	None	add
70	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
71	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
72	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
73	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
74	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
75	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
76	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  newName  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName  :  oldName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
77	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  newName  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  oldName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
78	[BUG]  [BUGGY]  return  newName.toLowerCase(nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase(nameStack.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(nameStack.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
79	[BUG]  [BUGGY]  return  newName.toLowerCase(names.getDefault());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase(names.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(names.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
80	[BUG]  [BUGGY]  return  names.toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  names.toLowerCase(Locale.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(Locale.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	9	None	replace
81	[BUG]  [BUGGY]  return  name.toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  name.toLowerCase(Locale.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(Locale.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	9	None	replace
82	[BUG]  [BUGGY]  return  oldName.toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.toLowerCase(Locale.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase(Locale.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	9	None	replace
83	[BUG]  [BUGGY]  return  locale.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  locale.toLowerCase(newName.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  locale.toLowerCase(newName.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
84	[BUG]  [BUGGY]  return  newName.toLowerCase(locale.getDefault());  [CE]  cannot  find  symbol  locale  [FE]                            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase(locale.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(locale.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  locale	9	None	replace
85	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    return  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
86	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    return  oldName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
87	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
88	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
89	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	10	None	add
90	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	10	None	add
91	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	10	None	add
92	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [CE]  unreachable  statement  [FE]                                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
93	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName!=  null?  oldName  :  newName;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName!=  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  newName!=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	20	None	add
94	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  newName  ==  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	20	None	add
95	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  oldName!=  null?  oldName  :  newName;  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  oldName!=  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  oldName!=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	20	None	add
96	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  >>  null?  oldName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  >>  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  newName  >>  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	add
97	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  >=  null?  oldName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  >=  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  newName  >=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	add
98	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  Return  newName!=  null?  oldName  :  newName;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  Return  newName!=  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    Return  newName!=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
99	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName!=  null?  oldName  :  newName);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName!=  null?  oldName  :  newName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  newName!=  null?  oldName  :  newName);	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
100	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  [Delete]  null?  oldName  :  newName;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  return  newName  [Delete]  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    return  newName  [Delete]  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
101	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    timeout    	compilable	timeout	13	1	replace
102	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  timeout  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    timeout    	compilable	timeout	13	1	replace
103	[BUG]  [BUGGY]  return  name.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  name.substring(0,  newName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
104	[BUG]  [BUGGY]  return  newName.substring(0,  name.length());  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  name.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  name.length());	  return    newName.substring(0,    newName.length()    -    2);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
105	[BUG]  [BUGGY]  return  newName.substring(0,  renamedName.length());  [CE]  cannot  find  symbol  renamedName  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  renamedName.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  renamedName.length());	  return    newName.substring(0,    newName.length()    -    2);    timeout    	non-compiled	[CE]  cannot  find  symbol  renamedName	13	None	replace
106	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  names.toString()  :  oldName;	  return    newName!=    null?    name.toString()    :    oldName;    	compilable	timeout	19	1	replace
107	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  names.toString()  :  oldName;	  return    newName!=    null?    name.toString()    :    oldName;    	compilable	timeout	19	1	replace
108	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  names.toString()  :  oldName;	  return    newName!=    null?    name.toString()    :    oldName;    	compilable	timeout	19	1	replace
109	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  names.toString()  :  oldName;	  return    newName!=    null?    name.toString()    :    oldName;    	compilable	timeout	19	1	replace
110	[BUG]  [BUGGY]  return  oldName!=  null?  name.toString()  :  newName;  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  name.toString()  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  name.toString()  :  newName;	  return    newName!=    null?    name.toString()    :    oldName;    	non-compiled	[CE]  cannot  find  symbol  name	19	None	replace
111	[BUG]  [BUGGY]  return  newName.toString();  return  newName.toString();  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  return  newName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    return  newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
112	[BUG]  [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	7	None	add
113	[BUG]  [BUGGY]  return  newName.toString();  if(newName.length()  ==  0)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.length()  ==  0)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
114	[BUG]  [BUGGY]  return  newName.toString();  return  oldName.toString();  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  return  oldName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    return  oldName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
115	[BUG]  [BUGGY]  return  newName.toString();  if(newName.length()  >  0)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.length()  >  0)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.length()  >  0)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
116	[BUG]  [BUGGY]  return  newName.toString();  newName.toString();  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  newName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
117	[BUG]  [BUGGY]  return  newName.toString();  if(newName.length()!=  0)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.length()!=  0)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.length()!=  0)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
118	[BUG]  [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	7	None	add
119	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  newName;	  return    newName    <    null?    null    :    newName;    	compilable	timeout	18	1	replace
120	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  newName;	  return    newName    <    null?    null    :    newName;    	compilable	timeout	18	1	replace
121	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  newName;	  return    newName    <    null?    null    :    newName;    	compilable	timeout	18	1	replace
122	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  ==  null?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  newName;	  return    newName    <    null?    null    :    newName;    	compilable	timeout	18	1	replace
123	[BUG]  [BUGGY]  return  newName  <  null?  null  :  newName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  <  null?  null  :  newName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  <  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
124	[BUG]  [BUGGY]  return  newName  >=  null?  null  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  >=  null?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  >=  null?  null  :  newName;	  return    newName    <    null?    null    :    newName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	replace
125	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toString();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
126	[BUG]  [BUGGY]  return  oldName.toString();  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toString();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
127	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + "n ";  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "n ";	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
128	[BUG]  [BUGGY]  return  newName.toString()  + "n ";  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + "n ";  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "n ";	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
129	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  newName.length()  -  3);	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
130	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length()  -  3);	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
131	[BUG]  [BUGGY]      renamer.replaceChild(names,  newName);  [CE]  cannot  find  symbol  renamer  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      renamer.replaceChild(names,  newName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        renamer.replaceChild(names,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	14	None	add
132	[BUG]  [BUGGY]      newName  =  names.getReplacementName(oldName);  return  newName;  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      newName  =  names.getReplacementName(oldName);  return  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        newName  =  names.getReplacementName(oldName);  return  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	14	None	add
133	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      newName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	        newName  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	compilable	timeout	14	1	add
134	[BUG]  [BUGGY]      newName  =  names.getReplacementName(oldName);  nameStack.pop();  timeout  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]      newName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	        newName  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	compilable	timeout	14	1	add
135	[BUG]  [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	7	None	add
136	[BUG]  [BUGGY]  return  newName.toString();  String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	7	None	add
137	[BUG]  [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	7	None	add
138	[BUG]  [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	7	None	add
139	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  newName!=  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  newName!=  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    newName!=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	20	None	add
140	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName;    renewName!=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	20	None	add
141	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  name.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  name.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    return  name.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	10	None	add
142	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
143	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  String  newName  =  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  String  newName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    String  newName  =  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	10	None	add
144	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  Return  newName.substring(0,  oldName.length()  -  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  Return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    Return  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  ';'  expected	10	None	add
145	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    return  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
146	[BUG]  [BUGGY]  return  newName.substring(0,  names.length());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  names.length());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  names.length());	  return    newName.substring(0,    oldName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
147	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  names.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
148	[BUG]  [BUGGY]  return  names.toString();  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  names.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
149	[BUG]  [BUGGY]  return  name.toString();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  name.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toString();	  return    newName.toString();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
150	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + ", "  +  nameStack.size();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ", "  +  nameStack.size();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
151	[BUG]  [BUGGY]  return  newName.toString()  + ", "  +  nameStack.size();  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + ", "  +  nameStack.size();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ", "  +  nameStack.size();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
152	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  name.length()  -  2);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  2);  return  newName.substring(0,  name.length()  -  2);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    2);    return  newName.substring(0,  name.length()  -  2);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	12	None	add
153	[BUG]  [BUGGY]  return  names.trim();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  names.trim();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.trim();	  return    newName.trim();    timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
154	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	5	None	add
155	[BUG]  [BUGGY]  return  newName.trim();  return  oldName.trim();  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  return  oldName.trim();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    return  oldName.trim();	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
156	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	5	None	add
157	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	5	None	add
158	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	5	None	add
159	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	5	None	add
160	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  if(newName!=  null)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName;  }	  return    oldName;    timeout    	compilable	timeout	17	1	replace
161	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  if(newName!=  null)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }	  return    oldName;    timeout    	compilable	timeout	17	1	replace
162	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  newName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName  :  newName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
163	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  newName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  newName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
164	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName  ==  null?  newName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  newName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
165	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  timeout  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName  ==  null?  newName  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  newName;	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
166	[BUG]  [BUGGY]  return  names.toLowerCase(locale.getDefault());  [CE]  cannot  find  symbol  locale  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  names.toLowerCase(locale.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(locale.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  locale	9	None	replace
167	[BUG]  [BUGGY]  return  newName  <  null?  null  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  <  null?  null  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  <  null?  null  :  oldName;	  return    newName    <    null?    null    :    newName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
168	[BUG]  [BUGGY]  return  newName  <  null?  null  :  newName.toString();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  <  null?  null  :  newName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  <  null?  null  :  newName.toString();	  return    newName    <    null?    null    :    newName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
169	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	add
170	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	add
171	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	add
172	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	add
173	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	add
174	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	add
175	[BUG]  [BUGGY]  return  names.toLowerCase();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  names.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();	  return    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
176	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toUpperCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toUpperCase();	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
177	[BUG]  [BUGGY]  return  newName.toUpperCase();  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toUpperCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toUpperCase();	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
178	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  name.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  name.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    return  newName.substring(0,  name.length()  -  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	3	None	add
179	[BUG]  [BUGGY]  return  newName.toLowerCase();  return  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  return  name.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    return  name.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	1	None	add
180	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  renamer);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  nameStack.peek().replace(oldName,  renamer);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	16	None	add
181	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  renamer);  return  oldName;  [CE]  cannot  find  symbol  renamer  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  renamer);  return  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  nameStack.peek().replace(oldName,  renamer);  return  oldName;	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	16	None	add
182	[BUG]  [BUGGY]  return  oldName;  if(oldName!=  null)  {  return  newName;  }  else  {  return  nameStack.peek();  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  if(oldName!=  null)  {  return  newName;  }  else  {  return  nameStack.peek();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    if(oldName!=  null)  {  return  newName;  }  else  {  return  nameStack.peek();  }	  timeout    	non-compiled	[CE]  incompatible  types	16	None	add
183	[BUG]  [BUGGY]  return  oldName;  newName  =  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
184	[BUG]  [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length()  -  1);  return  oldName;  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length()  -  1);  return  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName;    newName  =  newName.substring(0,  newName.length()  -  1);  return  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	16	None	add
185	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  oldName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
186	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  oldName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
187	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return(newName  ==  null)?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  newName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
188	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return(newName  ==  null)?  null  :  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  newName;	  return    oldName;    timeout    	compilable	timeout	17	1	replace
189	[BUG]  [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.isEmpty())  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
190	[BUG]  [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
191	[BUG]  [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  oldName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.isEmpty())  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
192	[BUG]  [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
193	[BUG]  [BUGGY]  return  newName.toString();  if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
194	[BUG]  [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString();  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString();    if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	7	None	add
195	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  newName  =  nameStack.peek().replace(oldName,  renamer);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  renamer);	      timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	15	None	replace
196	[BUG]  [BUGGY]  renamer.replaceChild(oldName,  newName);  return  newName;  [CE]  cannot  find  symbol  renamer  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  renamer.replaceChild(oldName,  newName);  return  newName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(oldName,  newName);  return  newName;	      timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	15	None	replace
197	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName.toString()  :  oldName;	  return    newName!=    null?    name.toString()    :    oldName;    	compilable	timeout	19	1	replace
198	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName.toString()  :  oldName;	  return    newName!=    null?    name.toString()    :    oldName;    	compilable	timeout	19	1	replace
199	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
200	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName;    timeout    	compilable	timeout	21	1	replace
201	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + ": "  +  nameStack.peek();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ": "  +  nameStack.peek();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
202	[BUG]  [BUGGY]  return  newName.toString()  + ": "  +  nameStack.peek();  timeout  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + ": "  +  nameStack.peek();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ": "  +  nameStack.peek();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
203	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + "_ "  +  nameStack.peek();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "_ "  +  nameStack.peek();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
204	[BUG]  [BUGGY]  return  newName.toString()  + "_ "  +  nameStack.peek();  timeout  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toString()  + "_ "  +  nameStack.peek();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "_ "  +  nameStack.peek();	  return    newName.toString();    timeout    	compilable	timeout	8	1	replace
205	[BUG]  [BUGGY]  return  newName.toLowerCase();  renamer.removeConstness(newName);  [CE]  cannot  find  symbol  renamer  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  renamer.removeConstness(newName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    renamer.removeConstness(newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	1	None	add
206	[BUG]  [BUGGY]  return  newName.toLowerCase();  return  newName.toUpperCase();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  return  newName.toUpperCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    return  newName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
207	[BUG]  [BUGGY]  return  newName.toLowerCase();  referenceStack.push(newName);  [CE]  cannot  find  symbol  referenceStack  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  referenceStack.push(newName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    referenceStack.push(newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	1	None	add
208	[BUG]  [BUGGY]  return  newName.toLowerCase();  renamer.removeConstness(oldName);  [CE]  cannot  find  symbol  renamer  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase();  renamer.removeConstness(oldName);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase();    renamer.removeConstness(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	1	None	add
209	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  oldName.length()  -  1);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  oldName.length()  -  1);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	10	None	add
210	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	10	None	add
211	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	10	None	add
212	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }	  timeout    	non-compiled	[CE]  unreachable  statement	10	None	add
213	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  String  newName  =  oldName.substring(0,  newName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  String  newName  =  oldName.substring(0,  newName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    String  newName  =  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	3	None	add
214	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  newName.length())  -  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  newName.length())  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    1);    return  newName.substring(0,  newName.length())  -  1);	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
215	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
216	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
217	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
218	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	add
219	[BUG]  [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim();    if(newName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	5	None	add
220	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toLowerCase()  +  oldName.toLowerCase();	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
221	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  oldName.toLowerCase();	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
222	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toLowerCase()  +  nameStack.peek();	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
223	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  nameStack.peek();	  return    newName.toLowerCase();    timeout    	compilable	timeout	2	1	replace
224	[BUG]  [BUGGY]  return  newName  <  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName  <  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  <  null?  null  :  newName.substring(0,  oldName.length()  -  1);	  return    newName    <    null?    null    :    newName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
225	[BUG]  [BUGGY]  return  newName.replace(oldName,  nameStack.peek());  [CE]  no  suitable  method  found  for  replace(String,Renamer)  [FE]            AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  newName.replace(oldName,  nameStack.peek());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.replace(oldName,  nameStack.peek());	  return    newName.trim();    timeout    	non-compiled	[CE]  no  suitable  method  found  for  replace(String,Renamer)	6	None	replace
226	[BUG]  [BUGGY]  return  name.toLowerCase(nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {    [BUGGY]  return  name.toLowerCase(nameStack.getDefault());  [BUGGY]    }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(nameStack.getDefault());	  return    newName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
