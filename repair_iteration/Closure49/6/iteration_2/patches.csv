bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  unreachable  statement	183	None	replace
2	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	183	1	replace
3	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length());  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	183	1	replace
4	[BUG]  [BUGGY]  return  newName;  newName  =  oldName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  oldName.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  unreachable  statement	183	None	replace
5	[BUG]  [BUGGY]  return  oldName;  newName  =  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  newName.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  unreachable  statement	183	None	replace
6	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  oldName.length()  -  1);	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  unreachable  statement	183	None	replace
7	[BUG]  [BUGGY]  name  =  newName.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  newName.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	183	None	replace
8	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
9	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
10	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
11	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
12	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
13	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
14	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
15	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    oldName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	39	None	replace
16	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    oldName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	39	None	replace
17	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  oldName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    oldName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	39	None	replace
18	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	138	None	replace
19	[BUG]  [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
20	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	138	None	replace
21	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	138	None	replace
22	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  newName  ==  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	74	None	add
23	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  oldName  ==  null?  oldName  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  oldName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  oldName  ==  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	74	None	add
24	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  newName!=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	74	None	add
25	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  if(oldName!=  null)  {  return  newName  ==  null?  oldName  :  newName.toLowerCase();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  if(oldName!=  null)  {  return  newName  ==  null?  oldName  :  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    if(oldName!=  null)  {  return  newName  ==  null?  oldName  :  newName.toLowerCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	74	None	add
26	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  Return  newName  ==  null?  oldName  :  newName.toLowerCase();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  Return  newName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    Return  newName  ==  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  ';'  expected	74	None	add
27	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  newName  ==  null?  oldName  :  newName.toLowerCase();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  newName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    newName  ==  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  not  a  statement	74	None	add
28	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toUpperCase();  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  newName  ==  null?  oldName  :  newName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	74	None	add
29	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toLowerCase());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  newName  ==  null?  oldName  :  newName.toLowerCase());	  timeout    	non-compiled	[CE]  ';'  expected	74	None	add
30	[BUG]  [BUGGY]  return  names.toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(Locale.ENGLISH);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(Locale.ENGLISH);	  return    newName.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	45	None	replace
31	[BUG]  [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  oldName);  [CE]  cannot  find  symbol  Locale  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(Locale.ENGLISH,  oldName);	  return    newName.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	45	None	replace
32	[BUG]  [BUGGY]  return  name.toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase(Locale.ENGLISH);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(Locale.ENGLISH);	  return    newName.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	45	None	replace
33	[BUG]  [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  null);  [CE]  cannot  find  symbol  Locale  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  null);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(Locale.ENGLISH,  null);	  return    newName.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	45	None	replace
34	[BUG]  [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  locale);  [CE]  cannot  find  symbol  Locale  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  locale);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(Locale.ENGLISH,  locale);	  return    newName.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	45	None	replace
35	[BUG]  [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  nameStack);  [CE]  cannot  find  symbol  Locale  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(Locale.ENGLISH,  nameStack);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(Locale.ENGLISH,  nameStack);	  return    newName.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	45	None	replace
36	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  oldName.length()  -  1);	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	52	1	replace
37	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length()  -  1);	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	52	1	replace
38	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  name.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  name.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  name.length()  -  1);	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
39	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
40	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.trim();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
41	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
42	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  newName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
43	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  oldName.trim().length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  oldName.trim().length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
44	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  oldName.trim().length()  ==  0)  {  return  newName.trim();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  oldName.trim().length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  oldName.trim().length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
45	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
46	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  oldName.trim();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  newName.trim().length()  ==  0)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
47	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName  ==  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	108	None	add
48	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName!=  null?  names.toString()  :  oldName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName!=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	108	None	add
49	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  oldName  ==  null?  names.toString()  :  oldName;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  oldName  ==  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  oldName  ==  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	108	None	add
50	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  Return  newName  ==  null?  names.toString()  :  oldName;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  Return  newName  ==  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    Return  newName  ==  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  ';'  expected	108	None	add
51	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName  ==  null?  names.toString()  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	108	None	add
52	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  >>  null?  names.toString()  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  >>  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName  >>  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	108	None	add
53	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  >=  null?  names.toString()  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  >=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName  >=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	108	None	add
54	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  newName  ==  null?  names.toString()  :  oldName;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  newName  ==  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    newName  ==  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	108	None	add
55	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName;  newName  =  names.getReplacementName(oldName);  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName;  newName  =  names.getReplacementName(oldName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName;  newName  =  names.getReplacementName(oldName);  }	  return    oldName;    newName    =    names.getReplacementName(oldName);    	non-compiled	[CE]  unreachable  statement	54	None	replace
56	[BUG]  [BUGGY]  return  name;  newName  =  names.getReplacementName(oldName);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name;  newName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name;  newName  =  names.getReplacementName(oldName);	  return    oldName;    newName    =    names.getReplacementName(oldName);    	non-compiled	[CE]  cannot  find  symbol  name	54	None	replace
57	[BUG]  [BUGGY]  return  oldName;  newName  =  names.getReplacementName(oldName,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  names.getReplacementName(oldName,  renamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  names.getReplacementName(oldName,  renamer);	  return    oldName;    newName    =    names.getReplacementName(oldName);    	non-compiled	[CE]  cannot  find  symbol  renamer	54	None	replace
58	[BUG]  [BUGGY]  return  oldName;  newName  =  names.getReplacementName(newName);  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  names.getReplacementName(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  names.getReplacementName(newName);	  return    oldName;    newName    =    names.getReplacementName(oldName);    	non-compiled	[CE]  unreachable  statement	54	None	replace
59	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  return  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.toLowerCase();  return  oldName.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	compilable	timeout	179	1	replace
60	[BUG]  [BUGGY]  newName.toLowerCase();  return  oldName.toLowerCase();  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  return  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  return  oldName.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	compilable	timeout	179	1	replace
61	[BUG]  [BUGGY]  newName.toLowerCase();  return  names.toLowerCase();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  return  names.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  return  names.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
62	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  return  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.toLowerCase();  return  newName.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	compilable	timeout	179	1	replace
63	[BUG]  [BUGGY]  newName.toLowerCase();  return  newName.toLowerCase();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  return  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  return  newName.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	compilable	timeout	179	1	replace
64	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	compilable	timeout	63	1	replace
65	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	compilable	timeout	63	1	replace
66	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  name	63	None	replace
67	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  else  {  nameMap.put(oldName,  newName);  }  [CE]  cannot  find  symbol  nameMap  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  else  {  nameMap.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  }  else  {  nameMap.put(oldName,  newName);  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  nameMap	63	None	replace
68	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	compilable	timeout	16	1	replace
69	[BUG]  [BUGGY]  newName.substring(0,  newName.length());  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	compilable	timeout	16	1	replace
70	[BUG]  [BUGGY]  name.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  newName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	16	None	replace
71	[BUG]  [BUGGY]  result.substring(0,  newName.length());  [CE]  cannot  find  symbol  result  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  result.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	result.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  result	16	None	replace
72	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  result  =  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	String  result  =  newName.substring(0,  newName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	compilable	timeout	16	1	replace
73	[BUG]  [BUGGY]  String  result  =  newName.substring(0,  newName.length()  -  1);  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  result  =  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  result  =  newName.substring(0,  newName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	compilable	timeout	16	1	replace
74	[BUG]  [BUGGY]  name.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	16	None	replace
75	[BUG]  [BUGGY]  name.replaceChild(oldName,  newName);  return  newName;  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.replaceChild(oldName,  newName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.replaceChild(oldName,  newName);  return  newName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  name	196	None	replace
76	[BUG]  [BUGGY]  renamer.replaceChild(names,  oldName);  return  newName;  [CE]  cannot  find  symbol  renamer  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(names,  oldName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(names,  oldName);  return  newName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  renamer	196	None	replace
77	[BUG]  [BUGGY]  Renamer  renamer  =  names.replaceChild(oldName,  newName);  return  newName;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  names.replaceChild(oldName,  newName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  renamer  =  names.replaceChild(oldName,  newName);  return  newName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
78	[BUG]  [BUGGY]  Renamer  oldRenamer  =  names.replaceChild(oldName,  newName);  return  newName;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  oldRenamer  =  names.replaceChild(oldName,  newName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  oldRenamer  =  names.replaceChild(oldName,  newName);  return  newName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
79	[BUG]  [BUGGY]  newName.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.replaceChild(oldName,  newName);	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
80	[BUG]  [BUGGY]  return  name.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	10	None	replace
81	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()));	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
82	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  1));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  1));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()  -  1));	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
83	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	10	None	replace
84	[BUG]  [BUGGY]  return  newName.toString()  + "_ "  +  oldName.peek();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "_ "  +  oldName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "_ "  +  oldName.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
85	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + "_ "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toString()  + "_ "  +  nameStack.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	compilable	timeout	204	1	replace
86	[BUG]  [BUGGY]  return  oldName.toString()  + "_ "  +  nameStack.peek();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + "_ "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toString()  + "_ "  +  nameStack.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	compilable	timeout	204	1	replace
87	[BUG]  [BUGGY]  return  newName.toString()  + "_ "  +  names.peek();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "_ "  +  names.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "_ "  +  names.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
88	[BUG]  [BUGGY]  return  names.toString()  + "_ "  +  newName.peek();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + "_ "  +  newName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  + "_ "  +  newName.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
89	[BUG]  [BUGGY]  return  name.toString()  + "_ "  +  newName.peek();  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toString()  + "_ "  +  newName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toString()  + "_ "  +  newName.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	204	None	replace
90	[BUG]  [BUGGY]  name  =  newName.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  name	212	None	replace
91	[BUG]  [BUGGY]  newName.append(oldName.substring(0,  oldName.length()  -  1));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(oldName.substring(0,  oldName.length()  -  1));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(oldName.substring(0,  oldName.length()  -  1));	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
92	[BUG]  [BUGGY]  newName.append(oldName.substring(0,  oldName.length()));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(oldName.substring(0,  oldName.length()));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(oldName.substring(0,  oldName.length()));	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
93	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	145	None	replace
94	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length());  return  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length());  return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	145	None	replace
95	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  names.toString()  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  names.toString()  :  newName;	  return    oldName!=    null?    name.toString()    :    newName;    	compilable	timeout	110	1	replace
96	[BUG]  [BUGGY]  return  oldName!=  null?  names.toString()  :  newName;  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  names.toString()  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  names.toString()  :  newName;	  return    oldName!=    null?    name.toString()    :    newName;    	compilable	timeout	110	1	replace
97	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName.toString()  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName.toString()  :  newName;	  return    oldName!=    null?    name.toString()    :    newName;    	compilable	timeout	110	1	replace
98	[BUG]  [BUGGY]  return  newName!=  null?  oldName.toString()  :  newName;  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName.toString()  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName.toString()  :  newName;	  return    oldName!=    null?    name.toString()    :    newName;    	compilable	timeout	110	1	replace
99	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  newName.length());	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  unreachable  statement	55	None	replace
100	[BUG]  [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  newName.substring(0,  newName.length());	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  unreachable  statement	55	None	replace
101	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  name.length());  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  name.length());	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  name	55	None	replace
102	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  names.length());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  names.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  names.length());	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
103	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
104	[BUG]  [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
105	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
106	[BUG]  [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
107	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
108	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toString();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
109	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
110	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
111	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()!=  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
112	[BUG]  [BUGGY]  if(oldName.length()!=  0)  {  return  newName.toString();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()!=  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
113	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
114	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
115	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
116	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
117	[BUG]  [BUGGY]  return  names.substring(0,  newName.length());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    name.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
118	[BUG]  [BUGGY]  return  name.substring(0,  oldName.length()  -  2);  [CE]  cannot  find  symbol  name  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  oldName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  oldName.length()  -  2);	  return    newName.substring(0,    newName.length()    -    2);    return    name.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  name	43	None	replace
119	[BUG]  [BUGGY]  newName!=  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName!=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    Return    newName!=    null?    oldName    :    newName;    	non-compiled	[CE]  not  a  statement	98	None	replace
120	[BUG]  [BUGGY]  newName  ==  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  ==  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    Return    newName!=    null?    oldName    :    newName;    	non-compiled	[CE]  not  a  statement	98	None	replace
121	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName!=  null?  newName.toString()  :  oldName;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName!=  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    return  oldName!=  null?  newName.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	197	None	add
122	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName  ==  null?  newName.toString()  :  oldName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName  ==  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    return  oldName  ==  null?  newName.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	197	None	add
123	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  Return  oldName!=  null?  newName.toString()  :  oldName;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  Return  oldName!=  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    Return  oldName!=  null?  newName.toString()  :  oldName;	  timeout    	non-compiled	[CE]  ';'  expected	197	None	add
124	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName  >=  null?  newName.toString()  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName  >=  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    return  oldName  >=  null?  newName.toString()  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	197	None	add
125	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  newName!=  null?  newName.toString()  :  oldName;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  newName!=  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    newName!=  null?  newName.toString()  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	197	None	add
126	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName  >>  null?  newName.toString()  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName  >>  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    return  oldName  >>  null?  newName.toString()  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	197	None	add
127	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  if(oldName!=  null?  newName.toString()  :  oldName);  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  if(oldName!=  null?  newName.toString()  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    if(oldName!=  null?  newName.toString()  :  oldName);	  timeout    	non-compiled	[CE]  incompatible  types	197	None	add
128	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  if(oldName!=  null?  newName.toString()  :  oldName;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  if(oldName!=  null?  newName.toString()  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    if(oldName!=  null?  newName.toString()  :  oldName;  }	  timeout    	non-compiled	[CE]  ')'  expected	197	None	add
129	[BUG]  [BUGGY]  Renamer  rootRenamer.replaceChild(oldName,  newName);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  rootRenamer.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  rootRenamer.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  ';'  expected	20	None	replace
130	[BUG]  [BUGGY]  Renamer  renamer  =  names.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  renamer  =  names.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
131	[BUG]  [BUGGY]  Renamer  oldRenamer  =  names.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  oldRenamer  =  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  oldRenamer  =  names.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
132	[BUG]  [BUGGY]  Renamer  rootRenamer  =  names.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  rootRenamer  =  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  rootRenamer  =  names.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
133	[BUG]  [BUGGY]  Renamer  newName  =  names.replaceChild(oldName,  newName);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  newName  =  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  newName  =  names.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	20	None	replace
134	[BUG]  [BUGGY]  name.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  name  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	20	None	replace
135	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  newName.substring(0,  oldName.length()  +  1);  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  newName.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    return  newName.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  unreachable  statement	6	None	add
136	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  oldName.substring(0,  oldName.length()  +  1);  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  oldName.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    return  oldName.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  unreachable  statement	6	None	add
137	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }	  timeout    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	add
138	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  return  newName.substring(0,  oldName.length()  +  1);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  return  newName.substring(0,  oldName.length()  +  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  return  newName.substring(0,  oldName.length()  +  1);  }	  timeout    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	add
139	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  nameStack.push(newName);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  nameStack.push(newName);  }	  timeout    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	add
140	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  names.add(newName);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  names.add(newName);  }	  timeout    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	add
141	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  names.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	add
142	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  nameStack.pop();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    if(oldName.length()  +  1!=  null)  {  return  newName.substring(0,  oldName.length()  +  1);  }  else  {  nameStack.pop();  }	  timeout    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	add
143	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	219	1	replace
144	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	219	1	replace
145	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  name.trim();  }  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  name.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  name.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	219	None	replace
146	[BUG]  [BUGGY]  return  name.trim();  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.trim();	  return    newName.trim();    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	219	None	replace
147	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.trim();	  return    newName.trim();    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	219	1	replace
148	[BUG]  [BUGGY]  newName.trim();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();	  return    newName.trim();    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	219	1	replace
149	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	12	1	replace
150	[BUG]  [BUGGY]  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	12	1	replace
151	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    1);    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	12	1	replace
152	[BUG]  [BUGGY]  newName.substring(0,  oldName.length());  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    1);    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	12	1	replace
153	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	73	1	replace
154	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName.toLowerCase();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	73	1	replace
155	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	73	1	replace
156	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName.toLowerCase();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  newName.toLowerCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	73	1	replace
157	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  nameStack.toLowerCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
158	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.toString();	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	compilable	timeout	115	1	replace
159	[BUG]  [BUGGY]  newName.toString();  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toString();	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	compilable	timeout	115	1	replace
160	[BUG]  [BUGGY]  name.toString();  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toString();	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol  name	115	None	replace
161	[BUG]  [BUGGY]  result.toString();  [CE]  cannot  find  symbol  result  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  result.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	result.toString();	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol  result	115	None	replace
162	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  oldName.substring(0,  oldName.length()  -  1);	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
163	[BUG]  [BUGGY]  newName  =  oldName.substring(0,  oldName.length()  -  1);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName.substring(0,  oldName.length()  -  1);	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
164	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()!=  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
165	[BUG]  [BUGGY]  if(oldName.length()!=  0)  {  return  newName;  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()!=  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
166	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
167	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName;  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
168	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  oldName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  oldName.substring(0,  oldName.length()  -  2);	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
169	[BUG]  [BUGGY]  newName  =  oldName.substring(0,  oldName.length()  -  2);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  oldName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName.substring(0,  oldName.length()  -  2);	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
170	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
171	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
172	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
173	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
174	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
175	[BUG]  [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
176	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	compilable	timeout	173	1	replace
177	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	compilable	timeout	173	1	replace
178	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  nameStack.peek();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  nameStack.peek();	  return    newName!=    null?    oldName    :    newName;    return    newName    >=    null?    oldName    :    newName;    	non-compiled	[CE]  incompatible  types	97	None	replace
179	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    return  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
180	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  return  oldName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    return  oldName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
181	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
182	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.push(newName);  }  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.push(newName);  }	  timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	1	None	add
183	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  names.add(newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	1	None	add
184	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }  [CE]  unreachable  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
185	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameMap.put(oldName,  newName);  }  [CE]  cannot  find  symbol  nameMap  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameMap.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameMap.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameMap	1	None	add
186	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  names.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	1	None	add
187	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()  -  2));	  return    newName.substring(0,    newName.length()    -    2);    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
188	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2),  newName.length());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2),  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()  -  2),  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
189	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    return  oldName  ==  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	164	None	add
190	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
191	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName!=  null?  newName  :  newName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName!=  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    return  oldName!=  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	164	None	add
192	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName;  }  else  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName;  }  else  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName;  }  else  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  ')'  expected	164	None	add
193	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName);  }  else  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName);  }  else  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName);  }  else  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	164	None	add
194	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName.trim())  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName.trim())  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName.trim())  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
195	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName)  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
196	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  Return  oldName  ==  null?  newName  :  newName;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  Return  oldName  ==  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    Return  oldName  ==  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	164	None	add
197	[BUG]  [BUGGY]  String  newName  =  oldName.trim();  return  newName.trim();  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.trim();  return  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.trim();  return  newName.trim();	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
198	[BUG]  [BUGGY]  name.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.trim();  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	159	None	replace
199	[BUG]  [BUGGY]  name.trim();  if(oldName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.trim();  if(oldName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.trim();  if(oldName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	159	None	replace
200	[BUG]  [BUGGY]  name.trim();  if(newName!=  null)  {  String  oldName  =  oldName.trim();  return  newName.trim();  }  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.trim();  if(newName!=  null)  {  String  oldName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.trim();  if(newName!=  null)  {  String  oldName  =  oldName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	159	None	replace
201	[BUG]  [BUGGY]  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
202	[BUG]  [BUGGY]  String  newName  =  oldName.trim();  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.trim();	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
203	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }	  return    newName!=    null?    oldName    :    newName;    return    newName    [Delete]    null?    oldName    :    newName;    	compilable	timeout	100	1	replace
204	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }	  return    newName!=    null?    oldName    :    newName;    return    newName    [Delete]    null?    oldName    :    newName;    	compilable	timeout	100	1	replace
205	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	compilable	timeout	182	1	replace
206	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName;  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	compilable	timeout	182	1	replace
207	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  nameStack.peek();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  nameStack.peek();  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	non-compiled	[CE]  incompatible  types	182	None	replace
208	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName;  }  else  {  return  nameStack.peek();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName;  }  else  {  return  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName;  }  else  {  return  nameStack.peek();  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	non-compiled	[CE]  incompatible  types	182	None	replace
209	[BUG]  [BUGGY]  return  nameStack.peek();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.peek();	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	non-compiled	[CE]  incompatible  types	182	None	replace
210	[BUG]  [BUGGY]  if(newName!=  null)  {  return  nameStack.peek();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  nameStack.peek();  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	non-compiled	[CE]  incompatible  types	182	None	replace
211	[BUG]  [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
212	[BUG]  [BUGGY]  if(oldName!=  null  ||  newName.length()  ==  0)  {  return  nameStack.peek();  }  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  newName.length()  ==  0)  {  return  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null  ||  newName.length()  ==  0)  {  return  nameStack.peek();  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    return    nameStack.peek();    }    	non-compiled	[CE]  incompatible  types	182	None	replace
213	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toLowerCase()  +  newName.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	compilable	timeout	221	1	replace
214	[BUG]  [BUGGY]  return  oldName.toLowerCase()  +  newName.toLowerCase();  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase()  +  newName.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	compilable	timeout	221	1	replace
215	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  name.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	221	None	replace
216	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  names.toLowerCase();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  names.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  names.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	221	None	replace
217	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  nameStack.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	221	None	replace
218	[BUG]  [BUGGY]  return  newName.toLowerCase()  /  oldName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  /  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  /  oldName.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	221	None	replace
219	[BUG]  [BUGGY]  return  name.toLowerCase()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase()  +  oldName.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	221	None	replace
220	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length())-  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length())-  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length())-  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  ';'  expected	214	None	replace
221	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length())-  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length())-  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length())-  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  ';'  expected	214	None	replace
222	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length())-  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length())-  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length())-  1;	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	214	None	replace
223	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length())-  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length())-  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length())-  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  ';'  expected	214	None	replace
224	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length())-  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length())-  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length())-  1;	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	214	None	replace
225	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length())-  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length())-  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length())-  1;	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	214	None	replace
226	[BUG]  [BUGGY]  renewName!=  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renewName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renewName!=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    renewName!=    null?    oldName    :    newName;    	non-compiled	[CE]  not  a  statement	140	None	replace
227	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
228	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
229	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
230	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
231	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
232	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
233	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName  :  oldName;	  return    oldName!=    null?    newName    :    oldName;    timeout    	compilable	timeout	77	1	replace
234	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  oldName;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  oldName;	  return    oldName!=    null?    newName    :    oldName;    timeout    	compilable	timeout	77	1	replace
235	[BUG]  [BUGGY]  name  =  names.getReplacementName(oldName);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  names.getReplacementName(oldName);	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  name	132	None	replace
236	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  renamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  renamer);	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  renamer	132	None	replace
237	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  name	132	None	replace
238	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  null);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  null);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  null);	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	132	None	replace
239	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  nameStack);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  nameStack);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  nameStack);	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	132	None	replace
240	[BUG]  [BUGGY]  return  names.replace(oldName,  nameStack.peek());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replace(oldName,  nameStack.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replace(oldName,  nameStack.peek());	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
241	[BUG]  [BUGGY]  return  nameStack.peek().replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.peek().replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.peek().replace(oldName,  newName);	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
242	[BUG]  [BUGGY]  return  nameStack.replace(oldName,  newName.peek());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.replace(oldName,  newName.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.replace(oldName,  newName.peek());	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
243	[BUG]  [BUGGY]  return  name.replace(oldName,  nameStack.peek(),  newName);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.replace(oldName,  nameStack.peek(),  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.replace(oldName,  nameStack.peek(),  newName);	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol  name	225	None	replace
244	[BUG]  [BUGGY]  return  names.replace(oldName,  newName.peek());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replace(oldName,  newName.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replace(oldName,  newName.peek());	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
245	[BUG]  [BUGGY]  return  name.replace(oldName,  nameStack.peek());  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.replace(oldName,  nameStack.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.replace(oldName,  nameStack.peek());	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol  name	225	None	replace
246	[BUG]  [BUGGY]  return  newName.replace(oldName,  nameStack.peek(),  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.replace(oldName,  nameStack.peek(),  nameUsage);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.replace(oldName,  nameStack.peek(),  nameUsage);	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol  nameUsage	225	None	replace
247	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	143	None	replace
248	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	143	None	replace
249	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	143	None	replace
250	[BUG]  [BUGGY]  Name  newName  =  newName.substring(0,  oldName.length());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  newName  =  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
251	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	158	1	replace
252	[BUG]  [BUGGY]  if(oldName  ==  null)  {  return  newName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	158	1	replace
253	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()!=  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	158	1	replace
254	[BUG]  [BUGGY]  if(oldName.length()!=  0)  {  return  newName.trim();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()!=  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	158	1	replace
255	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.equals( " "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	158	1	replace
256	[BUG]  [BUGGY]  if(oldName.equals( " "))  {  return  newName.trim();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.equals( " "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	158	1	replace
257	[BUG]  [BUGGY]  Renamer  rootRenamer.replaceChild(names,  newName);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  rootRenamer.replaceChild(names,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  rootRenamer.replaceChild(names,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  ';'  expected	131	None	replace
258	[BUG]  [BUGGY]  Renamer  names  =  names.replaceChild(oldName,  newName);  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names  =  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names  =  names.replaceChild(oldName,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	131	None	replace
259	[BUG]  [BUGGY]  Renamer  name  =  names.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  name  =  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  name  =  names.replaceChild(oldName,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
260	[BUG]  [BUGGY]  name.replaceChild(names,  newName);  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.replaceChild(names,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.replaceChild(names,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	131	None	replace
261	[BUG]  [BUGGY]  Renamer  rootRenamer  =  names.replaceChild(newName,  newName);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  rootRenamer  =  names.replaceChild(newName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  rootRenamer  =  names.replaceChild(newName,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
262	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  names.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  names.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  names.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
263	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toLowerCase()  +  nameStack.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	compilable	timeout	223	1	replace
264	[BUG]  [BUGGY]  return  oldName.toLowerCase()  +  nameStack.peek();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase()  +  nameStack.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	compilable	timeout	223	1	replace
265	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.peek();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  oldName.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
266	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.peek()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  nameStack.peek()  +  newName.toLowerCase();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	compilable	timeout	223	1	replace
267	[BUG]  [BUGGY]  return  nameStack.peek()  +  newName.toLowerCase();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.peek()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.peek()  +  newName.toLowerCase();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	compilable	timeout	223	1	replace
268	[BUG]  [BUGGY]  return  newName.toLowerCase()  /  nameStack.peek();  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  /  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  /  nameStack.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	223	None	replace
269	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.remove(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toLowerCase()  +  nameStack.remove(oldName);	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	compilable	timeout	223	1	replace
270	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.remove(oldName);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.remove(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  nameStack.remove(oldName);	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	compilable	timeout	223	1	replace
271	[BUG]  [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  return  newName.toString()  +   "_   "  +  nameStack.peek();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  return  newName.toString()  +   "_   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "_   "    +    nameStack.peek();    return  newName.toString()  +   "_   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	203	None	add
272	[BUG]  [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  return  oldName.toString()  +   "_   "  +  nameStack.peek();  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  return  oldName.toString()  +   "_   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "_   "    +    nameStack.peek();    return  oldName.toString()  +   "_   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	203	None	add
273	[BUG]  [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  newName.toString()  +   "_   "  +  nameStack.peek();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  newName.toString()  +   "_   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "_   "    +    nameStack.peek();    newName.toString()  +   "_   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  not  a  statement	203	None	add
274	[BUG]  [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  return  name.toString()  +   "_   "  +  nameStack.peek();  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  return  name.toString()  +   "_   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "_   "    +    nameStack.peek();    return  name.toString()  +   "_   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	203	None	add
275	[BUG]  [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  Return  newName.toString()  +   "_   "  +  nameStack.peek();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "_   "  +  nameStack.peek();  Return  newName.toString()  +   "_   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "_   "    +    nameStack.peek();    Return  newName.toString()  +   "_   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  	203	None	add
276	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  return(newName  ==  null)?  null  :  newName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  return(newName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    return(newName  ==  null)?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	187	None	add
277	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  Return(newName  ==  null)?  null  :  newName;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  Return(newName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    Return(newName  ==  null)?  null  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	187	None	add
278	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  return(newName!=  null)?  null  :  newName;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  return(newName!=  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    return(newName!=  null)?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	187	None	add
279	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  if(newName  ==  null)?  null  :  newName;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  if(newName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    if(newName  ==  null)?  null  :  newName;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	187	None	add
280	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  return(newName  ==  null)?  null  :  newName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  return(newName  ==  null)?  null  :  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    return(newName  ==  null)?  null  :  newName);	  timeout    	non-compiled	[CE]  ';'  expected	187	None	add
281	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  re(newName  ==  null)?  null  :  newName;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  re(newName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    re(newName  ==  null)?  null  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	187	None	add
282	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
283	[BUG]  [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
284	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
285	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
286	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
287	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
288	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
289	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  oldName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
290	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	compilable	timeout	217	1	replace
291	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	compilable	timeout	217	1	replace
292	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
293	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	compilable	timeout	217	1	replace
294	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  oldName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	compilable	timeout	217	1	replace
295	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length()  -  2);	  return    oldName.toString();    timeout    	compilable	timeout	126	1	replace
296	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  2);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length()  -  2);	  return    oldName.toString();    timeout    	compilable	timeout	126	1	replace
297	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
298	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
299	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
300	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
301	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
302	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
303	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	112	None	replace
304	[BUG]  [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  newName.toString()  +   ",   "  +  nameStack.size();  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  newName.toString()  +   ",   "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ",   "    +    nameStack.size();    return  newName.toString()  +   ",   "  +  nameStack.size();	  timeout    	non-compiled	[CE]  unreachable  statement	150	None	add
305	[BUG]  [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  oldName.toString()  +   ",   "  +  nameStack.size();  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  oldName.toString()  +   ",   "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ",   "    +    nameStack.size();    return  oldName.toString()  +   ",   "  +  nameStack.size();	  timeout    	non-compiled	[CE]  unreachable  statement	150	None	add
306	[BUG]  [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  newName.toString()  +   ",   "  +  nameStack.size());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  newName.toString()  +   ",   "  +  nameStack.size());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ",   "    +    nameStack.size();    return  newName.toString()  +   ",   "  +  nameStack.size());	  timeout    	non-compiled	[CE]  	150	None	add
307	[BUG]  [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  name.toString()  +   ",   "  +  nameStack.size();  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  return  name.toString()  +   ",   "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ",   "    +    nameStack.size();    return  name.toString()  +   ",   "  +  nameStack.size();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	150	None	add
308	[BUG]  [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  newName.toString()  +   ",   "  +  nameStack.size();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ",   "  +  nameStack.size();  newName.toString()  +   ",   "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ",   "    +    nameStack.size();    newName.toString()  +   ",   "  +  nameStack.size();	  timeout    	non-compiled	[CE]  not  a  statement	150	None	add
309	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  +  newName;	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
310	[BUG]  [BUGGY]  return  names.toString()  +  newName;  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  +  newName;	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
311	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  +  newName.substring(0,  newName.length()  -  1);	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
312	[BUG]  [BUGGY]  return  names.toString()  +  newName.substring(0,  newName.length()  -  1);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  +  newName.substring(0,  newName.length()  -  1);	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
313	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  +  oldName.toLowerCase();	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
314	[BUG]  [BUGGY]  return  names.toString()  +  oldName.toLowerCase();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  +  oldName.toLowerCase();	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
315	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  newName.substring(0,  newName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  +  newName.substring(0,  newName.length()  -  2);	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
316	[BUG]  [BUGGY]  return  names.toString()  +  newName.substring(0,  newName.length()  -  2);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  newName.substring(0,  newName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  +  newName.substring(0,  newName.length()  -  2);	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
317	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  newName.toLowerCase()  +  nameStack.peek();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  newName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    return  newName.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	222	None	add
318	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  oldName.toLowerCase()  +  nameStack.peek();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  oldName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    return  oldName.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	222	None	add
319	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  if(nameStack.peek()  ==  null)  {  return  newName.toLowerCase()  +  nameStack.peek();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  if(nameStack.peek()  ==  null)  {  return  newName.toLowerCase()  +  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    if(nameStack.peek()  ==  null)  {  return  newName.toLowerCase()  +  nameStack.peek();  }	  timeout    	non-compiled	[CE]  unreachable  statement	222	None	add
320	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  newName.toLowerCase()  +  nameStack.peek();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  newName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    newName.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  not  a  statement	222	None	add
321	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  Return  newName.toLowerCase()  +  nameStack.peek();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  Return  newName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    Return  newName.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  ';'  expected	222	None	add
322	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  name.toLowerCase()  +  nameStack.peek();  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  name.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    return  name.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	222	None	add
323	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  newName.toUpperCase()  +  nameStack.peek();  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  newName.toUpperCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    return  newName.toUpperCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	222	None	add
324	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  if(nameStack.peek()  ==  null)  {  return  newName.toLowerCase()  +  nameStack.peek();  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  if(nameStack.peek()  ==  null)  {  return  newName.toLowerCase()  +  nameStack.peek();  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    if(nameStack.peek()  ==  null)  {  return  newName.toLowerCase()  +  nameStack.peek();  }  else  {  names.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	222	None	add
325	[BUG]  [BUGGY]  newName.append('  ').append(newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append('  ').append(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append('  ').append(newName);	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    oldName.trim();    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
326	[BUG]  [BUGGY]  newName.append( "  : ").append(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( "  : ").append(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( "  : ").append(newName);	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    oldName.trim();    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
327	[BUG]  [BUGGY]  return  names.substring(0,  oldName.length());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  oldName.length());	          return    newName.substring(0,    oldName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
328	[BUG]  [BUGGY]  return  originalName.substring(0,  oldName.length());  [CE]  cannot  find  symbol  originalName  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  originalName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  originalName.substring(0,  oldName.length());	          return    newName.substring(0,    oldName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  originalName	21	None	replace
329	[BUG]  [BUGGY]  return  oldName.toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase(Locale.ENGLISH);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase(Locale.ENGLISH);	  return    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  Locale	23	None	replace
330	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toLowerCase()  +  1;	  return    oldName.toLowerCase();    timeout    	compilable	timeout	23	1	replace
331	[BUG]  [BUGGY]  return  oldName.toLowerCase()  +  1;  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase()  +  1;	  return    oldName.toLowerCase();    timeout    	compilable	timeout	23	1	replace
332	[BUG]  [BUGGY]  return  newName.substring(0,  nameStack.length());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  nameStack.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  nameStack.length());	  return    newName.substring(0,    renamedName.length());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
333	[BUG]  [BUGGY]  return  newName.substring(0,  originalName.length());  [CE]  cannot  find  symbol  originalName  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  originalName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  originalName.length());	  return    newName.substring(0,    renamedName.length());    	non-compiled	[CE]  cannot  find  symbol  originalName	105	None	replace
334	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName!=  null?  oldName  :  newName.toString();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName!=  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  newName!=  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	199	None	add
335	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName  ==  null?  oldName  :  newName.toString();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName  ==  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  newName  ==  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	199	None	add
336	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  oldName!=  null?  oldName  :  newName.toString();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  oldName!=  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  oldName!=  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	199	None	add
337	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName  >>  null?  oldName  :  newName.toString();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName  >>  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  newName  >>  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	199	None	add
338	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName  >=  null?  oldName  :  newName.toString();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName  >=  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  newName  >=  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	199	None	add
339	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName!=  null?  oldName.toString()  :  newName.toString();  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName!=  null?  oldName.toString()  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  newName!=  null?  oldName.toString()  :  newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	199	None	add
340	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  Return  newName!=  null?  oldName  :  newName.toString();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  Return  newName!=  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    Return  newName!=  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  ';'  expected	199	None	add
341	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  newName!=  null?  oldName  :  newName.toString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  newName!=  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    newName!=  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  not  a  statement	199	None	add
342	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
343	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
344	[BUG]  [BUGGY]  return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	non-compiled	[CE]  unreachable  statement	216	None	replace
345	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null  ||  oldName.length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
346	[BUG]  [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  return  newName.trim();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null  ||  oldName.length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
347	[BUG]  [BUGGY]  return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	non-compiled	[CE]  unreachable  statement	216	None	replace
348	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName  ==  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
349	[BUG]  [BUGGY]  if(oldName  ==  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
350	[BUG]  [BUGGY]  newName.append( "n ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( "n ");  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( "n ");	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
351	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.trim()  +  oldName.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	62	1	replace
352	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length());  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	62	1	replace
353	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim()  +  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.trim()  +  newName.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	62	1	replace
354	[BUG]  [BUGGY]  return  oldName.trim()  +  newName.substring(0,  newName.length());  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim()  +  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim()  +  newName.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	62	1	replace
355	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.trim()  +  oldName.substring(0,  oldName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	62	1	replace
356	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  oldName.length());  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.substring(0,  oldName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	62	1	replace
357	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  name.length());  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.substring(0,  name.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	62	None	replace
358	[BUG]  [BUGGY]  return  newName.trim()  +  name.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  name.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  name.substring(0,  oldName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	62	None	replace
359	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  names.length()  -  1);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  names.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.substring(0,  names.length()  -  1);	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
360	[BUG]  [BUGGY]  return  name.trim()  +  oldName.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.trim()  +  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.trim()  +  oldName.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	62	None	replace
361	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	42	None	replace
362	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  2);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  2);	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	42	None	replace
363	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  name.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  name.length());	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	42	None	replace
364	[BUG]  [BUGGY]  timeout  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	42	1	replace
365	[BUG]  [BUGGY]  newName  =  newName.substring(0,  newName.length());  timeout  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	42	1	replace
366	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  names.length()  -  2);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  names.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  names.length()  -  2);	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	42	None	replace
367	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  name.length()  -  2);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  name.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  name.length()  -  2);	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	42	None	replace
368	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	69	None	replace
369	[BUG]  [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol  name	69	None	replace
370	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	compilable	timeout	69	1	replace
371	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	compilable	timeout	69	1	replace
372	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	69	None	replace
373	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	69	None	replace
374	[BUG]  [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
375	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
376	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName.toLowerCase();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
377	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
378	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName.toLowerCase();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
379	[BUG]  [BUGGY]  return  newName  >=  null?  null  :  newName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  >=  null?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  >=  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	123	None	replace
380	[BUG]  [BUGGY]  return  oldName  <  null?  null  :  newName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  <  null?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  <  null?  null  :  newName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	123	None	replace
381	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
382	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
383	[BUG]  [BUGGY]  String  oldName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	91	None	replace
384	[BUG]  [BUGGY]  String  oldName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	91	None	replace
385	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
386	[BUG]  [BUGGY]  return  nameStack.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toLowerCase(newName.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
387	[BUG]  [BUGGY]  return  names.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(newName.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
388	[BUG]  [BUGGY]  return  nameStack.toLowerCase(name.getDefault());  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toLowerCase(name.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toLowerCase(name.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol  name	226	None	replace
389	[BUG]  [BUGGY]  return  names.toLowerCase(nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(nameStack.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
390	[BUG]  [BUGGY]  return  nameStack.toLowerCase(newName,  nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toLowerCase(newName,  nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toLowerCase(newName,  nameStack.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
391	[BUG]  [BUGGY]  return  name.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(newName.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
392	[BUG]  [BUGGY]  return  renamer.toLowerCase();  [CE]  cannot  find  symbol  renamer  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  renamer.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  renamer.toLowerCase();	  return    name.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  renamer	48	None	replace
393	[BUG]  [BUGGY]  return  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toLowerCase();	  return    name.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
394	[BUG]  [BUGGY]  return  oldName.trim();  return  oldName.trim();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  return  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    return  oldName.trim();	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
395	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim().equals( " "))  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim().equals( " "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim().equals( " "))  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
396	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim().length()  ==  0)  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim().length()  ==  0)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim().length()  ==  0)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
397	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim().equals( " "))  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim().equals( " "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim().equals( " "))  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
398	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim().length()!=  0)  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim().length()!=  0)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim().length()!=  0)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
399	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
400	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
401	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
402	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
403	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	92	None	replace
404	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	92	None	replace
405	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	92	None	replace
406	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	92	None	replace
407	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	92	None	replace
408	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	190	1	replace
409	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	190	1	replace
410	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	190	1	replace
411	[BUG]  [BUGGY]  if(oldName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	190	1	replace
412	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	190	1	replace
413	[BUG]  [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.isEmpty()  ||  newName.isEmpty())  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	190	1	replace
414	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  oldName;	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
415	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  oldName;  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  oldName;	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
416	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  oldName.toLowerCase();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
417	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName.toLowerCase();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  oldName.toLowerCase();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
418	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.peek();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  nameStack.peek();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	non-compiled	[CE]  incompatible  types	186	None	replace
419	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
420	[BUG]  [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
421	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
422	[BUG]  [BUGGY]  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
423	[BUG]  [BUGGY]  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
424	[BUG]  [BUGGY]  newName.trim();  if(newName!=  null)  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(newName!=  null)  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
425	[BUG]  [BUGGY]  return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
426	[BUG]  [BUGGY]  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
427	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
428	[BUG]  [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
429	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName!=  null)?  null  :  oldName;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    return(newName!=  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	28	None	add
430	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName  ==  null)?  null  :  oldName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    return(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	28	None	add
431	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName  >>  null)?  null  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName  >>  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    return(newName  >>  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	28	None	add
432	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  Return(newName!=  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  Return(newName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    Return(newName!=  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	28	None	add
433	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName  >=  null)?  null  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName  >=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    return(newName  >=  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	28	None	add
434	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  Return(newName  ==  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  Return(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    Return(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	28	None	add
435	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	85	None	replace
436	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	85	None	replace
437	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	85	None	replace
438	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	154	None	replace
439	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	154	1	replace
440	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	154	1	replace
441	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.getReplacementName(oldName);	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	154	1	replace
442	[BUG]  [BUGGY]  return  names.getReplacementName(oldName);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.getReplacementName(oldName);	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	154	1	replace
443	[BUG]  [BUGGY]  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameStack.push(newName);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.push(newName);    }    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	89	None	replace
444	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.push(newName);    }    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	89	None	replace
445	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.push(newName);    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	89	None	replace
446	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.push(newName);    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	89	None	replace
447	[BUG]  [BUGGY]  String  newName  =  nameStack.peek().substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  nameStack.peek().substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  nameStack.peek().substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.push(newName);    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	89	None	replace
448	[BUG]  [BUGGY]  renamer.removeConstness(newName);  [CE]  cannot  find  symbol  renamer  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol  renamer	205	None	replace
449	[BUG]  [BUGGY]  renamer.removeConstness(oldName);  [CE]  cannot  find  symbol  renamer  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol  renamer	205	None	replace
450	[BUG]  [BUGGY]  newName.toLowerCase();  name.removeConstness(newName);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  name.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  name.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol  name	205	None	replace
451	[BUG]  [BUGGY]  renaming.toLowerCase();  name.removeConstness(newName);  [CE]  cannot  find  symbol  renaming  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renaming.toLowerCase();  name.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renaming.toLowerCase();  name.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol  renaming	205	None	replace
452	[BUG]  [BUGGY]  Renamer  renamer  =  names.removeConstness(newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  names.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  renamer  =  names.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
453	[BUG]  [BUGGY]  Renamer  names.removeConstness(newName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  ';'  expected	205	None	replace
454	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  oldName;	  return    newName    <    null?    null    :    oldName;    	compilable	timeout	167	1	replace
455	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  oldName;  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  oldName;	  return    newName    <    null?    null    :    oldName;    	compilable	timeout	167	1	replace
456	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  oldName;	  return    newName    <    null?    null    :    oldName;    	compilable	timeout	167	1	replace
457	[BUG]  [BUGGY]  return  newName!=  null?  null  :  oldName;  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  oldName;	  return    newName    <    null?    null    :    oldName;    	compilable	timeout	167	1	replace
458	[BUG]  [BUGGY]  return  oldName  <  null?  null  :  newName;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  <  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  <  null?  null  :  newName;	  return    newName    <    null?    null    :    oldName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	167	None	replace
459	[BUG]  [BUGGY]  return  newName  >=  null?  null  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  >=  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  >=  null?  null  :  oldName;	  return    newName    <    null?    null    :    oldName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	167	None	replace
460	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  newName.toLowerCase()  +  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  newName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  newName.toLowerCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	220	None	add
461	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  oldName.toLowerCase()  +  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  oldName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  oldName.toLowerCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	220	None	add
462	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  oldName.toLowerCase()  +  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  oldName.toLowerCase()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  oldName.toLowerCase()  +  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	220	None	add
463	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  Return  newName.toLowerCase()  +  oldName.toLowerCase();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  Return  newName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    Return  newName.toLowerCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  ';'  expected	220	None	add
464	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  name.toLowerCase()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  name.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  name.toLowerCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	220	None	add
465	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  newName.toLowerCase()  +  oldName.toLowerCase();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  newName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    newName.toLowerCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  not  a  statement	220	None	add
466	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  newName.toUpperCase()  +  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  newName.toUpperCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  newName.toUpperCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	220	None	add
467	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  oldName.toLowerCase()  +  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  oldName.toLowerCase()  +  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  oldName.toLowerCase()  +  name.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	220	None	add
468	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName;	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    return    oldName;    	compilable	timeout	184	1	replace
469	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName;	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    return    oldName;    	compilable	timeout	184	1	replace
470	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName;	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    return    oldName;    	compilable	timeout	184	1	replace
471	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName;  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName;	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    return    oldName;    	compilable	timeout	184	1	replace
472	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  name;  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  name;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length()  -  1);  return  name;	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol  name	184	None	replace
473	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	156	1	replace
474	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	156	1	replace
475	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  names.getReplacementName(oldName);  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	156	1	replace
476	[BUG]  [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  names.getReplacementName(oldName);  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	compilable	timeout	156	1	replace
477	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  timeout  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  timeout  =  System.currentTimeMillis();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length());  timeout  =  System.currentTimeMillis();	  return    newName.substring(0,    newName.length()    -    3);    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	130	None	replace
478	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  timeout  =  System.arraycopy(oldName,  0,  newName.length());  [CE]  cannot  find  symbol  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  timeout  =  System.arraycopy(oldName,  0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length());  timeout  =  System.arraycopy(oldName,  0,  newName.length());	  return    newName.substring(0,    newName.length()    -    3);    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	130	None	replace
479	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  timeout  =  System.err.println( "Inlined  name: "  +  oldName);  [CE]  cannot  find  symbol  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  timeout  =  System.err.println( "Inlined  name: "  +  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length());  timeout  =  System.err.println( "Inlined  name: "  +  oldName);	  return    newName.substring(0,    newName.length()    -    3);    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	130	None	replace
480	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  newName.toString();	  return    newName    ==    null?    null    :    newName;    timeout    	compilable	timeout	122	1	replace
481	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName.toString();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  newName.toString();	  return    newName    ==    null?    null    :    newName;    timeout    	compilable	timeout	122	1	replace
482	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  name.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  name.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  name.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	15	None	replace
483	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  names.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  names.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  names.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	15	None	replace
484	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	44	None	replace
485	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2));  return  newName.substring(0,  newName.length());  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2));  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()  -  2));  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
486	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()));  return  newName.substring(0,  newName.length());  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()));  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()));  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
487	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  newName.toLowerCase();	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
488	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName.toLowerCase();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  newName.toLowerCase();	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
489	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  newName.toString();	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
490	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName.toString();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  newName.toString();	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
491	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  newName.substring(0,  oldName.length()  -  1);	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
492	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  newName.substring(0,  oldName.length()  -  1);	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
493	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  newName.trim();	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
494	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName.trim();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  newName.trim();	  return(newName    ==    null)?    null    :    newName;    timeout    	compilable	timeout	188	1	replace
495	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    return  oldName  ==  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	185	None	add
496	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName)  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName)  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName)  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	185	None	add
497	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    return  oldName!=  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	185	None	add
498	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName.toLowerCase())  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName.toLowerCase())  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName.toLowerCase())  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	185	None	add
499	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName;  }  else  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName;  }  else  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName;  }  else  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  ')'  expected	185	None	add
500	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName);  }  else  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName);  }  else  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName);  }  else  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	185	None	add
501	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    return  oldName  ==  null?  newName  :  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	185	None	add
502	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName)  {  return  oldName!=  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName)  {  return  oldName!=  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName)  {  return  oldName!=  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	185	None	add
503	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	157	None	replace
504	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	compilable	timeout	157	1	replace
505	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	compilable	timeout	157	1	replace
506	[BUG]  [BUGGY]  return  oldName.toString();  return  oldName.toString();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  return  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    return  oldName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
507	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.length()  ==  0)  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.length()  ==  0)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
508	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.length()  ==  0)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.length()  ==  0)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
509	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.length()!=  0)  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.length()!=  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.length()!=  0)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
510	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.length()!=  0)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.length()!=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.length()!=  0)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
511	[BUG]  [BUGGY]  return  oldName.toString();  newName.toString();  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    newName.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
512	[BUG]  [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    String  oldName  =  names.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	125	None	add
513	[BUG]  [BUGGY]  return  oldName.toString();  String  oldName  =  newName.toString();  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  String  oldName  =  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    String  oldName  =  newName.toString();	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	125	None	add
514	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  nameStack.toLowerCase();	  return    newName    ==    null?    oldName    :    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
515	[BUG]  [BUGGY]  newName.append( "- ").append(oldName).toLowerCase();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( "- ").append(oldName).toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( "- ").append(oldName).toLowerCase();	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
516	[BUG]  [BUGGY]  newName.append( "- ").append(newName.toLowerCase());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( "- ").append(newName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( "- ").append(newName.toLowerCase());	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
517	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()!=  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
518	[BUG]  [BUGGY]  if(newName.length()!=  0)  {  return  newName.toString();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()!=  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
519	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
520	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.toString();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
521	[BUG]  [BUGGY]  if(newName.length()!=  0)  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()!=  0)  {  return  name.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol  name	117	None	replace
522	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()!=  0)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
523	[BUG]  [BUGGY]  if(newName.length()!=  0)  {  return  oldName.toString();  }  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()!=  0)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
524	[BUG]  [BUGGY]  timeout  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  >=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  >=  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
525	[BUG]  [BUGGY]  if(newName.length()  >=  0)  {  return  newName.toString();  }  timeout  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  >=  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  >=  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()!=    0)    {    return    newName.toString();    }    	compilable	timeout	117	1	replace
526	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
527	[BUG]  [BUGGY]  return  newName!=  null?  oldName.toString()  :  oldName;  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
528	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
529	[BUG]  [BUGGY]  return  oldName  ==  null?  newName.toString()  :  oldName;  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
530	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  names.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
531	[BUG]  [BUGGY]  return  oldName!=  null?  names.toString()  :  oldName;  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  names.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
532	[BUG]  [BUGGY]  return  oldName!=  null?  name.toString()  :  oldName;  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  name.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  name.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	non-compiled	[CE]  cannot  find  symbol  name	198	None	replace
533	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  oldName.trim();	  return    oldName;    if(oldName.length()    ==    0)    {    return    newName;    }    	compilable	timeout	50	1	replace
534	[BUG]  [BUGGY]  newName  =  oldName.trim();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName.trim();	  return    oldName;    if(oldName.length()    ==    0)    {    return    newName;    }    	compilable	timeout	50	1	replace
535	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0  ||  newName.trim().length()!=  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()!=  0  ||  newName.trim().length()!=  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	compilable	timeout	36	1	replace
536	[BUG]  [BUGGY]  if(oldName.length()!=  0  ||  newName.trim().length()!=  0)  {  return  newName.trim();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0  ||  newName.trim().length()!=  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()!=  0  ||  newName.trim().length()!=  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	compilable	timeout	36	1	replace
537	[BUG]  [BUGGY]  name.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	142	None	replace
538	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName  ==  null)?  null  :  oldName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    return(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	26	None	add
539	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  Return(newName  ==  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  Return(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    Return(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
540	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName!=  null)?  null  :  oldName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    return(newName!=  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	26	None	add
541	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  if(newName  ==  null)?  null  :  oldName;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  if(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    if(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	26	None	add
542	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  re(newName  ==  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  re(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    re(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
543	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName  ==  null)?  null  :  oldName);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName  ==  null)?  null  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    return(newName  ==  null)?  null  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	26	None	add
544	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  newName  ==  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
545	[BUG]  [BUGGY]  return  newName.toString()  + ",   "  +  names.size();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",   "  +  names.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ",   "  +  names.size();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
546	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + ",   "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toString()  + ",   "  +  nameStack.size();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	compilable	timeout	151	1	replace
547	[BUG]  [BUGGY]  return  oldName.toString()  + ",   "  +  nameStack.size();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + ",   "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toString()  + ",   "  +  nameStack.size();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	compilable	timeout	151	1	replace
548	[BUG]  [BUGGY]  return  newName.toString()  + ",   "  +  nameStack.get(oldName.toLowerCase());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",   "  +  nameStack.get(oldName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ",   "  +  nameStack.get(oldName.toLowerCase());	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
549	[BUG]  [BUGGY]  return  newName.toString()  + ",   "  +  nameStack.get(newName.toString());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",   "  +  nameStack.get(newName.toString());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ",   "  +  nameStack.get(newName.toString());	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
550	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  newName.toString();	  return    newName    <    null?    null    :    newName.toString();    	compilable	timeout	168	1	replace
551	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName.toString();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  newName.toString();	  return    newName    <    null?    null    :    newName.toString();    	compilable	timeout	168	1	replace
552	[BUG]  [BUGGY]  return  newName  >=  null?  null  :  newName.toString();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  >=  null?  null  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  >=  null?  null  :  newName.toString();	  return    newName    <    null?    null    :    newName.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	168	None	replace
553	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  oldName.toLowerCase();	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
554	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName.toLowerCase();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  oldName.toLowerCase();	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
555	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(oldName  ==  null)?  null  :  newName;	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
556	[BUG]  [BUGGY]  return(oldName  ==  null)?  null  :  newName;  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(oldName  ==  null)?  null  :  newName;	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
557	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(oldName  ==  null)?  null  :  oldName;	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
558	[BUG]  [BUGGY]  return(oldName  ==  null)?  null  :  oldName;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(oldName  ==  null)?  null  :  oldName;	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
559	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  new  Name(oldName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  new  Name(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  new  Name(oldName);	  return(newName    ==    null)?    null    :    oldName;    timeout    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
560	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  oldName.toString();	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
561	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName.toString();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  oldName.toString();	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
562	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	compilable	timeout	113	1	replace
563	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  newName.toString();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	compilable	timeout	113	1	replace
564	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	compilable	timeout	113	1	replace
565	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	compilable	timeout	113	1	replace
566	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	compilable	timeout	113	1	replace
567	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	compilable	timeout	113	1	replace
568	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    name.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	210	1	replace
569	[BUG]  [BUGGY]  return  oldName.substring(0,  oldName.length()  -  1);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    name.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	210	1	replace
570	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  name  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	String  name  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    name.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	210	1	replace
571	[BUG]  [BUGGY]  String  name  =  oldName.substring(0,  oldName.length()  -  1);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  name  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  name  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    name.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	210	1	replace
572	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName!=  null?  null  :  newName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName!=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    return  newName!=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	119	None	add
573	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName  ==  null?  null  :  newName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    return  newName  ==  null?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	119	None	add
574	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName  >>  null?  null  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName  >>  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    return  newName  >>  null?  null  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	119	None	add
575	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName  >=  null?  null  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName  >=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    return  newName  >=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	119	None	add
576	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  return  oldName!=  null?  null  :  newName;  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  return  oldName!=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    return  oldName!=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	119	None	add
577	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  Return  newName!=  null?  null  :  newName;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  Return  newName!=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    Return  newName!=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	119	None	add
578	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  newName!=  null?  null  :  newName;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  newName!=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    newName!=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	119	None	add
579	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    return    oldName.toString();    	compilable	timeout	114	1	replace
580	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    return    oldName.toString();    	compilable	timeout	114	1	replace
581	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  if(oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.toString();  }  else  if(oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    return    oldName.toString();    	compilable	timeout	114	1	replace
582	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  if(oldName.length()  ==  0)  {  return  newName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  if(oldName.length()  ==  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toString();  }  else  if(oldName.length()  ==  0)  {  return  newName.toString();  }	  return    newName.toString();    return    oldName.toString();    	compilable	timeout	114	1	replace
583	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.toString();  }	  return    newName.toString();    return    oldName.toString();    	non-compiled	[CE]  cannot  find  symbol  name	114	None	replace
584	[BUG]  [BUGGY]  newName.toLowerCase();  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  nameStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  nameStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	207	None	replace
585	[BUG]  [BUGGY]  referenceStack.push(newName);  [CE]  cannot  find  symbol  referenceStack  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  referenceStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	referenceStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  cannot  find  symbol  referenceStack	207	None	replace
586	[BUG]  [BUGGY]  newName.toLowerCase();  referenceStack.push(newName);  [CE]  cannot  find  symbol  referenceStack  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  referenceStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  referenceStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  cannot  find  symbol  referenceStack	207	None	replace
587	[BUG]  [BUGGY]  return  names.toLowerCase();  nameStack.push(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase();  nameStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();  nameStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
588	[BUG]  [BUGGY]  name.toLowerCase();  nameStack.push(newName);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toLowerCase();  nameStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toLowerCase();  nameStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  cannot  find  symbol  name	207	None	replace
589	[BUG]  [BUGGY]  newName.toLowerCase();  names.push(newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  names.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  names.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
590	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length()  +  1);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
591	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  +  1);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length()  +  1);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
592	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  4);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length()  -  4);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
593	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  4);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  4);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length()  -  4);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
594	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length()  -  3);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
595	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  3);  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length()  -  3);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
596	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  +  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  newName.length()  +  2);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
597	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  +  2);  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  +  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  newName.length()  +  2);	  return    oldName.substring(0,    newName.length());    timeout    	compilable	timeout	4	1	replace
598	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	                newName    =    names.getReplacementName(oldName);    newName  =  names.getReplacementName(oldName);	  timeout    	compilable	timeout	17	1	add
599	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  names.getReplacementName(oldName);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    newName  =  names.getReplacementName(oldName);	  timeout    	compilable	timeout	17	1	add
600	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.getReplacementName(oldName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    newName  =  nameStack.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol	17	None	add
601	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  oldName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	                newName    =    names.getReplacementName(oldName);    oldName  =  names.getReplacementName(oldName);	  timeout    	compilable	timeout	17	1	add
602	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  oldName  =  names.getReplacementName(oldName);  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  oldName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    oldName  =  names.getReplacementName(oldName);	  timeout    	compilable	timeout	17	1	add
603	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  renamer  =  names.getReplacementName(oldName);  [CE]  cannot  find  symbol  renamer  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  renamer  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    renamer  =  names.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	17	None	add
604	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  name  =  names.getReplacementName(oldName);  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  name  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    name  =  names.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	17	None	add
605	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  references.getReplacementName(oldName);  [CE]  cannot  find  symbol  references  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  references.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    newName  =  references.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  references	17	None	add
606	[BUG]  [BUGGY]  return  names.toUpperCase();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toUpperCase();	  return    newName.toLowerCase();    return    newName.toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
607	[BUG]  [BUGGY]  return  name.toUpperCase();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toUpperCase();	  return    newName.toLowerCase();    return    newName.toUpperCase();    	non-compiled	[CE]  cannot  find  symbol  name	206	None	replace
608	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toUpperCase();	  return    newName.toUpperCase();    timeout    	compilable	timeout	177	1	replace
609	[BUG]  [BUGGY]  return  oldName.toUpperCase();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toUpperCase();	  return    newName.toUpperCase();    timeout    	compilable	timeout	177	1	replace
610	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toUpperCase()  +  1;	  return    newName.toUpperCase();    timeout    	compilable	timeout	177	1	replace
611	[BUG]  [BUGGY]  return  newName.toUpperCase()  +  1;  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toUpperCase()  +  1;	  return    newName.toUpperCase();    timeout    	compilable	timeout	177	1	replace
612	[BUG]  [BUGGY]  return  newName.toUpperCase(oldName);  [CE]  no  suitable  method  found  for  toUpperCase(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toUpperCase(oldName);	  return    newName.toUpperCase();    timeout    	non-compiled	[CE]  no  suitable  method  found  for  toUpperCase(String)	177	None	replace
613	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  newName);	  return    newName!=    null?    oldName    :    newName;    return    newName!=    null?    oldName    :    newName);    	non-compiled	[CE]  ';'  expected	99	None	replace
614	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
615	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
616	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	172	None	replace
617	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
618	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	compilable	timeout	172	1	replace
619	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	compilable	timeout	172	1	replace
620	[BUG]  [BUGGY]  nameUsage.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameUsage.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameUsage.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	209	None	replace
621	[BUG]  [BUGGY]  return  nameUsage.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameUsage.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameUsage.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	209	None	replace
622	[BUG]  [BUGGY]  newName  =  nameUsage.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameUsage.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameUsage.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	209	None	replace
623	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  nameUsage  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	String  nameUsage  =  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	209	1	replace
624	[BUG]  [BUGGY]  String  nameUsage  =  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  nameUsage  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  nameUsage  =  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	209	1	replace
625	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  nameUsage  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	String  nameUsage  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	209	1	replace
626	[BUG]  [BUGGY]  String  nameUsage  =  oldName.substring(0,  oldName.length()  -  1);  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  nameUsage  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  nameUsage  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	209	1	replace
627	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  names.toString()  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  names.toString()  :  newName;	  return    newName    ==    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	109	1	replace
628	[BUG]  [BUGGY]  return  oldName  ==  null?  names.toString()  :  newName;  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  names.toString()  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  names.toString()  :  newName;	  return    newName    ==    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	109	1	replace
629	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  +  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  names.toString()  +  oldName  :  oldName;	  return    newName    ==    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	109	1	replace
630	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  +  oldName  :  oldName;  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  +  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  names.toString()  +  oldName  :  oldName;	  return    newName    ==    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	109	1	replace
631	[BUG]  [BUGGY]  return  renamer.toString();  [CE]  cannot  find  symbol  renamer  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  renamer.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  renamer.toString();	  return    name.toString();    	non-compiled	[CE]  cannot  find  symbol  renamer	149	None	replace
632	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  nameStack.toString();	  return    name.toString();    	compilable	timeout	149	1	replace
633	[BUG]  [BUGGY]  return  nameStack.toString();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toString();	  return    name.toString();    	compilable	timeout	149	1	replace
634	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	87	None	replace
635	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.length()  -  3);	  return    newName.substring(0,    oldName.length());    timeout    	compilable	timeout	2	1	replace
636	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  3);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length()  -  3);	  return    newName.substring(0,    oldName.length());    timeout    	compilable	timeout	2	1	replace
637	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  -  4);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.length()  -  4);	  return    newName.substring(0,    oldName.length());    timeout    	compilable	timeout	2	1	replace
638	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  4);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  -  4);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length()  -  4);	  return    newName.substring(0,    oldName.length());    timeout    	compilable	timeout	2	1	replace
639	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName!=  null?  newName  :  newName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName!=  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    return  oldName!=  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	162	None	add
640	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    return  oldName  ==  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	162	None	add
641	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName)  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName)  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName)  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	162	None	add
642	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName.toLowerCase())  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName.toLowerCase())  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName.toLowerCase())  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	162	None	add
643	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName;  }  else  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName;  }  else  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName;  }  else  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  ')'  expected	162	None	add
644	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName);  }  else  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName);  }  else  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName);  }  else  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	162	None	add
645	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName.trim())  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName.trim())  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName.trim())  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	162	None	add
646	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	162	None	add
647	[BUG]  [BUGGY]  return  locale.toLowerCase(name.getDefault());  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  locale.toLowerCase(name.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  locale.toLowerCase(name.getDefault());	  return    name.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  name	81	None	replace
648	[BUG]  [BUGGY]  return  renamer.toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  renamer.toLowerCase(Locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  renamer.toLowerCase(Locale.getDefault());	  return    name.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	81	None	replace
649	[BUG]  [BUGGY]  return  newName.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(newName.getDefault());	  return    newName.toLowerCase(locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
650	[BUG]  [BUGGY]  return  names.toLowerCase(oldName.getDefault());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(oldName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(oldName.getDefault());	  return    newName.toLowerCase(locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
651	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
652	[BUG]  [BUGGY]  if(oldName  ==  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
653	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
654	[BUG]  [BUGGY]  return  oldName.toLowerCase(locale.getDefault());  [CE]  cannot  find  symbol  locale  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase(locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase(locale.getDefault());	  return    locale.toLowerCase(newName.getDefault());    	non-compiled	[CE]  cannot  find  symbol  locale	83	None	replace
655	[BUG]  [BUGGY]  return  newName,  locale.toLowerCase(locale.getDefault());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName,  locale.toLowerCase(locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName,  locale.toLowerCase(locale.getDefault());	  return    locale.toLowerCase(newName.getDefault());    	non-compiled	[CE]  ';'  expected	83	None	replace
656	[BUG]  [BUGGY]  return  name.toLowerCase(locale.getDefault());  [CE]  cannot  find  symbol  locale  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase(locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(locale.getDefault());	  return    locale.toLowerCase(newName.getDefault());    	non-compiled	[CE]  cannot  find  symbol  locale	83	None	replace
657	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
658	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
659	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
660	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
661	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
662	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	174	None	replace
663	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	35	1	replace
664	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	35	1	replace
665	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.trim();  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	35	None	replace
666	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	35	1	replace
667	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	compilable	timeout	35	1	replace
668	[BUG]  [BUGGY]  if(newName!=  null)  {  return  names.trim();  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  names.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  names.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
669	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.trim()  +  newName.toLowerCase();	  return    oldName.trim();    timeout    	compilable	timeout	60	1	replace
670	[BUG]  [BUGGY]  return  oldName.trim()  +  newName.toLowerCase();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim()  +  newName.toLowerCase();	  return    oldName.trim();    timeout    	compilable	timeout	60	1	replace
671	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	compilable	timeout	191	1	replace
672	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  oldName.toString();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	compilable	timeout	191	1	replace
673	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  name.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	non-compiled	[CE]  cannot  find  symbol  name	191	None	replace
674	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName!=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	72	None	add
675	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName  ==  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	72	None	add
676	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  oldName!=  null?  oldName  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  oldName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  oldName!=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	72	None	add
677	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName  >>  null?  oldName  :  newName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName  >>  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName  >>  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	72	None	add
678	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName  >=  null?  oldName  :  newName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName  >=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName  >=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	add
679	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  Return  newName!=  null?  oldName  :  newName.toLowerCase();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  Return  newName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    Return  newName!=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  ';'  expected	72	None	add
680	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  newName!=  null?  oldName  :  newName.toLowerCase();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  newName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    newName!=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  not  a  statement	72	None	add
681	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toUpperCase();  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName!=  null?  oldName  :  newName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	72	None	add
682	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    return    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	11	None	replace
683	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	65	None	replace
684	[BUG]  [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol  name	65	None	replace
685	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	65	None	replace
686	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	65	1	replace
687	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	65	1	replace
688	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()  -  2);	  return    newName.substring(0,    newName.length()    -    2);    Return    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  ')'  expected	41	None	replace
689	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    return  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
690	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length());  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length());  }	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
691	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  newName.length());  }  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  newName.length());  }	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
692	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  oldName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  oldName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    String  oldName  =  oldName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	3	None	add
693	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    String  oldName  =  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	3	None	add
694	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  [CE]  unreachable  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
695	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  newName  =  oldName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    newName  =  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
696	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    String  oldName  =  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	3	None	add
697	[BUG]  [BUGGY]  return  names.toLowerCase(newName,  nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(newName,  nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(newName,  nameStack.getDefault());	  return    names.toLowerCase(locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
698	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  name.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  name.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  name.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	213	None	replace
699	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	213	None	replace
700	[BUG]  [BUGGY]  Name  newName  =  oldName.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  newName  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  newName  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
701	[BUG]  [BUGGY]  return  names.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  newName.length()  -  1);	  return    newName.substring(0,    names.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
702	[BUG]  [BUGGY]  return  names.substring(0,  names.length()  -  1);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  names.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  names.length()  -  1);	  return    newName.substring(0,    names.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
703	[BUG]  [BUGGY]  return  name.substring(0,  names.length()  -  1);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  names.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  names.length()  -  1);	  return    newName.substring(0,    names.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
704	[BUG]  [BUGGY]  return  names.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    names.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
705	[BUG]  [BUGGY]  return  names.substring(0,  name.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  name.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  name.length()  -  1);	  return    newName.substring(0,    names.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
706	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.toLowerCase();	  return    newName.toLowerCase();    newName.toLowerCase();    	compilable	timeout	66	1	replace
707	[BUG]  [BUGGY]  newName.toLowerCase();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();	  return    newName.toLowerCase();    newName.toLowerCase();    	compilable	timeout	66	1	replace
708	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  else  {  names.toLowerCase();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  }  else  {  names.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  }  else  {  names.toLowerCase();  }	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
709	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  }  else  {  newName.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  }  else  {  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.toLowerCase();  }  else  {  newName.toLowerCase();  }	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
710	[BUG]  [BUGGY]  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toLowerCase();	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
711	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  }  else  {  names.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  }  else  {  names.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.toLowerCase();  }  else  {  names.toLowerCase();  }	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
712	[BUG]  [BUGGY]  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
713	[BUG]  [BUGGY]  String  newName  =  names.get(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.get(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.get(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
714	[BUG]  [BUGGY]  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
715	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	67	1	replace
716	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.toLowerCase();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	67	1	replace
717	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.equals( " "))  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	67	1	replace
718	[BUG]  [BUGGY]  if(oldName.equals( " "))  {  return  newName.toLowerCase();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.equals( " "))  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	67	1	replace
719	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  name.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  name.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  name.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol  name	67	None	replace
720	[BUG]  [BUGGY]  String  newName  =  names.get(oldName);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.get(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.get(oldName);	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
721	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names!=  null?  names.toString()  :  oldName;	  return    newName!=    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	107	1	replace
722	[BUG]  [BUGGY]  return  names!=  null?  names.toString()  :  oldName;  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names!=  null?  names.toString()  :  oldName;	  return    newName!=    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	107	1	replace
723	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName.toLowerCase());	          newName    =    names.getReplacementName(oldName);    timeout    	compilable	timeout	18	1	replace
724	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName.toLowerCase());  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName.toLowerCase());	          newName    =    names.getReplacementName(oldName);    timeout    	compilable	timeout	18	1	replace
725	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  newName);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  newName);	          newName    =    names.getReplacementName(oldName);    timeout    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	18	None	replace
726	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(newName);	          newName    =    names.getReplacementName(oldName);    timeout    	compilable	timeout	18	1	replace
727	[BUG]  [BUGGY]  newName  =  names.getReplacementName(newName);  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(newName);	          newName    =    names.getReplacementName(oldName);    timeout    	compilable	timeout	18	1	replace
728	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  return  newName.toLowerCase()  +  1;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  return  newName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    return  newName.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  unreachable  statement	46	None	add
729	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1!=  null)  {  return  newName.toLowerCase()  +  1;  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1!=  null)  {  return  newName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    if(newName.toLowerCase()  +  1!=  null)  {  return  newName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  unreachable  statement	46	None	add
730	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1  ==  null)  {  return  newName.toLowerCase()  +  1;  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1  ==  null)  {  return  newName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    if(newName.toLowerCase()  +  1  ==  null)  {  return  newName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  unreachable  statement	46	None	add
731	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  return  oldName.toLowerCase()  +  1;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  return  oldName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    return  oldName.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  unreachable  statement	46	None	add
732	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1  >=  null)  {  return  newName.toLowerCase()  +  1;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1  >=  null)  {  return  newName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    if(newName.toLowerCase()  +  1  >=  null)  {  return  newName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	46	None	add
733	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1!=  null)  {  return  oldName.toLowerCase()  +  1;  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1!=  null)  {  return  oldName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    if(newName.toLowerCase()  +  1!=  null)  {  return  oldName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  unreachable  statement	46	None	add
734	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1  [Delete]  null)  {  return  newName.toLowerCase()  +  1;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1  [Delete]  null)  {  return  newName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    if(newName.toLowerCase()  +  1  [Delete]  null)  {  return  newName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  ')'  expected	46	None	add
735	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1!=  false)  {  return  newName.toLowerCase()  +  1;  }  [CE]  incomparable  types:  String  and  boolean  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  if(newName.toLowerCase()  +  1!=  false)  {  return  newName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    if(newName.toLowerCase()  +  1!=  false)  {  return  newName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  incomparable  types:  String  and  boolean	46	None	add
736	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + ": "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toString()  + ": "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
737	[BUG]  [BUGGY]  return  oldName.toString()  + ": "  +  nameStack.peek();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + ": "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toString()  + ": "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
738	[BUG]  [BUGGY]  return  newName.toString()  + ": "  +  oldName.peek();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ": "  +  oldName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ": "  +  oldName.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
739	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",: "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ",: "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
740	[BUG]  [BUGGY]  return  newName.toString()  + ",: "  +  nameStack.peek();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",: "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ",: "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
741	[BUG]  [BUGGY]  return  newName.toString()  + ": "  +  names.peek();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ": "  +  names.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ": "  +  names.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
742	[BUG]  [BUGGY]  return  names.toString()  + ": "  +  newName.peek();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + ": "  +  newName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  + ": "  +  newName.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
743	[BUG]  [BUGGY]  return  name.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  newName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    return    name.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
744	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  rootRenamer);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
745	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  oldName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  oldName);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
746	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  newName);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
747	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  idPrefix);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  idPrefix);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	195	None	replace
748	[BUG]  [BUGGY]  newName  =  names.peek().replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.peek().replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.peek().replace(oldName,  newName);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
749	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  null);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  null);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  null);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
750	[BUG]  [BUGGY]  return  locale.toLowerCase(oldName.getDefault());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  locale.toLowerCase(oldName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  locale.toLowerCase(oldName.getDefault());	  return    oldName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
751	[BUG]  [BUGGY]  return  oldName.toLowerCase(nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase(nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase(nameStack.getDefault());	  return    oldName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
752	[BUG]  [BUGGY]  return  oldName.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase(newName.getDefault());	  return    oldName.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
753	[BUG]  [BUGGY]  return  names.toLowerCase(newName,  Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(newName,  Locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(newName,  Locale.getDefault());	  return    names.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	80	None	replace
754	[BUG]  [BUGGY]  return  nameStack.toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toLowerCase(Locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toLowerCase(Locale.getDefault());	  return    names.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	80	None	replace
755	[BUG]  [BUGGY]  return  locale.toLowerCase(names.getDefault());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  locale.toLowerCase(names.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  locale.toLowerCase(names.getDefault());	  return    names.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
756	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=    null)    {    return    oldName;    }    if(newName!=  null)  {  return  oldName;  }	  timeout    	compilable	timeout	160	1	add
757	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName!=  null)  {  return  oldName;  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    if(newName!=  null)  {  return  oldName;  }	  timeout    	compilable	timeout	160	1	add
758	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=    null)    {    return    oldName;    }    if(newName  ==  null)  {  return  oldName;  }	  timeout    	compilable	timeout	160	1	add
759	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  ==  null)  {  return  oldName;  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    if(newName  ==  null)  {  return  oldName;  }	  timeout    	compilable	timeout	160	1	add
760	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  >=  null)  {  return  oldName;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  >=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    if(newName  >=  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	160	None	add
761	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  >>  null)  {  return  oldName;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  >>  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    if(newName  >>  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	160	None	add
762	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  [BUGGY]  null)  {  return  oldName;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName  [BUGGY]  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    if(newName  [BUGGY]  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  ')'  expected	160	None	add
763	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  If(newName!=  null)  {  return  oldName;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  If(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    If(newName!=  null)  {  return  oldName;  }	  timeout    	non-compiled	[CE]  ';'  expected	160	None	add
764	[BUG]  [BUGGY]  return  newName.toUpperCase();  return  newName.toUpperCase();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  return  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    return  newName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	176	None	add
765	[BUG]  [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()!=  null)  {  return  newName.toUpperCase();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()!=  null)  {  return  newName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    if(newName.toUpperCase()!=  null)  {  return  newName.toUpperCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	176	None	add
766	[BUG]  [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()  ==  null)  {  return  newName.toUpperCase();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()  ==  null)  {  return  newName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    if(newName.toUpperCase()  ==  null)  {  return  newName.toUpperCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	176	None	add
767	[BUG]  [BUGGY]  return  newName.toUpperCase();  return  oldName.toUpperCase();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  return  oldName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    return  oldName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	176	None	add
768	[BUG]  [BUGGY]  return  newName.toUpperCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toUpperCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toUpperCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	176	None	add
769	[BUG]  [BUGGY]  return  newName.toUpperCase();  newName.toUpperCase();  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    newName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	176	None	add
770	[BUG]  [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()  >=  null)  {  return  newName.toUpperCase();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()  >=  null)  {  return  newName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    if(newName.toUpperCase()  >=  null)  {  return  newName.toUpperCase();  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	176	None	add
771	[BUG]  [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()!=  null)  {  return  oldName.toUpperCase();  }  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  if(newName.toUpperCase()!=  null)  {  return  oldName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    if(newName.toUpperCase()!=  null)  {  return  oldName.toUpperCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	176	None	add
772	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	compilable	timeout	133	1	add
773	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pop();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	compilable	timeout	133	1	add
774	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.p();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.p();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.p();	  timeout    	non-compiled	[CE]  cannot  find  symbol	133	None	add
775	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.peek();	  timeout    	compilable	timeout	133	1	add
776	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.peek();  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.peek();	  timeout    	compilable	timeout	133	1	add
777	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pus();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pus();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.pus();	  timeout    	non-compiled	[CE]  cannot  find  symbol	133	None	add
778	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pt();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.pt();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.pt();	  timeout    	non-compiled	[CE]  cannot  find  symbol	133	None	add
779	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.push();  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  newName  =  names.getReplacementName(oldName);  nameStack.push();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    newName  =  names.getReplacementName(oldName);  nameStack.push();	  timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	133	None	add
780	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  name  =  names.getReplacementName(oldName);  nameStack.pop();  [CE]  cannot  find  symbol  name  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  name  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    name  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	133	None	add
781	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	211	1	replace
782	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	211	1	replace
783	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	211	None	replace
784	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	211	1	replace
785	[BUG]  [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	211	1	replace
786	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    return  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
787	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
788	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    return  newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
789	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	24	None	add
790	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  Return  oldName.substring(0,  newName.length()  -  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  Return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    Return  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
791	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  nameMap.put(oldName,  newName);  }  [CE]  cannot  find  symbol  nameMap  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  nameMap.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  nameMap.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameMap	24	None	add
792	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  String  oldName  =  oldName.substring(0,  newName.length()  -  1);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  String  oldName  =  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    String  oldName  =  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	24	None	add
793	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
794	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  newName.trim()  +  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  newName.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    return  newName.trim()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	57	None	add
795	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  oldName.trim()  +  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  oldName.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    return  oldName.trim()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	57	None	add
796	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  newName.trim()  +  oldName.toLowerCase();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  newName.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    newName.trim()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  not  a  statement	57	None	add
797	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  Return  newName.trim()  +  oldName.toLowerCase();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  Return  newName.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    Return  newName.trim()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  ';'  expected	57	None	add
798	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  oldName.trim()  +  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  oldName.trim()  +  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    return  oldName.trim()  +  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	57	None	add
799	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  name.trim()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  name.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    return  name.trim()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	57	None	add
800	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  newName.trim()  +  oldName.toUpperCase();  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  newName.trim()  +  oldName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    return  newName.trim()  +  oldName.toUpperCase();	  timeout    	non-compiled	[CE]  unreachable  statement	57	None	add
801	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  String  newName  =  oldName.toLowerCase();  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  String  newName  =  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    String  newName  =  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	57	None	add
802	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	137	None	replace
803	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	137	None	replace
804	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.toString();  }  else  {  newName.toString();  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.toString();  }  else  {  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.toString();  }  else  {  newName.toString();  }	  return    newName.toString();    newName.toString();    	non-compiled	[CE]  cannot  find  symbol  name	116	None	replace
805	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  {  nameMap.put(oldName,  newName);  }  [CE]  cannot  find  symbol  nameMap  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  {  nameMap.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toString();  }  else  {  nameMap.put(oldName,  newName);  }	  return    newName.toString();    newName.toString();    	non-compiled	[CE]  cannot  find  symbol  nameMap	116	None	replace
806	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  {  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.toString();  }  else  {  names.toString();  }	  return    newName.toString();    newName.toString();    	compilable	timeout	116	1	replace
807	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  {  names.toString();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  }  else  {  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toString();  }  else  {  names.toString();  }	  return    newName.toString();    newName.toString();    	compilable	timeout	116	1	replace
808	[BUG]  [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
809	[BUG]  [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.toLowerCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
810	[BUG]  [BUGGY]  return  oldName.substring(0,  nameStack.length());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  nameStack.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  nameStack.length());	  return    name.substring(0,    oldName.length());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
811	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  nameStack.push(newName);	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	134	None	replace
812	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  nameStack.peek();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
813	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.peek();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  nameStack.peek();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
814	[BUG]  [BUGGY]  newName  =  names.replacementName(oldName);  nameStack.pop();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.replacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.replacementName(oldName);  nameStack.pop();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
815	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  oldName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	oldName  =  names.getReplacementName(oldName);  nameStack.pop();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
816	[BUG]  [BUGGY]  oldName  =  names.getReplacementName(oldName);  nameStack.pop();  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  oldName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	oldName  =  names.getReplacementName(oldName);  nameStack.pop();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
817	[BUG]  [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  return  newName.toString()  +   ":   "  +  nameStack.peek();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  return  newName.toString()  +   ":   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ":   "    +    nameStack.peek();    return  newName.toString()  +   ":   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	201	None	add
818	[BUG]  [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  return  oldName.toString()  +   ":   "  +  nameStack.peek();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  return  oldName.toString()  +   ":   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ":   "    +    nameStack.peek();    return  oldName.toString()  +   ":   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  unreachable  statement	201	None	add
819	[BUG]  [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  newName.toString()  +   ":   "  +  nameStack.peek();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  newName.toString()  +   ":   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ":   "    +    nameStack.peek();    newName.toString()  +   ":   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  not  a  statement	201	None	add
820	[BUG]  [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  return  name.toString()  +   ":   "  +  nameStack.peek();  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   ":   "  +  nameStack.peek();  return  name.toString()  +   ":   "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   ":   "    +    nameStack.peek();    return  name.toString()  +   ":   "  +  nameStack.peek();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	201	None	add
821	[BUG]  [BUGGY]  return  name.substring(0,  names.length());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  names.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  names.length());	  return    newName.substring(0,    names.length());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
822	[BUG]  [BUGGY]  return  newName.substring(0,  names.length()  -  2);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  names.length()  -  2);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  names.length()  -  2);	  return    newName.substring(0,    names.length());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
823	[BUG]  [BUGGY]  return  newName.substring(0,  names.length()  -  4);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  names.length()  -  4);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  names.length()  -  4);	  return    newName.substring(0,    names.length());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
824	[BUG]  [BUGGY]  return  newName.substring(0,  names.length()  +  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  names.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  names.length()  +  1);	  return    newName.substring(0,    names.length());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
825	[BUG]  [BUGGY]  return  oldName.toLowerCase();  return  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  return  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    return  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	22	None	add
826	[BUG]  [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()!=  null)  {  return  oldName.toLowerCase();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    if(oldName.toLowerCase()!=  null)  {  return  oldName.toLowerCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	22	None	add
827	[BUG]  [BUGGY]  return  oldName.toLowerCase();  if(oldName.isLowerCase())  {  return  oldName.toLowerCase();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  if(oldName.isLowerCase())  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    if(oldName.isLowerCase())  {  return  oldName.toLowerCase();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	22	None	add
828	[BUG]  [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()  ==  null)  {  return  oldName.toLowerCase();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()  ==  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    if(oldName.toLowerCase()  ==  null)  {  return  oldName.toLowerCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	22	None	add
829	[BUG]  [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()  >=  null)  {  return  oldName.toLowerCase();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()  >=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    if(oldName.toLowerCase()  >=  null)  {  return  oldName.toLowerCase();  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	add
830	[BUG]  [BUGGY]  return  oldName.toLowerCase();  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	22	None	add
831	[BUG]  [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.toLowerCase();  }	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	22	None	add
832	[BUG]  [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()!=  null)  {  return  newName.toLowerCase();  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    if(oldName.toLowerCase()!=  null)  {  return  newName.toLowerCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	22	None	add
833	[BUG]  [BUGGY]  String  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	136	None	replace
834	[BUG]  [BUGGY]  String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	136	None	replace
835	[BUG]  [BUGGY]  Name  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
836	[BUG]  [BUGGY]  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
837	[BUG]  [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.toString();  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.peek().getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
838	[BUG]  [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(oldName!=  null)  {  return  newName.toString();  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(oldName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.peek().getReplacementName(oldName);  if(oldName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
839	[BUG]  [BUGGY]  String  newName  =  names.peek().getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.peek().getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.peek().getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	136	None	replace
840	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName!=  null?  names.toString()  :  oldName;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName!=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	106	None	add
841	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName  ==  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	106	None	add
842	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  >>  null?  names.toString()  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  >>  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName  >>  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	106	None	add
843	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  >=  null?  names.toString()  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  >=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName  >=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	106	None	add
844	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  oldName!=  null?  names.toString()  :  oldName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  oldName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  oldName!=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	106	None	add
845	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName!=  null?  names.toString()  :  oldName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName!=  null?  names.toString()  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName!=  null?  names.toString()  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	106	None	add
846	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  Return  newName!=  null?  names.toString()  :  oldName;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  Return  newName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    Return  newName!=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  ';'  expected	106	None	add
847	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  [Delete]  null?  names.toString()  :  oldName;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName  [Delete]  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName  [Delete]  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  ';'  expected	106	None	add
848	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
849	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	171	None	replace
850	[BUG]  [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
851	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
852	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
853	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  >=  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  >=  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  >=  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
854	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	171	None	replace
855	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	38	None	replace
856	[BUG]  [BUGGY]  result.append(newName.substring(0,  oldName.length()));  [CE]  cannot  find  symbol  result  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  result.append(newName.substring(0,  oldName.length()));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	result.append(newName.substring(0,  oldName.length()));	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  result	38	None	replace
857	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toString();    }    	compilable	timeout	118	1	replace
858	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toString();    }    	compilable	timeout	118	1	replace
859	[BUG]  [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
860	[BUG]  [BUGGY]  return  names.toLowerCase(newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(newName);	  return    names.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
861	[BUG]  [BUGGY]  return  names.toLowerCase(oldName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(oldName);	  return    names.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
862	[BUG]  [BUGGY]  return  names.toLowerCase(),  newName);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(),  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(),  newName);	  return    names.toLowerCase();    	non-compiled	[CE]  ';'  expected	175	None	replace
863	[BUG]  [BUGGY]  return  names.toLowerCase(),  newName;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(),  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(),  newName;	  return    names.toLowerCase();    	non-compiled	[CE]  ';'  expected	175	None	replace
864	[BUG]  [BUGGY]  return  newName.substring(0,  name.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  name.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  name.length()  -  1);	  return    newName.substring(0,    newName.length());    timeout    	non-compiled	[CE]  cannot  find  symbol  name	102	None	replace
865	[BUG]  [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/'))  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/'))  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/'))  {  return  oldName;  }	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
866	[BUG]  [BUGGY]  ||(newName!=  null  &&  newName.length()  >  0)||(newName.length()  ==  0))  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  ||(newName!=  null  &&  newName.length()  >  0)||(newName.length()  ==  0))  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	||(newName!=  null  &&  newName.length()  >  0)||(newName.length()  ==  0))  {  return  oldName;  }	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
867	[BUG]  [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/')))  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/')))  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/')))  {  return  oldName;  }	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
868	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(newName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingName(newName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
869	[BUG]  [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/'))  {  return  oldName;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/'))  {  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  '/'))  {  return  oldName;	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
870	[BUG]  [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  'n'))  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  ||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  'n'))  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	||(newName!=  null  &&  oldName.length()  >  0)||(newName  ==  null  &&  newName.charAt(newName.length()  -  1)!=  'n'))  {  return  oldName;  }	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
871	[BUG]  [BUGGY]  ||(newName!=  null  &&  newName.equals(oldName)))  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  ||(newName!=  null  &&  newName.equals(oldName)))  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	||(newName!=  null  &&  newName.equals(oldName)))  {  return  oldName;  }	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
872	[BUG]  [BUGGY]  return  names.toString();  return  names.toString();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  return  names.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    return  names.toString();	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
873	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
874	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
875	[BUG]  [BUGGY]  return  names.toString();  String  names  =  nameStack.peek().replace(oldName,  newName);  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  String  names  =  nameStack.peek().replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    String  names  =  nameStack.peek().replace(oldName,  newName);	  timeout    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	147	None	add
876	[BUG]  [BUGGY]  return  names.toString();  referenceStack.push(newName);  return  names.toString();  [CE]  cannot  find  symbol  referenceStack  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  referenceStack.push(newName);  return  names.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    referenceStack.push(newName);  return  names.toString();	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	147	None	add
877	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
878	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  return  name.toString();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	147	None	add
879	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  return  nameStack.toString();  }  [CE]  unreachable  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  return  nameStack.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  return  nameStack.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
880	[BUG]  [BUGGY]  return  names.trim(oldName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.trim(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.trim(oldName);	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
881	[BUG]  [BUGGY]  return  names.trim(newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.trim(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.trim(newName);	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
882	[BUG]  [BUGGY]  return  names.substring(0,  names.length()  -  oldName.length());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  names.length()  -  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  names.length()  -  oldName.length());	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
883	[BUG]  [BUGGY]  return  names.replacementName(oldName,  newName.trim());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replacementName(oldName,  newName.trim());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replacementName(oldName,  newName.trim());	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
884	[BUG]  [BUGGY]  return  names.replace(oldName,  newName.trim());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replace(oldName,  newName.trim());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replace(oldName,  newName.trim());	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
885	[BUG]  [BUGGY]  return  names.trim(oldName).trim();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.trim(oldName).trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.trim(oldName).trim();	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
886	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
887	[BUG]  [BUGGY]  return  newName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
888	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  null);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  null);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
889	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    Return    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	14	1	replace
890	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    Return    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	14	1	replace
891	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  newName.substring(0,  newName.length()  -  1);	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
892	[BUG]  [BUGGY]  newName  =  newName.substring(0,  newName.length()  -  1);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  newName.substring(0,  newName.length()  -  1);	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
893	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName  ==  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	compilable	timeout	51	1	replace
894	[BUG]  [BUGGY]  if(oldName  ==  null)  {  return  newName;  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	compilable	timeout	51	1	replace
895	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	compilable	timeout	51	1	replace
896	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName;  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	compilable	timeout	51	1	replace
897	[BUG]  [BUGGY]  Name  newName  =  names.getReplacementName(oldName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  newName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  newName  =  names.getReplacementName(oldName);	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
898	[BUG]  [BUGGY]  newName  =  nameStack.peek();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek();	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	non-compiled	[CE]  incompatible  types	51	None	replace
899	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    return    oldName!=    null?    oldName    :    newName;    	compilable	timeout	95	1	replace
900	[BUG]  [BUGGY]  return  oldName!=  null?  oldName  :  newName;  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    return    oldName!=    null?    oldName    :    newName;    	compilable	timeout	95	1	replace
901	[BUG]  [BUGGY]  newName.toLowerCase();  name.removeConstness(oldName);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  name.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  name.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  cannot  find  symbol  name	208	None	replace
902	[BUG]  [BUGGY]  renaming.toLowerCase();  renamer.removeConstness(oldName);  [CE]  cannot  find  symbol  renaming  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renaming.toLowerCase();  renamer.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renaming.toLowerCase();  renamer.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  cannot  find  symbol  renaming	208	None	replace
903	[BUG]  [BUGGY]  Renamer  renamer  =  names.removeConstness(oldName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  names.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  renamer  =  names.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
904	[BUG]  [BUGGY]  renaming.toLowerCase();  name.removeConstness(oldName);  [CE]  cannot  find  symbol  renaming  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renaming.toLowerCase();  name.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renaming.toLowerCase();  name.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  cannot  find  symbol  renaming	208	None	replace
905	[BUG]  [BUGGY]  Renamer  names.removeConstness(oldName);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  ';'  expected	208	None	replace
906	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  return  newName.toString()  +   "n   ";  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  return  newName.toString()  +   "n   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    return  newName.toString()  +   "n   ";	  timeout    	non-compiled	[CE]  unreachable  statement	127	None	add
907	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  return  oldName.toString()  +   "n   ";  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  return  oldName.toString()  +   "n   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    return  oldName.toString()  +   "n   ";	  timeout    	non-compiled	[CE]  unreachable  statement	127	None	add
908	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  newName.toString()  +   "n   ";  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  newName.toString()  +   "n   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    newName.toString()  +   "n   ";	  timeout    	non-compiled	[CE]  not  a  statement	127	None	add
909	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  Return  newName.toString()  +   "n   ";  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  Return  newName.toString()  +   "n   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    Return  newName.toString()  +   "n   ";	  timeout    	non-compiled	[CE]  	127	None	add
910	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  return  newName.toString()  +   "n';  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  return  newName.toString()  +   "n';  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    return  newName.toString()  +   "n';	  timeout    	non-compiled	[CE]  unclosed  string  literal	127	None	add
911	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  return  name.toString()  +   "n   ";  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  return  name.toString()  +   "n   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    return  name.toString()  +   "n   ";	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	127	None	add
912	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    return  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	101	None	add
913	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    return  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	101	None	add
914	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  return  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    return  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	101	None	add
915	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  return  name.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  return  name.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    return  name.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	101	None	add
916	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  newName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	101	None	add
917	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  oldName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    String  newName  =  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	101	None	add
918	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  Return  newName.substring(0,  newName.length());  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  Return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    Return  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  ';'  expected	101	None	add
919	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  result.substring(0,  newName.length());  [CE]  cannot  find  symbol  result  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  result.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    result.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  cannot  find  symbol  result	101	None	add
920	[BUG]  [BUGGY]  newName  =  oldName.get(names);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.get(names);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName.get(names);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
921	[BUG]  [BUGGY]  newName  =  names.remove(oldName);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.remove(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.remove(oldName);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
922	[BUG]  [BUGGY]  newName  =  nameStack.get(oldName);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.get(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.get(oldName);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
923	[BUG]  [BUGGY]  newName  =  names.get(oldName,  nameStack);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.get(oldName,  nameStack);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.get(oldName,  nameStack);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
924	[BUG]  [BUGGY]  newName  =  nameMap.get(oldName);  [CE]  cannot  find  symbol  nameMap  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameMap.get(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameMap.get(oldName);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol  nameMap	19	None	replace
925	[BUG]  [BUGGY]  newName  =  names.get(oldName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.get(oldName,  idPrefix);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.get(oldName,  idPrefix);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	19	None	replace
926	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName!=  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(oldName!=  null)?  null  :  newName;	  return(newName!=    null)?    null    :    oldName;    timeout    	compilable	timeout	29	1	replace
927	[BUG]  [BUGGY]  return(oldName!=  null)?  null  :  newName;  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName!=  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(oldName!=  null)?  null  :  newName;	  return(newName!=    null)?    null    :    oldName;    timeout    	compilable	timeout	29	1	replace
928	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(oldName!=  null)?  null  :  oldName;	  return(newName!=    null)?    null    :    oldName;    timeout    	compilable	timeout	29	1	replace
929	[BUG]  [BUGGY]  return(oldName!=  null)?  null  :  oldName;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(oldName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(oldName!=  null)?  null  :  oldName;	  return(newName!=    null)?    null    :    oldName;    timeout    	compilable	timeout	29	1	replace
930	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
931	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toString();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
932	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
933	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName.toString();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
934	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
935	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName.toString();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  newName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
936	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName  :  nameStack.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
937	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  nameStack.toString();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  nameStack.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
938	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  return  oldName;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  rootRenamer);  return  oldName;	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
939	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  idPrefix);  return  oldName;  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  idPrefix);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  idPrefix);  return  oldName;	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol  idPrefix	181	None	replace
940	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  renamer);  return  oldName;  [CE]  cannot  find  symbol  renamer  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  renamer);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  renamer);  return  oldName;	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol  renamer	181	None	replace
941	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    oldName.length()    -    1);    	compilable	timeout	86	1	replace
942	[BUG]  [BUGGY]  return  oldName.substring(0,  oldName.length());  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    oldName.length()    -    1);    	compilable	timeout	86	1	replace
943	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length());  return  oldName.substring(0,  oldName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length());  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length());  return  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	86	None	replace
944	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	86	None	replace
945	[BUG]  [BUGGY]  newName.append(oldName.substring(0,  oldName.length()));  return  oldName.substring(0,  oldName.length());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(oldName.substring(0,  oldName.length()));  return  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(oldName.substring(0,  oldName.length()));  return  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
946	[BUG]  [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length()  -  1);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  newName.substring(0,  oldName.length()  -  1);  return  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    return    oldName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	86	None	replace
947	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName.substring(0,  newName.length()  -  1);	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
948	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.substring(0,  newName.length()  -  1);  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName.substring(0,  newName.length()  -  1);	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
949	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    return  oldName!=  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	76	None	add
950	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName;  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    return  oldName  ==  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	76	None	add
951	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName)  {  return  oldName!=  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName)  {  return  oldName!=  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName)  {  return  oldName!=  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	76	None	add
952	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName.toLowerCase())  {  return  oldName!=  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName.toLowerCase())  {  return  oldName!=  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName.toLowerCase())  {  return  oldName!=  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	76	None	add
953	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName;  }  else  {  return  oldName!=  null?  newName  :  oldName;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName;  }  else  {  return  oldName!=  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName;  }  else  {  return  oldName!=  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  ')'  expected	76	None	add
954	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName);  }  else  {  return  oldName!=  null?  newName  :  oldName;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName);  }  else  {  return  oldName!=  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName);  }  else  {  return  oldName!=  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	76	None	add
955	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName)  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName)  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName)  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	76	None	add
956	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName.toLowerCase();  [CE]  unreachable  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    return  oldName!=  null?  newName  :  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	76	None	add
957	[BUG]  [BUGGY]  return  newName.toLowerCase(nameStack.getDefault(),  oldName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(nameStack.getDefault(),  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(nameStack.getDefault(),  oldName);	  return    newName.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
958	[BUG]  [BUGGY]  return  newName.toLowerCase(nameStack.getDefault(),  name);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(nameStack.getDefault(),  name);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(nameStack.getDefault(),  name);	  return    newName.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
959	[BUG]  [BUGGY]  return  newName.toLowerCase(nameStack.getDefault(),  nameUsage);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(nameStack.getDefault(),  nameUsage);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(nameStack.getDefault(),  nameUsage);	  return    newName.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
960	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	61	None	add
961	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  oldName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  oldName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    return  oldName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	61	None	add
962	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  oldName.trim()  +  newName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  oldName.trim()  +  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    return  oldName.trim()  +  newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	61	None	add
963	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    newName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  not  a  statement	61	None	add
964	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  Return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  Return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    Return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  ';'  expected	61	None	add
965	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  name.trim()  +  oldName.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  name.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    return  name.trim()  +  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	61	None	add
966	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  originalName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [CE]  cannot  find  symbol  originalName  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  originalName.trim()  +  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    return  originalName.trim()  +  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  originalName	61	None	add
967	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    return  newName.trim()  +  oldName.substring(0,  newName.length()  -  1);  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	61	None	add
968	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "   ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
969	[BUG]  [BUGGY]  return  newName.toString()  + "   ";  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "   ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "   ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
970	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + "null ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toString()  + "null ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
971	[BUG]  [BUGGY]  return  oldName.toString()  + "null ";  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  + "null ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toString()  + "null ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
972	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ", ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ", ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
973	[BUG]  [BUGGY]  return  newName.toString()  + ", ";  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ", ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ", ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
974	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ": ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ": ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
975	[BUG]  [BUGGY]  return  newName.toString()  + ": ";  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ": ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ": ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
976	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "_ ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "_ ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
977	[BUG]  [BUGGY]  return  newName.toString()  + "_ ";  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "_ ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "_ ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
978	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "  - ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "  - ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
979	[BUG]  [BUGGY]  return  newName.toString()  + "  - ";  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "  - ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "  - ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
980	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
981	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName.substring(0,  oldName.length());  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
982	[BUG]  [BUGGY]  return  newName  <  null?  null  :  newName.substring(0,  oldName.length());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  <  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  <  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	224	None	replace
983	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
984	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName.substring(0,  oldName.length());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
985	[BUG]  [BUGGY]  return  newName  >=  null?  null  :  newName.substring(0,  oldName.length());  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  >=  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  >=  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	224	None	replace
986	[BUG]  [BUGGY]  return  oldName  <  null?  null  :  newName.substring(0,  oldName.length());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  <  null?  null  :  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  <  null?  null  :  newName.substring(0,  oldName.length());	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	224	None	replace
987	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.trim();    return    newName.trim();    	compilable	timeout	30	1	replace
988	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.trim();    return    newName.trim();    	compilable	timeout	30	1	replace
989	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  name.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  name.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  name.substring(0,  oldName.length()  -  1);  }	  return    newName.trim();    return    newName.trim();    	non-compiled	[CE]  cannot  find  symbol  name	30	None	replace
990	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.trim();  }  else  if(oldName.length()  ==  0)  {  return  name.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.trim();  }  else  if(oldName.length()  ==  0)  {  return  name.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.trim();  }  else  if(oldName.length()  ==  0)  {  return  name.substring(0,  oldName.length()  -  1);  }	  return    newName.trim();    return    newName.trim();    	non-compiled	[CE]  cannot  find  symbol  name	30	None	replace
991	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  oldName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  oldName.substring(0,  oldName.length()  -  1);  }	  return    newName.trim();    return    newName.trim();    	compilable	timeout	30	1	replace
992	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  oldName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  oldName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }  else  if(oldName.length()  ==  0)  {  return  oldName.substring(0,  oldName.length()  -  1);  }	  return    newName.trim();    return    newName.trim();    	compilable	timeout	30	1	replace
993	[BUG]  [BUGGY]  return  newName.trim()  +  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  name.toLowerCase();	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	58	None	replace
994	[BUG]  [BUGGY]  return  newName.trim()  +  names.toLowerCase();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  names.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  names.toLowerCase();	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
995	[BUG]  [BUGGY]  return  newName.trim()  +  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  nameStack.toLowerCase();	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
996	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase(Locale.ENGLISH);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  oldName.toLowerCase(Locale.ENGLISH);	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  Locale	58	None	replace
997	[BUG]  [BUGGY]  return  newName.trim()  /  oldName.toLowerCase();  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  /  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  /  oldName.toLowerCase();	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	58	None	replace
998	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  newName  ==  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	70	None	add
999	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  oldName  ==  null?  oldName  :  newName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  oldName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  oldName  ==  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	70	None	add
1000	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName!=  null?  oldName  :  newName;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  newName!=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	70	None	add
1001	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  Return  newName  ==  null?  oldName  :  newName;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  Return  newName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    Return  newName  ==  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	70	None	add
1002	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  newName  ==  null?  oldName  :  newName);	  timeout    	non-compiled	[CE]  ';'  expected	70	None	add
1003	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  >=  null?  oldName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  >=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  newName  >=  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	70	None	add
1004	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  >>  null?  oldName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  >>  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  newName  >>  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	70	None	add
1005	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  newName  ==  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  newName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    newName  ==  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	70	None	add
1006	[BUG]  [BUGGY]  return  names.get(oldName).toLowerCase();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.get(oldName).toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.get(oldName).toLowerCase();	  return    newName.toLowerCase();    return    oldName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1007	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	90	None	replace
1008	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	90	None	replace
1009	[BUG]  [BUGGY]  names.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  names.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	names.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1010	[BUG]  [BUGGY]  names.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  names.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	names.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1011	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	90	None	replace
1012	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  name  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	90	None	replace
1013	[BUG]  [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  1));  return  newName.substring(0,  newName.length());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(newName.substring(0,  oldName.length()  -  1));  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(newName.substring(0,  oldName.length()  -  1));  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1014	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  newName.length()  -  3);  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    return  newName.substring(0,  newName.length()  -  3);	  timeout    	non-compiled	[CE]  unreachable  statement	129	None	add
1015	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  oldName.length()  -  3);  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  oldName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    return  newName.substring(0,  oldName.length()  -  3);	  timeout    	non-compiled	[CE]  unreachable  statement	129	None	add
1016	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  oldName.substring(0,  newName.length()  -  3);  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  oldName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    return  oldName.substring(0,  newName.length()  -  3);	  timeout    	non-compiled	[CE]  unreachable  statement	129	None	add
1017	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  newName.substring(0,  newName.length()  -  3);  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  newName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    newName.substring(0,  newName.length()  -  3);	  timeout    	non-compiled	[CE]  unreachable  statement	129	None	add
1018	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  Return  newName.substring(0,  newName.length()  -  3);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  Return  newName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    Return  newName.substring(0,  newName.length()  -  3);	  timeout    	non-compiled	[CE]  ';'  expected	129	None	add
1019	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  String  newName  =  newName.substring(0,  newName.length()  -  3);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  String  newName  =  newName.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    String  newName  =  newName.substring(0,  newName.length()  -  3);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	129	None	add
1020	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  newName.length()  -  3);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  newName.length()  -  3);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    return  newName.substring(0,  newName.length()  -  3);  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	129	None	add
1021	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  name.substring(0,  newName.length()  -  3);  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  name.substring(0,  newName.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    return  name.substring(0,  newName.length()  -  3);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	129	None	add
1022	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    name.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	152	None	replace
1023	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  name  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	String  name  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  name.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    name.length()    -    2);    	compilable	timeout	152	1	replace
1024	[BUG]  [BUGGY]  String  name  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  name.length());  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  name  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  name  =  newName.substring(0,  oldName.length()  -  2);  return  newName.substring(0,  name.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    name.length()    -    2);    	compilable	timeout	152	1	replace
1025	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName  ==  null?  null  :  newName;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    return  newName  ==  null?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	121	None	add
1026	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName!=  null?  null  :  newName;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName!=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    return  newName!=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	121	None	add
1027	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  return  oldName  ==  null?  null  :  newName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  return  oldName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    return  oldName  ==  null?  null  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	121	None	add
1028	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  Return  newName  ==  null?  null  :  newName;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  Return  newName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    Return  newName  ==  null?  null  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	121	None	add
1029	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName  ==  null?  null  :  oldName;  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName  ==  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    return  newName  ==  null?  null  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	121	None	add
1030	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  newName  ==  null?  null  :  newName;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  newName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    newName  ==  null?  null  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	121	None	add
1031	[BUG]  [BUGGY]  return  name.toLowerCase(names.getDefault());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase(names.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(names.getDefault());	  return    newName.toLowerCase(names.getDefault());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1032	[BUG]  [BUGGY]  return  nameStack.toLowerCase(names.getDefault());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.toLowerCase(names.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.toLowerCase(names.getDefault());	  return    newName.toLowerCase(names.getDefault());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1033	[BUG]  [BUGGY]  return  newName.toLowerCase(names,  nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(names,  nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(names,  nameStack.getDefault());	  return    newName.toLowerCase(names.getDefault());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1034	[BUG]  [BUGGY]  return  names.toLowerCase(newName,  names.getDefault());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(newName,  names.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(newName,  names.getDefault());	  return    newName.toLowerCase(names.getDefault());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1035	[BUG]  [BUGGY]  return  newName.toLowerCase(names.getDefault(),  nameStack);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(names.getDefault(),  nameStack);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(names.getDefault(),  nameStack);	  return    newName.toLowerCase(names.getDefault());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1036	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(newName.equals( " "))  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName;  }  else  if(newName.equals( " "))  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1037	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(newName.equals( " "))  {  return  newName;  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(newName.equals( " "))  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  if(newName.equals( " "))  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1038	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(oldName.equals( " "))  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName;  }  else  if(oldName.equals( " "))  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1039	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(oldName.equals( " "))  {  return  newName;  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(oldName.equals( " "))  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  if(oldName.equals( " "))  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1040	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1041	[BUG]  [BUGGY]  if(newName  ==  null)  {  return  oldName;  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1042	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(newName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName;  }  else  if(newName.length()  ==  0)  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1043	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(newName.length()  ==  0)  {  return  newName;  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  if(newName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  if(newName.length()  ==  0)  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1044	[BUG]  [BUGGY]  result.trim();  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  result.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	result.trim();	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  result	31	None	replace
1045	[BUG]  [BUGGY]  name.trim();  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.trim();	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  name	31	None	replace
1046	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  oldName.toString();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
1047	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName.toString();  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  oldName.toString();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
1048	[BUG]  [BUGGY]  return  names.toLowerCase(oldName,  Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(oldName,  Locale.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(oldName,  Locale.getDefault());	  return    names.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  Locale	80	None	replace
1049	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
1050	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  oldName;  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
1051	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
1052	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName;  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
1053	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  newName.substring(0,  oldName.length()  -  1);	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
1054	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  newName.substring(0,  oldName.length()  -  1);	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
1055	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  newName.substring(0,  oldName.length()  -  1);	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
1056	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  newName.substring(0,  oldName.length()  -  1);	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	compilable	timeout	224	1	replace
1057	[BUG]  [BUGGY]  return  names.toLowerCase();  renamer.removeConstness(oldName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase();  renamer.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();  renamer.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
1058	[BUG]  [BUGGY]  return  names.toLowerCase();  name.removeConstness(oldName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase();  name.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();  name.removeConstness(oldName);	  return    newName.toLowerCase();    renamer.removeConstness(oldName);    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
1059	[BUG]  [BUGGY]  return  names.trim()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.trim()  +  oldName.toLowerCase();	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1060	[BUG]  [BUGGY]  return  name.trim()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.trim()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.trim()  +  oldName.toLowerCase();	  return    newName.trim()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	58	None	replace
1061	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  name.toString();  }	  return    newName.toString();    if(newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol  name	113	None	replace
1062	[BUG]  [BUGGY]  return  names.toLowerCase()  +  oldName;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase()  +  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase()  +  oldName;	  return    names.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1063	[BUG]  [BUGGY]  return  names.toString()  + ",   "  +  newName.size();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + ",   "  +  newName.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  + ",   "  +  newName.size();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1064	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",n "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ",n "  +  nameStack.size();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	compilable	timeout	151	1	replace
1065	[BUG]  [BUGGY]  return  newName.toString()  + ",n "  +  nameStack.size();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ",n "  +  nameStack.size();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ",n "  +  nameStack.size();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	compilable	timeout	151	1	replace
1066	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + "null ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  + "null ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
1067	[BUG]  [BUGGY]  return  names.toString()  + "null ";  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + "null ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  + "null ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
1068	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	118	None	replace
1069	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toString();    }    	compilable	timeout	118	1	replace
1070	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.toString();  }  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toString();    }    	compilable	timeout	118	1	replace
1071	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  newName  =  oldName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  newName  =  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    newName  =  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
1072	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
1073	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    return  newName.substring(0,  oldName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
1074	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  newName.substring(0,  newName.length()  -  1);  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  newName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    newName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
1075	[BUG]  [BUGGY]  Renamer  names.replaceChild(oldName,  newName);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names.replaceChild(oldName,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  ';'  expected	20	None	replace
1076	[BUG]  [BUGGY]  renamer.replaceChild(names,  oldName);  [CE]  cannot  find  symbol  renamer  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(names,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(names,  oldName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  cannot  find  symbol  renamer	20	None	replace
1077	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1078	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1079	[BUG]  [BUGGY]  timeout  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1080	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1081	[BUG]  [BUGGY]  timeout  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1082	[BUG]  [BUGGY]  if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  timeout  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.pop();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1083	[BUG]  [BUGGY]  timeout  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	nameStack.pop();	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1084	[BUG]  [BUGGY]  nameStack.pop();  timeout  [FE]                                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameStack.pop();	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1085	[BUG]  [BUGGY]  timeout  [FE]                                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1086	[BUG]  [BUGGY]  if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  timeout  [FE]                                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()!=  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1087	[BUG]  [BUGGY]  return  oldName;  if(newName.length()!=  0)  {  return  newName;  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  if(newName.length()!=  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  if(newName.length()!=  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	non-compiled	[CE]  unreachable  statement	53	None	replace
1088	[BUG]  [BUGGY]  return  oldName;  if(newName.length()  ==  0)  {  return  newName;  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  if(newName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  if(newName.length()  ==  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	non-compiled	[CE]  unreachable  statement	53	None	replace
1089	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  name.substring(0,  oldName.length()  +  1);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  name.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    return  name.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	6	None	add
1090	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  oldName.substring(0,  newName.length()  +  1);  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  oldName.substring(0,  newName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    return  oldName.substring(0,  newName.length()  +  1);	  timeout    	non-compiled	[CE]  unreachable  statement	6	None	add
1091	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  newName.substring(0,  oldName.length()  +  1);  [CE]  unreachable  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  newName.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    newName.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  unreachable  statement	6	None	add
1092	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  Return  newName.substring(0,  oldName.length()  +  1);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  Return  newName.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    Return  newName.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  ';'  expected	6	None	add
1093	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  originalName.substring(0,  oldName.length()  +  1);  [CE]  cannot  find  symbol  originalName  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  return  originalName.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    return  originalName.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  originalName	6	None	add
1094	[BUG]  [BUGGY]  return  names.toLowerCase()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase()  +  oldName.toLowerCase();	  return    newName.toLowerCase()    +    oldName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	221	None	replace
1095	[BUG]  [BUGGY]  newName.append(names.getReplacementName(oldName));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(names.getReplacementName(oldName));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(names.getReplacementName(oldName));	  return    newName.toString();    newName.toString();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1096	[BUG]  [BUGGY]  newName.append('n');  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append('n');  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append('n');	  return    newName.toString();    newName.toString();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1097	[BUG]  [BUGGY]  newName  =  name.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  name.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  name.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    name.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  name	210	None	replace
1098	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  name  :  names.toString())  {  return  names.toString();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  name  :  names.toString())  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  for(Deque  name  :  names.toString())  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	147	None	add
1099	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  return  names.toString();  }  else  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  return  names.toString();  }  else  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  return  names.toString();  }  else  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
1100	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  name  :  names.toArray())  {  return  names.toString();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  name  :  names.toArray())  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  for(Deque  name  :  names.toArray())  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	147	None	add
1101	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  names  :  nameStack)  {  return  names.toString();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  names  :  nameStack)  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  for(Deque  names  :  nameStack)  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	147	None	add
1102	[BUG]  [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  name  :  names.referenceStack)  {  return  name.toString();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names!=  null)  {  for(Deque  name  :  names.referenceStack)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names!=  null)  {  for(Deque  name  :  names.referenceStack)  {  return  name.toString();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	147	None	add
1103	[BUG]  [BUGGY]  return  names.toString();  String  names  =  nameStack.peek().replace(oldName,  newName);  return  names.toString();  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  String  names  =  nameStack.peek().replace(oldName,  newName);  return  names.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    String  names  =  nameStack.peek().replace(oldName,  newName);  return  names.toString();	  timeout    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	147	None	add
1104	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	68	None	replace
1105	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	68	None	replace
1106	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	68	1	replace
1107	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	68	1	replace
1108	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  name.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  name.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  name.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	68	None	replace
1109	[BUG]  [BUGGY]  String  newName  =  names.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	15	None	replace
1110	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  newName.toLowerCase();  return  newName.toLowerCase();  }  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  newName.toLowerCase();  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  newName.toLowerCase();  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	non-compiled	[CE]  unreachable  statement	63	None	replace
1111	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toLowerCase();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	non-compiled	[CE]  unreachable  statement	63	None	replace
1112	[BUG]  [BUGGY]  return  names.toString()  + "_ "  +  oldName.peek();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + "_ "  +  oldName.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  + "_ "  +  oldName.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
1113	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName.toString()  +  nameStack.peek();	  return    oldName.toString();    timeout    	compilable	timeout	126	1	replace
1114	[BUG]  [BUGGY]  return  oldName.toString()  +  nameStack.peek();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toString()  +  nameStack.peek();	  return    oldName.toString();    timeout    	compilable	timeout	126	1	replace
1115	[BUG]  [BUGGY]  newName.append(nameStack.peek().getReplacementName(oldName));  if(newName!=  null)  {  return  newName.toString();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(nameStack.peek().getReplacementName(oldName));  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(nameStack.peek().getReplacementName(oldName));  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
1116	[BUG]  [BUGGY]  String  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	136	None	replace
1117	[BUG]  [BUGGY]  String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	136	None	replace
1118	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  name.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  name	123	None	replace
1119	[BUG]  [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  oldName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  oldName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	211	None	replace
1120	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	211	None	replace
1121	[BUG]  [BUGGY]  String  newName  =  names.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	211	None	replace
1122	[BUG]  [BUGGY]  return  nameUsage.toLowerCase();  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameUsage.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameUsage.toLowerCase();	  return    name.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	48	None	replace
1123	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  newName.toLowerCase();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  newName.toLowerCase();  }	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  unreachable  statement	66	None	replace
1124	[BUG]  [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  newName.toLowerCase();  }  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  name.toLowerCase();  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  name.toLowerCase();  newName.toLowerCase();  }	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
1125	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  newName.toLowerCase();  }  else  {  nameStack.pop();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  newName.toLowerCase();  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  newName.toLowerCase();  }  else  {  nameStack.pop();  }	  return    newName.toLowerCase();    newName.toLowerCase();    	non-compiled	[CE]  unreachable  statement	66	None	replace
1126	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	compilable	timeout	217	1	replace
1127	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    oldName.trim();    }    	compilable	timeout	217	1	replace
1128	[BUG]  [BUGGY]  renamer.replaceChild(names,  newName);  return  oldName;  [CE]  cannot  find  symbol  renamer  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(names,  newName);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(names,  newName);  return  oldName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  renamer	196	None	replace
1129	[BUG]  [BUGGY]  Renamer  name  =  names.replaceChild(oldName,  newName);  return  name;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  name  =  names.replaceChild(oldName,  newName);  return  name;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  name  =  names.replaceChild(oldName,  newName);  return  name;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
1130	[BUG]  [BUGGY]  nameStack.replaceChild(oldName,  newName);  return  newName;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.replaceChild(oldName,  newName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameStack.replaceChild(oldName,  newName);  return  newName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
1131	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1132	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1133	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1134	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  name.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol  name	192	None	replace
1135	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  newName;  returns(newName  ==  null)?  null  :  newName;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  newName;  returns(newName  ==  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    newName;    returns(newName  ==  null)?  null  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	187	None	add
1136	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  return  name.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  return  name.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    return  name.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	1	None	add
1137	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  String  oldName  =  oldName.substring(0,  oldName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  String  oldName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    String  oldName  =  oldName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	1	None	add
1138	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  String  newName  =  newName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  String  newName  =  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    String  newName  =  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	1	None	add
1139	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  return  oldName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    return  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
1140	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
1141	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  Return  newName.substring(0,  oldName.length());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  Return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    Return  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
1142	[BUG]  [BUGGY]  return  names.toUpperCase(newName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toUpperCase(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toUpperCase(newName);	  return    newName.toUpperCase();    timeout    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1143	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
1144	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName.toString();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
1145	[BUG]  [BUGGY]  newName.append(oldName.substring(0,  oldName.length()  -  2));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(oldName.substring(0,  oldName.length()  -  2));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(oldName.substring(0,  oldName.length()  -  2));	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1146	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName.toLowerCase())  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName.toLowerCase())  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName.toLowerCase())  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
1147	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  else  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  else  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  else  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
1148	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName.toString())  {  return  oldName  ==  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName.toString())  {  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName.toString())  {  return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
1149	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  else  {  nameMap.put(oldName,  newName);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  else  {  nameMap.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    if(oldName  ==  null?  newName  :  newName)  {  return  oldName  ==  null?  newName  :  newName;  }  else  {  nameMap.put(oldName,  newName);  }	  timeout    	non-compiled	[CE]  incompatible  types	164	None	add
1150	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  renewName  ==  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  renewName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    renewName  ==  null?  oldName  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	70	None	add
1151	[BUG]  [BUGGY]  newName.append('  ');  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append('  ');  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append('  ');	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1152	[BUG]  [BUGGY]  nameUsage.append(oldName.substring(0,  oldName.length()  -  1));  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameUsage.append(oldName.substring(0,  oldName.length()  -  1));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameUsage.append(oldName.substring(0,  oldName.length()  -  1));	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	209	None	replace
1153	[BUG]  [BUGGY]  String  nameUsage  =  nameUsage.substring(0,  oldName.length()  -  1);  [CE]  variable  nameUsage  might  not  have  been  initialized  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  nameUsage  =  nameUsage.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  nameUsage  =  nameUsage.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  variable  nameUsage  might  not  have  been  initialized	209	None	replace
1154	[BUG]  [BUGGY]  nameUsage.append(nameUsage,  oldName.substring(0,  oldName.length()  -  1));  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameUsage.append(nameUsage,  oldName.substring(0,  oldName.length()  -  1));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameUsage.append(nameUsage,  oldName.substring(0,  oldName.length()  -  1));	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	209	None	replace
1155	[BUG]  [BUGGY]  nameUsage.append(nameUsage.substring(0,  oldName.length()  -  1));  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameUsage.append(nameUsage.substring(0,  oldName.length()  -  1));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameUsage.append(nameUsage.substring(0,  oldName.length()  -  1));	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    nameUsage.substring(0,    oldName.length()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	209	None	replace
1156	[BUG]  [BUGGY]  return  names.toLowerCase();  referenceStack.push(newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase();  referenceStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();  referenceStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1157	[BUG]  [BUGGY]  return  newName.toString()  +   "n   ";  return  newName.toString()  +   "n ",;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  +   "n   ";  return  newName.toString()  +   "n ",;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toString()    +   "n   ";    return  newName.toString()  +   "n ",;	  timeout    	non-compiled	[CE]  	127	None	add
1158	[BUG]  [BUGGY]  return  newName.toUpperCase();  return  name.toUpperCase();  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  return  name.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    return  name.toUpperCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	176	None	add
1159	[BUG]  [BUGGY]  return  newName.toUpperCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toUpperCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toUpperCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	176	None	add
1160	[BUG]  [BUGGY]  return  newName.toUpperCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toUpperCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toUpperCase();  }	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	176	None	add
1161	[BUG]  [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1162	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1163	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1164	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	171	1	replace
1165	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	171	1	replace
1166	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1167	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1168	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1169	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1170	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1171	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  re(newName!=  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  re(newName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    re(newName!=  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	28	None	add
1172	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  if(newName!=  null)?  null  :  oldName;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  if(newName!=  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    if(newName!=  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	28	None	add
1173	[BUG]  [BUGGY]  referenceStack.pop();  [CE]  cannot  find  symbol  referenceStack  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  referenceStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	referenceStack.pop();	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  referenceStack	34	None	replace
1174	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName  :  oldName.toLowerCase();	  return    oldName!=    null?    newName    :    oldName;    timeout    	compilable	timeout	77	1	replace
1175	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName.toLowerCase();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  oldName.toLowerCase();	  return    oldName!=    null?    newName    :    oldName;    timeout    	compilable	timeout	77	1	replace
1176	[BUG]  [BUGGY]  return  names.getReplacementName(oldName,  newName.trim());  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName,  newName.trim());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.getReplacementName(oldName,  newName.trim());	  return    newName.trim();    return    newName.trim();    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	30	None	replace
1177	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  names.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  names.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  names.length());	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	42	None	replace
1178	[BUG]  [BUGGY]  return  names.substring(0,  newName.length())-  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  newName.length())-  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  newName.length())-  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  ';'  expected	214	None	replace
1179	[BUG]  [BUGGY]  return  name.substring(0,  oldName.length())-  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  oldName.length())-  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  oldName.length())-  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  ';'  expected	214	None	replace
1180	[BUG]  [BUGGY]  return  name.substring(0,  newName.length())-  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.substring(0,  newName.length())-  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.substring(0,  newName.length())-  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length())    -    1);    	non-compiled	[CE]  ';'  expected	214	None	replace
1181	[BUG]  [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  oldName.trim()  +  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  oldName.toLowerCase();  return  oldName.trim()  +  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.trim()    +    oldName.toLowerCase();    return  oldName.trim()  +  name.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	57	None	add
1182	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    name.length()    -    1);    	compilable	timeout	178	1	replace
1183	[BUG]  [BUGGY]  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    name.length()    -    1);    	compilable	timeout	178	1	replace
1184	[BUG]  [BUGGY]  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  name.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  name.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length()  -  1);  return  newName.substring(0,  name.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    name.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	178	None	replace
1185	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  name.length()  -  3);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length()  -  3);  return  newName.substring(0,  name.length()  -  3);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length()    -    3);    return  newName.substring(0,  name.length()  -  3);	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	129	None	add
1186	[BUG]  [BUGGY]  return  names.toString(newName);  [CE]  method  toString  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString(newName);	  return    names.toString();    timeout    	non-compiled	[CE]  method  toString  in  class  Object  cannot  be  applied  to  given  types;	148	None	replace
1187	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  +  oldName;	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
1188	[BUG]  [BUGGY]  return  names.toString()  +  oldName;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  +  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  +  oldName;	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
1189	[BUG]  [BUGGY]  return  names.get(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.get(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.get(newName);	  return    names.toString();    timeout    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1190	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.getReplacementName(newName);	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
1191	[BUG]  [BUGGY]  return  names.getReplacementName(newName);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.getReplacementName(newName);	  return    names.toString();    timeout    	compilable	timeout	148	1	replace
1192	[BUG]  [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName!=  null?  newName.toString()  :  oldName);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName.toString()  :  oldName;  return  oldName!=  null?  newName.toString()  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName.toString()    :    oldName;    return  oldName!=  null?  newName.toString()  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	197	None	add
1193	[BUG]  [BUGGY]  return  oldName.trim()  +  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim()  +  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.trim()  +  nameStack.toLowerCase();	  return    oldName.trim();    timeout    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1194	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ".: "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ".: "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
1195	[BUG]  [BUGGY]  return  newName.toString()  + ".: "  +  nameStack.peek();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ".: "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ".: "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
1196	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + ": "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.toString()  + ": "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
1197	[BUG]  [BUGGY]  return  names.toString()  + ": "  +  nameStack.peek();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString()  + ": "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toString()  + ": "  +  nameStack.peek();	  return    newName.toString()    +   ":   "    +    nameStack.peek();    timeout    	compilable	timeout	202	1	replace
1198	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  Return  oldName!=  null?  newName  :  oldName;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  Return  oldName!=  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    Return  oldName!=  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  ';'  expected	76	None	add
1199	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName  >=  null?  newName  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName  >=  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    return  oldName  >=  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	76	None	add
1200	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName  >>  null?  newName  :  oldName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName  >>  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    return  oldName  >>  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	76	None	add
1201	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName);  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName);	  timeout    	non-compiled	[CE]  incompatible  types	76	None	add
1202	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  return  oldName!=  null?  newName  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    return  oldName!=  null?  newName  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	76	None	add
1203	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName;  if(oldName!=  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    oldName;    if(oldName!=  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  ')'  expected	76	None	add
1204	[BUG]  [BUGGY]  newName.toLowerCase();  return  nameStack.toLowerCase();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.toLowerCase();  return  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.toLowerCase();  return  nameStack.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1205	[BUG]  [BUGGY]  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1206	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
1207	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  names.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  names.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  names.substring(0,  oldName.length()  -  1);  }  else  {  names.add(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.add(newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	90	None	replace
1208	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName.toString())  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName.toString())  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName.toString())  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  incompatible  types	162	None	add
1209	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName ")  {  return  oldName!=  null?  newName  :  newName;  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName ")  {  return  oldName!=  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName ")  {  return  oldName!=  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  unclosed  string  literal	162	None	add
1210	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  returns(newName  ==  null)?  null  :  oldName;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  returns(newName  ==  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    returns(newName  ==  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
1211	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  nameStack.toString();	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
1212	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.toString();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  nameStack.toString();	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
1213	[BUG]  [BUGGY]  String  oldName  =  names.get(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.get(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.get(oldName);  if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
1214	[BUG]  [BUGGY]  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.get(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
1215	[BUG]  [BUGGY]  String  oldName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	67	None	replace
1216	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  names.toLowerCase();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  names.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  names.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1217	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName).trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  names.getReplacementName(oldName).trim();	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
1218	[BUG]  [BUGGY]  return  names.getReplacementName(oldName).trim();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName).trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.getReplacementName(oldName).trim();	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
1219	[BUG]  [BUGGY]  return  name!=  null?  names.toString()  :  oldName;  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name!=  null?  names.toString()  :  oldName;	  return    newName!=    null?    names.toString()    :    oldName;    timeout    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
1220	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  renewName!=  null?  names.toString()  :  oldName;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  renewName!=  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    renewName!=  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	106	None	add
1221	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    return    oldName.toLowerCase();    	non-compiled	[CE]  unreachable  statement	64	None	replace
1222	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  else  {  nameStack.pop();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  else  {  nameStack.pop();  }	  return    newName.toLowerCase();    return    oldName.toLowerCase();    	non-compiled	[CE]  unreachable  statement	64	None	replace
1223	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  else  {  nameStack.push(newName);  }  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toLowerCase();  }  else  {  nameStack.push(newName);  }	  return    newName.toLowerCase();    return    oldName.toLowerCase();    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	64	None	replace
1224	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1225	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  oldName.trim();  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  oldName.trim();  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  oldName.trim();  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1226	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(newName,  oldName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(newName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingName(newName,  oldName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1227	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(oldName,  newName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingName(oldName,  newName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1228	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingReplacement(newName,  oldName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingReplacement(newName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingReplacement(newName,  oldName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1229	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSupplier(newName,  oldName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.throwAsSupplier(newName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.throwAsSupplier(newName,  oldName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1230	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(names,  oldName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(names,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingName(names,  oldName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1231	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingReplacement(newName,  nameStack);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingReplacement(newName,  nameStack);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingReplacement(newName,  nameStack);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1232	[BUG]  [BUGGY]  name  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    }    	non-compiled	[CE]  cannot  find  symbol  name	44	None	replace
1233	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
1234	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  return  oldName.trim();  }	  return    newName.trim();    return    oldName.trim();    	non-compiled	[CE]  unreachable  statement	155	None	replace
1235	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  renewName!=  null?  oldName  :  newName.toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  renewName!=  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    renewName!=  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  not  a  statement	72	None	add
1236	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName!=  null?  oldName  :  name.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	72	None	add
1237	[BUG]  [BUGGY]  newName.appendString(oldName.substring(0,  oldName.length()  -  1));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.appendString(oldName.substring(0,  oldName.length()  -  1));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.appendString(oldName.substring(0,  oldName.length()  -  1));	  return    newName.substring(0,    oldName.length()    -    1);    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1238	[BUG]  [BUGGY]  newName.appendString(oldName.substring(0,  oldName.length()));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.appendString(oldName.substring(0,  oldName.length()));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.appendString(oldName.substring(0,  oldName.length()));	  return    newName.substring(0,    oldName.length()    -    1);    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1239	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  return  newName.substring(0,  name.length());  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  return  newName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    return  newName.substring(0,  name.length());	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	101	None	add
1240	[BUG]  [BUGGY]  newName.append(names.getReplacementName(oldName)).toString();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(names.getReplacementName(oldName)).toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(names.getReplacementName(oldName)).toString();	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1241	[BUG]  [BUGGY]  newName.append( ": ").append(newName.toString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( ": ").append(newName.toString());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( ": ").append(newName.toString());	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1242	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  name.toString();  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  name.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  name.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	200	None	replace
1243	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  name.toString();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  name.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  name.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	200	None	replace
1244	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	65	None	replace
1245	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1246	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1247	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1248	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1249	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1250	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  newName.toLowerCase()  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  newName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    newName.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  not  a  statement	46	None	add
1251	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  return  name.toLowerCase()  +  1;  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  return  name.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    return  name.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	46	None	add
1252	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  Return  newName.toLowerCase()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  Return  newName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    Return  newName.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  ';'  expected	46	None	add
1253	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  return  newName.toUpperCase()  +  1;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  return  newName.toUpperCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    return  newName.toUpperCase()  +  1;	  timeout    	non-compiled	[CE]  unreachable  statement	46	None	add
1254	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  result.toLowerCase()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  result.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    result.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  not  a  statement	46	None	add
1255	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  return  newName.toLowerCase()  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  return  newName.toLowerCase()  +  1;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    return  newName.toLowerCase()  +  1;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	46	None	add
1256	[BUG]  [BUGGY]  return  names.toLowerCase();  name.removeConstness(newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase();  name.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();  name.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1257	[BUG]  [BUGGY]  newName  =  nameStack.peek().replace(oldName,  name);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().replace(oldName,  name);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().replace(oldName,  name);	  newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol  name	195	None	replace
1258	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName!=  null?  null  :  oldName;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  return  newName!=  null?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    return  newName!=  null?  null  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	119	None	add
1259	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  null  :  newName;	  return    newName!=    null?    null    :    newName;    timeout    	compilable	timeout	120	1	replace
1260	[BUG]  [BUGGY]  return  oldName  ==  null?  null  :  newName;  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  null  :  newName;	  return    newName!=    null?    null    :    newName;    timeout    	compilable	timeout	120	1	replace
1261	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  name);  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  name);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  name);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol  name	180	None	replace
1262	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  idPrefix);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  idPrefix);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	180	None	replace
1263	[BUG]  [BUGGY]  return  oldName;  newName  =  names.peek().replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  names.peek().replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  names.peek().replace(oldName,  newName);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
1264	[BUG]  [BUGGY]  newName.append( ": ").append(oldName).toString();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( ": ").append(oldName).toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( ": ").append(oldName).toString();	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
1265	[BUG]  [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  name.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	135	None	replace
1266	[BUG]  [BUGGY]  String  newName  =  names.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.substring(0,  oldName.length());	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	143	None	replace
1267	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName;  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  oldName;  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	compilable	timeout	51	1	replace
1268	[BUG]  [BUGGY]  newName  =  oldName;  if(newName!=  null)  {  return  newName;  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName;  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName;  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	compilable	timeout	51	1	replace
1269	[BUG]  [BUGGY]  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	non-compiled	[CE]  cannot  find  symbol  name	51	None	replace
1270	[BUG]  [BUGGY]  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	non-compiled	[CE]  cannot  find  symbol  name	51	None	replace
1271	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  return  oldName;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  rootRenamer);  return  oldName;	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1272	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  idPrefix);  return  oldName;  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  idPrefix);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  idPrefix);  return  oldName;	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol  idPrefix	181	None	replace
1273	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  name.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  name.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	137	None	replace
1274	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1275	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1276	[BUG]  [BUGGY]  return  names.getReplacementName(oldName,  oldName);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.getReplacementName(oldName,  oldName);	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	36	None	replace
1277	[BUG]  [BUGGY]  return  newName;  newName  =  name.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  name.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  name.substring(0,  oldName.length());	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	183	None	replace
1278	[BUG]  [BUGGY]  return  newName;  newName  =  oldName.substring(0,  oldName.length()  -  1);  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  oldName.substring(0,  oldName.length()  -  1);	  return    oldName;    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  unreachable  statement	183	None	replace
1279	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1280	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1281	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1282	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    renewName!=    null?    oldName    :    newName;    	non-compiled	[CE]  not  a  statement	140	None	replace
1283	[BUG]  [BUGGY]  newName!=  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName!=  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName!=  null?  oldName  :  newName;  renewName!=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    renewName!=    null?    oldName    :    newName;    	non-compiled	[CE]  not  a  statement	140	None	replace
1284	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1285	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1286	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1287	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  re  newName  ==  null?  null  :  newName;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  re  newName  ==  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    re  newName  ==  null?  null  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	121	None	add
1288	[BUG]  [BUGGY]  newName  =  names.substring(0,  oldName.length()  -  1);  return  oldName;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.substring(0,  oldName.length()  -  1);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.substring(0,  oldName.length()  -  1);  return  oldName;	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    return    oldName;    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
1289	[BUG]  [BUGGY]  return  localName.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  localName.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  localName.toLowerCase(newName.getDefault());	  return    locale.toLowerCase(newName.getDefault());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1290	[BUG]  [BUGGY]  return  locale.toLowerCase(newName,  names.getDefault());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  locale.toLowerCase(newName,  names.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  locale.toLowerCase(newName,  names.getDefault());	  return    locale.toLowerCase(newName.getDefault());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1291	[BUG]  [BUGGY]  return  names.toLowerCase()  +  nameStack.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase()  +  nameStack.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
1292	[BUG]  [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  newName.toLowerCase();  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    String  oldName  =  newName.toLowerCase();	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	22	None	add
1293	[BUG]  [BUGGY]  return  oldName.toLowerCase();  Return  oldName.toLowerCase();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  Return  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    Return  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
1294	[BUG]  [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  names.getReplacementName(oldName);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  names.getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    String  oldName  =  names.getReplacementName(oldName);	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	22	None	add
1295	[BUG]  [BUGGY]  return  oldName.toLowerCase();  renamer.replaceChild(oldName,  newName);  [CE]  cannot  find  symbol  renamer  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  renamer.replaceChild(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    renamer.replaceChild(oldName,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	22	None	add
1296	[BUG]  [BUGGY]  return  oldName.toLowerCase();  renamer.replaceChild(nameStack,  newName);  [CE]  cannot  find  symbol  renamer  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  renamer.replaceChild(nameStack,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    renamer.replaceChild(nameStack,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	22	None	add
1297	[BUG]  [BUGGY]  return  oldName.toLowerCase();  renamer.replaceChild(names,  newName);  [CE]  cannot  find  symbol  renamer  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  renamer.replaceChild(names,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    renamer.replaceChild(names,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	22	None	add
1298	[BUG]  [BUGGY]  return  newName.trim()  +  name.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  name.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  name.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	62	None	replace
1299	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    return    oldName;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1300	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName;  }	  return    oldName;    return    oldName;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1301	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  String  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }	  return    oldName;    return    oldName;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1302	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name;  }	  return    oldName;    return    oldName;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1303	[BUG]  [BUGGY]  newName.append( "   "))  {  return  oldName.trim();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append( "   "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append( "   "))  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    oldName.trim();    }    	non-compiled	[CE]  	32	None	replace
1304	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  rename.toLowerCase()  +  nameStack.peek();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  rename.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    rename.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  not  a  statement	222	None	add
1305	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  newName.toLowerCase()  +  nameStack.peek());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  return  newName.toLowerCase()  +  nameStack.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    return  newName.toLowerCase()  +  nameStack.peek());	  timeout    	non-compiled	[CE]  ';'  expected	222	None	add
1306	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1307	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1308	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1309	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName!=  null)?  null  :  newName;	  return(newName!=    null)?    null    :    oldName;    timeout    	compilable	timeout	29	1	replace
1310	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  newName;  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=  null)?  null  :  newName;	  return(newName!=    null)?    null    :    oldName;    timeout    	compilable	timeout	29	1	replace
1311	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    name.length()    -    2);    	compilable	timeout	152	1	replace
1312	[BUG]  [BUGGY]  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    name.length()    -    2);    	compilable	timeout	152	1	replace
1313	[BUG]  [BUGGY]  newName.substring(0,  oldName.length());  return  newName.substring(0,  name.length());  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length());  return  newName.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length());  return  newName.substring(0,  name.length());	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    name.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  name	152	None	replace
1314	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  renewName  ==  null?  oldName  :  newName.toLowerCase();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  renewName  ==  null?  oldName  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    renewName  ==  null?  oldName  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  not  a  statement	74	None	add
1315	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName  :  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  newName  ==  null?  oldName  :  name.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	74	None	add
1316	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  renewName  ==  null?  names.toString()  :  oldName;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  renewName  ==  null?  names.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    renewName  ==  null?  names.toString()  :  oldName;	  timeout    	non-compiled	[CE]  not  a  statement	108	None	add
1317	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  labels.toString()  :  oldName;  [CE]  cannot  find  symbol  labels  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  labels.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName  ==  null?  labels.toString()  :  oldName;	  timeout    	non-compiled	[CE]  cannot  find  symbol  labels	108	None	add
1318	[BUG]  [BUGGY]  return  newName  ==  null?  names.get(newName):  oldName;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.get(newName):  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  names.get(newName):  oldName;	  return    newName    ==    null?    names.toString()    :    oldName;    timeout    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1319	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  oldName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    oldName  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	compilable	timeout	133	1	add
1320	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  oldName  =  names.getReplacementName(oldName);  nameStack.pop();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  oldName  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    oldName  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	compilable	timeout	133	1	add
1321	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  renamer  =  names.getReplacementName(oldName);  nameStack.pop();  [CE]  cannot  find  symbol  renamer  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  nameStack.pop();  renamer  =  names.getReplacementName(oldName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    nameStack.pop();    renamer  =  names.getReplacementName(oldName);  nameStack.pop();	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	133	None	add
1322	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1323	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1324	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1325	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1326	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(2,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(2,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1327	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(2,  oldName.length()  -  1);  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(2,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(2,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1328	[BUG]  [BUGGY]  return  names.substring(0,  name.length());  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.substring(0,  name.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.substring(0,  name.length());	  return    newName.substring(0,    names.length());    	non-compiled	[CE]  cannot  find  symbol  name	146	None	replace
1329	[BUG]  [BUGGY]  return  newName.toLowerCase(nameStack,  nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(nameStack,  nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(nameStack,  nameStack.getDefault());	  return    newName.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1330	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=    null)    {    return    oldName;    }    if(newName!=  null)  {  return  newName;  }	  timeout    	compilable	timeout	160	1	add
1331	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName!=  null)  {  return  newName;  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=    null)    {    return    oldName;    }    if(newName!=  null)  {  return  newName;  }	  timeout    	compilable	timeout	160	1	add
1332	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1333	[BUG]  [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1334	[BUG]  [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1335	[BUG]  [BUGGY]  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1336	[BUG]  [BUGGY]  names.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  names.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	names.substring(0,  oldName.length()  -  1);  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1337	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toString();  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toString();  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toString();  return  oldName.toString();  }	  return    newName.toString();    return    oldName.toString();    	non-compiled	[CE]  unreachable  statement	114	None	replace
1338	[BUG]  [BUGGY]  Return  names.toLowerCase(newName.getDefault());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Return  names.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Return  names.toLowerCase(newName.getDefault());	  return    names.toLowerCase(locale.getDefault());    	non-compiled	[CE]  ';'  expected	166	None	replace
1339	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  String  newName  =  oldName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  String  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    String  newName  =  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	3	None	add
1340	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  Return  oldName.substring(0,  newName.length());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  Return  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    Return  oldName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
1341	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  return  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    return  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
1342	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    return  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
1343	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  newName.substring(0,  oldName.length());  [CE]  unreachable  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
1344	[BUG]  [BUGGY]  return  newName;  newName  =  newName.substring(0,  names.length()  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  newName.substring(0,  names.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  newName.substring(0,  names.length()  -  1);	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1345	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  name.toLowerCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	73	None	replace
1346	[BUG]  [BUGGY]  return  names.names.trim(oldName);  [CE]  cannot  find  symbol  names  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.names.trim(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.names.trim(oldName);	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol  names	153	None	replace
1347	[BUG]  [BUGGY]  return  names.names.trim(newName);  [CE]  cannot  find  symbol  names  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.names.trim(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.names.trim(newName);	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol  names	153	None	replace
1348	[BUG]  [BUGGY]  return  names.get(oldName).trim();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.get(oldName).trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.get(oldName).trim();	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1349	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  name.toString();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  name.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  name.toString();	  return    newName    <    null?    null    :    newName.toString();    	non-compiled	[CE]  cannot  find  symbol  name	168	None	replace
1350	[BUG]  [BUGGY]  return  newName!=  null?  null  :  name.toString();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  name.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  name.toString();	  return    newName    <    null?    null    :    newName.toString();    	non-compiled	[CE]  cannot  find  symbol  name	168	None	replace
1351	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  oldName.toString();	  return    newName    <    null?    null    :    newName.toString();    	compilable	timeout	168	1	replace
1352	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  oldName.toString();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  oldName.toString();	  return    newName    <    null?    null    :    newName.toString();    	compilable	timeout	168	1	replace
1353	[BUG]  [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(oldName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
1354	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  name.toLowerCase();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  name.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  name.toLowerCase();	  return    newName    ==    null?    oldName    :    newName.toLowerCase();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	75	None	replace
1355	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  String  newName  =  oldName.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  String  newName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  String  newName  =  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	213	None	replace
1356	[BUG]  [BUGGY]  name.substring(0,  oldName.length());  String  newName  =  oldName.substring(0,  oldName.length());  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length());  String  newName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length());  String  newName  =  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	213	None	replace
1357	[BUG]  [BUGGY]  name  =  oldName.substring(0,  oldName.length()  -  1);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  oldName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  oldName.substring(0,  oldName.length()  -  1);	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	213	None	replace
1358	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  oldName  =  names.getReplacementName(oldName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	oldName  =  names.getReplacementName(oldName);  return  newName;	          newName    =    names.getReplacementName(oldName);    return    newName;    	compilable	timeout	132	1	replace
1359	[BUG]  [BUGGY]  oldName  =  names.getReplacementName(oldName);  return  newName;  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  oldName  =  names.getReplacementName(oldName);  return  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	oldName  =  names.getReplacementName(oldName);  return  newName;	          newName    =    names.getReplacementName(oldName);    return    newName;    	compilable	timeout	132	1	replace
1360	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName  + "_ "  +  nameStack.size());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName  + "_ "  +  nameStack.size());	          newName    =    names.getReplacementName(oldName);    return    newName;    	compilable	timeout	132	1	replace
1361	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName  + "_ "  +  nameStack.size());  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName  + "_ "  +  nameStack.size());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName  + "_ "  +  nameStack.size());	          newName    =    names.getReplacementName(oldName);    return    newName;    	compilable	timeout	132	1	replace
1362	[BUG]  [BUGGY]  Name  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  name  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  name.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1363	[BUG]  [BUGGY]  nameStack.replaceChild(names,  newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.replaceChild(names,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameStack.replaceChild(names,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1364	[BUG]  [BUGGY]  NamingRenamer.replaceChild(names,  newName);  [CE]  cannot  find  symbol  NamingRenamer  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  NamingRenamer.replaceChild(names,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	NamingRenamer.replaceChild(names,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol  NamingRenamer	131	None	replace
1365	[BUG]  [BUGGY]  Renamer  names  =  names.replaceChild(newName,  newName);  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names  =  names.replaceChild(newName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names  =  names.replaceChild(newName,  newName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	131	None	replace
1366	[BUG]  [BUGGY]  newName  =  names.replace(oldName,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.replace(oldName,  renamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.replace(oldName,  renamer);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol  renamer	19	None	replace
1367	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1368	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(oldName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1369	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1370	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  String  oldName  =  newName.trim();  if(oldName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1371	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  nameStack.get(newName);  if(oldName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  nameStack.get(newName);  if(oldName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  String  oldName  =  nameStack.get(newName);  if(oldName!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1372	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1373	[BUG]  [BUGGY]  return  this.name.toString();  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  this.name.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  this.name.toString();	  return    name.toString();    	non-compiled	[CE]  cannot  find  symbol  name	149	None	replace
1374	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toUpperCase();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toUpperCase();  }	  return    newName.toLowerCase();    return    newName.toUpperCase();    	non-compiled	[CE]  unreachable  statement	206	None	replace
1375	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toUpperCase();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toUpperCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  oldName.toUpperCase();  }	  return    newName.toLowerCase();    return    newName.toUpperCase();    	non-compiled	[CE]  unreachable  statement	206	None	replace
1376	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toUpperCase();  }  else  {  nameStack.pop();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toUpperCase();  }  else  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.toLowerCase();  return  newName.toUpperCase();  }  else  {  nameStack.pop();  }	  return    newName.toLowerCase();    return    newName.toUpperCase();    	non-compiled	[CE]  unreachable  statement	206	None	replace
1377	[BUG]  [BUGGY]  return  names.getReplacementName(oldName,  newName.toLowerCase());  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.getReplacementName(oldName,  newName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.getReplacementName(oldName,  newName.toLowerCase());	  return    newName.toLowerCase();    return    newName.toUpperCase();    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	206	None	replace
1378	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.push(newName;  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  nameStack.push(newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  nameStack.push(newName;	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	non-compiled	[CE]  ')'  expected	134	None	replace
1379	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  nameStack.peek());  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  nameStack.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  nameStack.peek());	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	134	None	replace
1380	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  renamer);  nameStack.pop();  [CE]  cannot  find  symbol  renamer  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  renamer);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  renamer);  nameStack.pop();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	134	None	replace
1381	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName.trim())  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName.trim())  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName.trim())  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	185	None	add
1382	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName.toString())  {  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName.toString())  {  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName.toString())  {  return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  incompatible  types	185	None	add
1383	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  Return  oldName  ==  null?  newName  :  oldName;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  Return  oldName  ==  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    Return  oldName  ==  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  ';'  expected	185	None	add
1384	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.push(newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.push(newName);    }    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	89	None	replace
1385	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  renewName!=  null?  oldName  :  newName.toString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  renewName!=  null?  oldName  :  newName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    renewName!=  null?  oldName  :  newName.toString();	  timeout    	non-compiled	[CE]  not  a  statement	199	None	add
1386	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  newName.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
1387	[BUG]  [BUGGY]  return  newName!=  null?  newName.toString()  :  oldName;  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  newName.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  newName.toString()  :  oldName;	  return    oldName!=    null?    newName.toString()    :    oldName;    timeout    	compilable	timeout	198	1	replace
1388	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	compilable	timeout	115	1	replace
1389	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	compilable	timeout	115	1	replace
1390	[BUG]  [BUGGY]  return  newName.replace(oldName,  nameStack.peek(),  null);  [CE]  no  suitable  method  found  for  replace(String,Renamer,<null>)  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.replace(oldName,  nameStack.peek(),  null);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.replace(oldName,  nameStack.peek(),  null);	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  no  suitable  method  found  for  replace(String,Renamer,<null>)	225	None	replace
1391	[BUG]  [BUGGY]  return  names.replace(oldName,  newNameStack.peek());  [CE]  cannot  find  symbol  newNameStack  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replace(oldName,  newNameStack.peek());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replace(oldName,  newNameStack.peek());	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol  newNameStack	225	None	replace
1392	[BUG]  [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  name.toString();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  oldName.length()  ==  0)  {  return  name.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	138	None	replace
1393	[BUG]  [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	125	None	add
1394	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.isEmpty())  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.isEmpty())  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.isEmpty())  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
1395	[BUG]  [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	125	None	add
1396	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.isEmpty())  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.isEmpty())  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
1397	[BUG]  [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	125	None	add
1398	[BUG]  [BUGGY]  return  names.toLowerCase(name.getDefault());  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(name.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(name.getDefault());	  return    name.toLowerCase(Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  name	81	None	replace
1399	[BUG]  [BUGGY]  return  name.toLowerCase(oldName.getDefault());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase(oldName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(oldName.getDefault());	  return    newName.toLowerCase(locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1400	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  oldName);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  oldName);	          newName    =    names.getReplacementName(oldName);    timeout    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	18	None	replace
1401	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
1402	[BUG]  [BUGGY]  if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName;  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0  ||  oldName.length()  ==  0)  {  return  newName;  }	  return    oldName;    if(oldName.length()    ==    0)    {    return    oldName;    }    	compilable	timeout	56	1	replace
1403	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  oldName  :  newName.toUpperCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	73	1	replace
1404	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toUpperCase();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  oldName  :  newName.toUpperCase();	  return    newName!=    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	73	1	replace
1405	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    return  oldName  ==  null?  newName  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	185	None	add
1406	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    return  oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	185	None	add
1407	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName;  }	  timeout    	non-compiled	[CE]  ')'  expected	185	None	add
1408	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  if(oldName  ==  null?  newName  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    if(oldName  ==  null?  newName  :  oldName);	  timeout    	non-compiled	[CE]  incompatible  types	185	None	add
1409	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  newName  ==  null?  newName  :  oldName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName;  return  newName  ==  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    oldName;    return  newName  ==  null?  newName  :  oldName;	  timeout    	non-compiled	[CE]  unreachable  statement	185	None	add
1410	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	87	1	replace
1411	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	87	1	replace
1412	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()).trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.length()).trim();	  return    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	25	1	replace
1413	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()).trim();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()).trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length()).trim();	  return    oldName.substring(0,    newName.length()    -    1);    timeout    	compilable	timeout	25	1	replace
1414	[BUG]  [BUGGY]  return  names.replacementName(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replacementName(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replacementName(oldName,  newName);	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1415	[BUG]  [BUGGY]  return  names.replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.replace(oldName,  newName);	  return    names.trim();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1416	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toLowerCase());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toLowerCase();  return  newName!=  null?  oldName  :  newName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toLowerCase();    return  newName!=  null?  oldName  :  newName.toLowerCase());	  timeout    	non-compiled	[CE]  ';'  expected	72	None	add
1417	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "* "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty()  ||  oldName.equals( "* "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1418	[BUG]  [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "* "))  {  return  newName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "* "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty()  ||  oldName.equals( "* "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1419	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1420	[BUG]  [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty()  ||  oldName.equals( " "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1421	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "_ "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty()  ||  oldName.equals( "_ "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1422	[BUG]  [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "_ "))  {  return  newName.toString();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "_ "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty()  ||  oldName.equals( "_ "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1423	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "- "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty()  ||  oldName.equals( "- "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1424	[BUG]  [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "- "))  {  return  newName.toString();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty()  ||  oldName.equals( "- "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty()  ||  oldName.equals( "- "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty()    ||    oldName.equals(   "   "))    {    return    newName.toString();    }    	compilable	timeout	193	1	replace
1425	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ". ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ". ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
1426	[BUG]  [BUGGY]  return  newName.toString()  + ". ";  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ". ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ". ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
1427	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "null ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "null ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
1428	[BUG]  [BUGGY]  return  newName.toString()  + "null ";  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "null ";  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "null ";	  return    newName.toString()    +   "n   ";    timeout    	compilable	timeout	128	1	replace
1429	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  String  oldName  =  oldName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  String  oldName  =  oldName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    String  oldName  =  oldName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	1	None	add
1430	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length());  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length());  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length());    String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  oldName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	1	None	add
1431	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()!=  0)  {  return  oldName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
1432	[BUG]  [BUGGY]  if(newName.length()!=  0)  {  return  oldName;  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()!=  0)  {  return  oldName;  }	  return    oldName;    if(oldName.length()!=    0)    {    return    newName;    }    	compilable	timeout	53	1	replace
1433	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1434	[BUG]  [BUGGY]  return  newName!=  null?  names.get(newName):  oldName;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.get(newName):  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  names.get(newName):  oldName;	  return    newName!=    null?    names.toString()    :    oldName;    timeout    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1435	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  +  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  names.toString()  +  oldName  :  oldName;	  return    newName!=    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	107	1	replace
1436	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  +  oldName  :  oldName;  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  +  oldName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  names.toString()  +  oldName  :  oldName;	  return    newName!=    null?    names.toString()    :    oldName;    timeout    	compilable	timeout	107	1	replace
1437	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	compilable	timeout	63	1	replace
1438	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.toLowerCase();  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    return    newName.toLowerCase();    	compilable	timeout	63	1	replace
1439	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	compilable	timeout	138	1	replace
1440	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null  ||  newName.length()  ==  0)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	compilable	timeout	138	1	replace
1441	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	compilable	timeout	138	1	replace
1442	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  oldName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null    ||    newName.length()    ==    0)    {    return    oldName.toString();    }    	compilable	timeout	138	1	replace
1443	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  originalName.toLowerCase()  +  oldName.toLowerCase();  [CE]  cannot  find  symbol  originalName  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toLowerCase();  return  originalName.toLowerCase()  +  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    oldName.toLowerCase();    return  originalName.toLowerCase()  +  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  cannot  find  symbol  originalName	220	None	add
1444	[BUG]  [BUGGY]  Renamer  names  =  names.replaceChild(newName,  oldName);  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names  =  names.replaceChild(newName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names  =  names.replaceChild(newName,  oldName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	131	None	replace
1445	[BUG]  [BUGGY]  renamer.replaceChild(names,  newName,  null);  [CE]  cannot  find  symbol  renamer  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(names,  newName,  null);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(names,  newName,  null);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol  renamer	131	None	replace
1446	[BUG]  [BUGGY]  renamer.replaceChild(names,  newName,  oldName);  [CE]  cannot  find  symbol  renamer  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(names,  newName,  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(names,  newName,  oldName);	          renamer.replaceChild(names,    newName);    	non-compiled	[CE]  cannot  find  symbol  renamer	131	None	replace
1447	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName;  }  else  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1448	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  return  newName;  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  }  else  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1449	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  oldName;  }  else  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1450	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  oldName;  }  else  {  return  newName;  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  oldName;  }  else  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1451	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName  ==  null)  {  return  oldName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName  ==  null)  {  return  oldName;  }  else  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1452	[BUG]  [BUGGY]  if(newName  ==  null)  {  return  oldName;  }  else  {  return  newName;  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName  ==  null)  {  return  oldName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName  ==  null)  {  return  oldName;  }  else  {  return  newName;  }	  return    oldName;    return    oldName;    	compilable	timeout	49	1	replace
1453	[BUG]  [BUGGY]  Name  newName  =  newName.substring(0,  newName.length());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  newName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  newName  =  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    String    newName    =    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1454	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
1455	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
1456	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
1457	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
1458	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
1459	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    newName.trim();    }    	compilable	timeout	216	1	replace
1460	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  oldName.toString();	  return    newName    <    null?    null    :    newName.toString();    	compilable	timeout	168	1	replace
1461	[BUG]  [BUGGY]  return  newName!=  null?  null  :  oldName.toString();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  oldName.toString();	  return    newName    <    null?    null    :    newName.toString();    	compilable	timeout	168	1	replace
1462	[BUG]  [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  newName.toLowerCase();  return  oldName.toLowerCase();  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  String  oldName  =  newName.toLowerCase();  return  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    String  oldName  =  newName.toLowerCase();  return  oldName.toLowerCase();	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	22	None	add
1463	[BUG]  [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()  ==  null)  {  return  newName.toLowerCase();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase();  if(oldName.toLowerCase()  ==  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toLowerCase();    if(oldName.toLowerCase()  ==  null)  {  return  newName.toLowerCase();  }	  timeout    	non-compiled	[CE]  unreachable  statement	22	None	add
1464	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty())  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	compilable	timeout	191	1	replace
1465	[BUG]  [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty())  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	compilable	timeout	191	1	replace
1466	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	compilable	timeout	191	1	replace
1467	[BUG]  [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty())  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    oldName.toString();    }    	compilable	timeout	191	1	replace
1468	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1469	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null)  {  return  oldName.trim();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName!=  null)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1470	[BUG]  [BUGGY]  return  newName  >=  null?  oldName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  >=  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  >=  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    return    newName    >=    null?    oldName    :    newName;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	97	None	replace
1471	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	compilable	timeout	36	1	replace
1472	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.trim();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	compilable	timeout	36	1	replace
1473	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()!=  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	compilable	timeout	36	1	replace
1474	[BUG]  [BUGGY]  if(newName.length()!=  0)  {  return  newName.trim();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()!=  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()!=  0)  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()!=    0)    {    return    newName.trim();    }    	compilable	timeout	36	1	replace
1475	[BUG]  [BUGGY]  return  newName.substring(0,  existingName.length());  [CE]  cannot  find  symbol  existingName  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  existingName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  existingName.length());	  return    newName.substring(0,    name.length());    	non-compiled	[CE]  cannot  find  symbol  existingName	104	None	replace
1476	[BUG]  [BUGGY]  return  newName.toUpperCase();  renamer.removeReplacementName(oldName);  [CE]  cannot  find  symbol  renamer  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  renamer.removeReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    renamer.removeReplacementName(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	176	None	add
1477	[BUG]  [BUGGY]  return  newName.toUpperCase();  renamer.removeConstness(newName);  [CE]  cannot  find  symbol  renamer  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  renamer.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    renamer.removeConstness(newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	176	None	add
1478	[BUG]  [BUGGY]  return  newName.toUpperCase();  renamer.removeConstness(oldName);  [CE]  cannot  find  symbol  renamer  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  renamer.removeConstness(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    renamer.removeConstness(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	176	None	add
1479	[BUG]  [BUGGY]  return  newName.toUpperCase();  nameUsage.put(oldName,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toUpperCase();  nameUsage.put(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toUpperCase();    nameUsage.put(oldName,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	176	None	add
1480	[BUG]  [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName!=  null?  oldName  :  newName.toString());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  oldName  :  newName.toString();  return  newName!=  null?  oldName  :  newName.toString());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    oldName    :    newName.toString();    return  newName!=  null?  oldName  :  newName.toString());	  timeout    	non-compiled	[CE]  ';'  expected	199	None	add
1481	[BUG]  [BUGGY]  return  newName.toLowerCase(nameStack,  referenceStack.getDefault());  [CE]  cannot  find  symbol  referenceStack  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(nameStack,  referenceStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(nameStack,  referenceStack.getDefault());	  return    newName.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol  referenceStack	78	None	replace
1482	[BUG]  [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1483	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    return    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	85	None	replace
1484	[BUG]  [BUGGY]  return  names.toLowerCase(newName.getValue());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase(newName.getValue());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase(newName.getValue());	  return    names.toLowerCase(locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1485	[BUG]  [BUGGY]  renamer.replaceChild(name,  newName);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(name,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(name,  newName);	          renamer.replaceChild(oldName,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	20	None	replace
1486	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName.trim();  }  else  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
1487	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  nameUsage.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  nameUsage.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName.trim();  }  else  {  return  nameUsage.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
1488	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
1489	[BUG]  [BUGGY]  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	compilable	timeout	218	1	replace
1490	[BUG]  [BUGGY]  newName.trim();  if(newName!=  null)  {  return  nameUsage.trim();  }  else  {  return  oldName.trim();  }  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.trim();  if(newName!=  null)  {  return  nameUsage.trim();  }  else  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.trim();  if(newName!=  null)  {  return  nameUsage.trim();  }  else  {  return  oldName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    return    newName.trim();    }    else    {    return    nameUsage.trim();    }    	non-compiled	[CE]  cannot  find  symbol  nameUsage	218	None	replace
1491	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  oldName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  oldName;  }  else  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    else    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1492	[BUG]  [BUGGY]  return  nameUsage.toLowerCase(newName.getDefault());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameUsage.toLowerCase(newName.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameUsage.toLowerCase(newName.getDefault());	  return    locale.toLowerCase(newName.getDefault());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1493	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  else  {  return  newName;  }	  return    newName!=    null?    oldName    :    newName;    return    newName!=    null?    oldName    :    newName;    	compilable	timeout	93	1	replace
1494	[BUG]  [BUGGY]  if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  else  {  return  newName;  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  else  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  newName!=  null?  oldName  :  newName;  }  else  {  return  newName;  }	  return    newName!=    null?    oldName    :    newName;    return    newName!=    null?    oldName    :    newName;    	compilable	timeout	93	1	replace
1495	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	37	1	replace
1496	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  newName.length());  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	37	1	replace
1497	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	37	1	replace
1498	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  newName.length());  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	37	1	replace
1499	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  name.substring(0,  newName.length());  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  name.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  name.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  name	37	None	replace
1500	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	37	1	replace
1501	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    	compilable	timeout	37	1	replace
1502	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  String  newName  =  newName.substring(0,  oldName.length()  +  1);  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  +  1);  String  newName  =  newName.substring(0,  oldName.length()  +  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    oldName.length()    +    1);    String  newName  =  newName.substring(0,  oldName.length()  +  1);	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	6	None	add
1503	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    return  oldName  ==  null?  newName  :  newName);	  timeout    	non-compiled	[CE]  ';'  expected	164	None	add
1504	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  oldName  ==  null?  newName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    return  oldName  ==  null?  newName  :  newName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	164	None	add
1505	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  newName  ==  null?  newName  :  newName;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  newName;  return  newName  ==  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName    ==    null?    newName    :    newName;    return  newName  ==  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  unreachable  statement	164	None	add
1506	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.peek().getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	                newName    =    names.getReplacementName(oldName);    newName  =  nameStack.peek().getReplacementName(oldName);	  timeout    	compilable	timeout	17	1	add
1507	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.peek().getReplacementName(oldName);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.peek().getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    newName  =  nameStack.peek().getReplacementName(oldName);	  timeout    	compilable	timeout	17	1	add
1508	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.peek().replacementName(oldName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  nameStack.peek().replacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    newName  =  nameStack.peek().replacementName(oldName);	  timeout    	non-compiled	[CE]  cannot  find  symbol	17	None	add
1509	[BUG]  [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  names.getReplacementName(oldName,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]          newName  =  names.getReplacementName(oldName);  newName  =  names.getReplacementName(oldName,  renamer);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	                newName    =    names.getReplacementName(oldName);    newName  =  names.getReplacementName(oldName,  renamer);	  timeout    	non-compiled	[CE]  cannot  find  symbol  renamer	17	None	add
1510	[BUG]  [BUGGY]  return  newName.toLowerCase(),  nameStack.toLowerCase();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(),  nameStack.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(),  nameStack.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	non-compiled	[CE]  ';'  expected	179	None	replace
1511	[BUG]  [BUGGY]  return  newName.toLowerCase(),  oldName.toLowerCase();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(),  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(),  oldName.toLowerCase();	  return    newName.toLowerCase();    return    name.toLowerCase();    	non-compiled	[CE]  ';'  expected	179	None	replace
1512	[BUG]  [BUGGY]  return  newName.toLowerCase(names,  names.getDefault());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase(names,  names.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase(names,  names.getDefault());	  return    newName.toLowerCase(names.getDefault());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1513	[BUG]  [BUGGY]  return  name.toLowerCase()  +  nameStack.peek();  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase()  +  nameStack.peek();	  return    newName.toLowerCase()    +    nameStack.peek();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	223	None	replace
1514	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
1515	[BUG]  [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
1516	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
1517	[BUG]  [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
1518	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.equals( " "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
1519	[BUG]  [BUGGY]  if(oldName.equals( " "))  {  return  newName.toString();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.equals( " "))  {  return  newName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    newName.toString();    }    	compilable	timeout	192	1	replace
1520	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
1521	[BUG]  [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty())  {  return  newName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
1522	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
1523	[BUG]  [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  oldName.toString();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.isEmpty())  {  return  oldName.toString();  }  else  {  return  oldName.toString();  }	  return    newName.toString();    if(newName.isEmpty())    {    return    newName.toString();    }    else    {    return    oldName.toString();    }    	compilable	timeout	194	1	replace
1524	[BUG]  [BUGGY]  renewName  ==  null?  oldName  :  newName;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renewName  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renewName  ==  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    renewName!=    null?    oldName    :    newName;    	non-compiled	[CE]  not  a  statement	140	None	replace
1525	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  oldName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
1526	[BUG]  [BUGGY]  if(newName!=  null)  {  String  oldName  =  oldName.trim();  return  newName.trim();  }  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  oldName  =  oldName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  oldName  =  oldName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
1527	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  newName.trim();  return  newName.trim();  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  newName.trim();  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  newName.trim();  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    return    newName.trim();    }    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	159	None	replace
1528	[BUG]  [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name.substring(0,  oldName.length()  -  1);  if(newName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  names.put(oldName,  newName);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    names.put(oldName,    newName);    }    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
1529	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	68	1	replace
1530	[BUG]  [BUGGY]  if(oldName!=  null)  {  return  oldName.toLowerCase();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	68	1	replace
1531	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	68	1	replace
1532	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toLowerCase();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	68	1	replace
1533	[BUG]  [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  nameStack.peek().replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  nameStack.peek().replace(oldName,  newName);	  return    oldName;    newName    =    nameStack.peek().replace(oldName,    renamer);    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
1534	[BUG]  [BUGGY]  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.get(oldName);  if(newName!=  null)  {  return  newName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1535	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.equals( " "))  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	67	1	replace
1536	[BUG]  [BUGGY]  if(oldName.equals( " "))  {  return  oldName.toLowerCase();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals( " "))  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.equals( " "))  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.get(oldName);    if(newName!=    null)    {    return    newName.toLowerCase();    }    	compilable	timeout	67	1	replace
1537	[BUG]  [BUGGY]  newName.append(oldName.toLowerCase());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(oldName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(oldName.toLowerCase());	  return    newName.substring(0,    oldName.length()    -    1);    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1538	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	compilable	timeout	136	1	replace
1539	[BUG]  [BUGGY]  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	compilable	timeout	136	1	replace
1540	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	compilable	timeout	136	1	replace
1541	[BUG]  [BUGGY]  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	nameStack.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	compilable	timeout	136	1	replace
1542	[BUG]  [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
1543	[BUG]  [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Name  oldName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Name  oldName  =  names.peek().getReplacementName(oldName);  if(newName!=  null)  {  return  oldName.toString();  }	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
1544	[BUG]  [BUGGY]  newName  =  names.peek().getReplacementName(oldName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.peek().getReplacementName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.peek().getReplacementName(oldName);	  return    newName.toString();    String    newName    =    nameStack.peek().getReplacementName(oldName);    if(newName!=    null)    {    return    newName.toString();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
1545	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  [Delete]  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	[Delete]	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1546	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(oldName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.handleMissingName(oldName);	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1547	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(newName!=    null)    {    return    oldName;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	161	None	replace
1548	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  Return  oldName!=  null?  newName  :  newName;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  Return  oldName!=  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    Return  oldName!=  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	162	None	add
1549	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName  >=  null?  newName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName  >=  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    return  oldName  >=  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	162	None	add
1550	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName  >>  null?  newName  :  newName;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName  >>  null?  newName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    return  oldName  >>  null?  newName  :  newName;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	162	None	add
1551	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  if(oldName!=  null?  newName  :  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    if(oldName!=  null?  newName  :  newName);	  timeout    	non-compiled	[CE]  incompatible  types	162	None	add
1552	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName!=  null?  newName  :  newName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  newName;  return  oldName!=  null?  newName  :  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName!=    null?    newName    :    newName;    return  oldName!=  null?  newName  :  newName);	  timeout    	non-compiled	[CE]  ';'  expected	162	None	add
1553	[BUG]  [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1554	[BUG]  [BUGGY]  if(oldName!=  null  ||  newName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  newName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null  ||  newName  ==  null)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1555	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim().length()  ==  0)  {  return  newName.trim();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim().length()  ==  0)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim().length()  ==  0)  {  return  newName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
1556	[BUG]  [BUGGY]  return  oldName.trim();  if(oldName.trim()!=  null)  {  return  oldName.trim();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.trim();  if(oldName.trim()!=  null)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.trim();    if(oldName.trim()!=  null)  {  return  oldName.trim();  }	  timeout    	non-compiled	[CE]  unreachable  statement	59	None	add
1557	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(1,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(1,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    Return    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	14	1	replace
1558	[BUG]  [BUGGY]  return  newName.substring(1,  newName.length());  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(1,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(1,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    Return    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	14	1	replace
1559	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ", "  +  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + ", "  +  nameStack.toString();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	compilable	timeout	151	1	replace
1560	[BUG]  [BUGGY]  return  newName.toString()  + ", "  +  nameStack.toString();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + ", "  +  nameStack.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + ", "  +  nameStack.toString();	  return    newName.toString()    +   ",   "    +    nameStack.size();    timeout    	compilable	timeout	151	1	replace
1561	[BUG]  [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  names.toString()  :  oldName;  return  newName  ==  null?  names.toString()  :  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    names.toString()    :    oldName;    return  newName  ==  null?  names.toString()  :  oldName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	108	None	add
1562	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName  ==  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName  ==  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  names.getReplacementName(oldName,  newName);  if(newName  ==  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1563	[BUG]  [BUGGY]  return  name  ==  null?  oldName  :  newName;  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name  ==  null?  oldName  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name  ==  null?  oldName  :  newName;	  return    newName!=    null?    oldName    :    newName;    return    newName    ==    null?    oldName    :    newName;    	non-compiled	[CE]  cannot  find  symbol  name	94	None	replace
1564	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName;  return  newName  ==  null?  oldName  :  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName;    return  newName  ==  null?  oldName  :  newName;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	70	None	add
1565	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
1566	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }	  timeout    	non-compiled	[CE]  unreachable  statement	24	None	add
1567	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  newName.length()  -  1);  }  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  newName.length()  -  1);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	24	None	add
1568	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    if(oldName.length()  >  0)  {  return  oldName.substring(0,  newName.length()  -  1);  }  else  {  return  nameUsage.substring(0,  oldName.length()  -  1);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	24	None	add
1569	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  String  oldName  =  oldName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length()  -  1);  String  oldName  =  oldName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length()    -    1);    String  oldName  =  oldName.substring(0,  newName.length()  -  1);  return  oldName.substring(0,  newName.length()  -  1);	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	24	None	add
1570	[BUG]  [BUGGY]  Return  newName.substring(0,  newName.length());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Return  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    Return    newName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  ';'  expected	41	None	replace
1571	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  oldName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  oldName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    String  newName  =  oldName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	101	None	add
1572	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	101	None	add
1573	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.substring(0,    newName.length());    String  newName  =  newName.substring(0,  oldName.length());  return  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	101	None	add
1574	[BUG]  [BUGGY]  return  oldName.toLowerCase(newName.toLowerCase());  [CE]  no  suitable  method  found  for  toLowerCase(String)  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toLowerCase(newName.toLowerCase());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName.toLowerCase(newName.toLowerCase());	  return    oldName.toLowerCase();    timeout    	non-compiled	[CE]  no  suitable  method  found  for  toLowerCase(String)	23	None	replace
1575	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName.toLowerCase()  :  newName.toLowerCase();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase();  return  newName  ==  null?  oldName.toLowerCase()  :  newName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    oldName    :    newName.toLowerCase();    return  newName  ==  null?  oldName.toLowerCase()  :  newName.toLowerCase();	  timeout    	non-compiled	[CE]  unreachable  statement	74	None	add
1576	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    return    oldName.substring(0,    newName.length()    -    1);    	compilable	timeout	11	1	replace
1577	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  oldName.substring(0,  newName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    return    oldName.substring(0,    newName.length()    -    1);    	compilable	timeout	11	1	replace
1578	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  name.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    return    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	11	None	replace
1579	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  newName  :  oldName;	  return    oldName!=    null?    newName    :    oldName;    timeout    	compilable	timeout	77	1	replace
1580	[BUG]  [BUGGY]  return  newName!=  null?  newName  :  oldName;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  newName  :  oldName;	  return    oldName!=    null?    newName    :    oldName;    timeout    	compilable	timeout	77	1	replace
1581	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  nameStack.pop();  }	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
1582	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  nameStack.pop();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  nameStack.pop();  }	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
1583	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  newName  =  names.getReplacementName(oldName);  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  newName  =  names.getReplacementName(oldName);  nameStack.pop();  }	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
1584	[BUG]  [BUGGY]  if(newName!=  null)  {  newName  =  names.getReplacementName(oldName);  nameStack.pop();  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  newName  =  names.getReplacementName(oldName);  nameStack.pop();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  newName  =  names.getReplacementName(oldName);  nameStack.pop();  }	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	compilable	timeout	134	1	replace
1585	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  newName);  nameStack.pop();  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  newName);  nameStack.pop();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  newName);  nameStack.pop();	          newName    =    names.getReplacementName(oldName);    nameStack.pop();    timeout    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	134	None	replace
1586	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	compilable	timeout	38	1	replace
1587	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	compilable	timeout	38	1	replace
1588	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  name.substring(0,  oldName.length());  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  name.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  name.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  name	38	None	replace
1589	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	compilable	timeout	38	1	replace
1590	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  oldName.length());  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length());  }  else  {  return  oldName.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	compilable	timeout	38	1	replace
1591	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	compilable	timeout	38	1	replace
1592	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length());  }  else  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    oldName.length()    -    2);    	compilable	timeout	38	1	replace
1593	[BUG]  [BUGGY]  return  names.toLowerCase();  renamer.removeConstness(newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase();  renamer.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase();  renamer.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1594	[BUG]  [BUGGY]  Renamer  names  =  names.removeConstness(newName);  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names  =  names.removeConstness(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names  =  names.removeConstness(newName);	  return    newName.toLowerCase();    renamer.removeConstness(newName);    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	205	None	replace
1595	[BUG]  [BUGGY]  return  names.toString();  if(names.toString()!=  null)  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names.toString()!=  null)  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names.toString()!=  null)  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
1596	[BUG]  [BUGGY]  return  names.toString();  if(names.toString().equals(oldName))  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names.toString().equals(oldName))  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names.toString().equals(oldName))  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
1597	[BUG]  [BUGGY]  return  names.toString();  if(names.toString()  ==  null)  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names.toString()  ==  null)  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names.toString()  ==  null)  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
1598	[BUG]  [BUGGY]  return  names.toString();  if(names.toString().equals(newName))  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names.toString().equals(newName))  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names.toString().equals(newName))  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
1599	[BUG]  [BUGGY]  return  names.toString();  if(names.toString()!=  oldName)  {  return  names.toString();  }  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names.toString()!=  oldName)  {  return  names.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names.toString()!=  oldName)  {  return  names.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	147	None	add
1600	[BUG]  [BUGGY]  return  names.toString();  if(names.toString().equals(oldName))  {  return  name.toString();  }  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toString();  if(names.toString().equals(oldName))  {  return  name.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    names.toString();    if(names.toString().equals(oldName))  {  return  name.toString();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  name	147	None	add
1601	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  String  newName  =  newName.substring(0,  oldName.length()  -  1);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  String  newName  =  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  String  newName  =  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	143	None	replace
1602	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  String  newName  =  newName.substring(0,  oldName.length()  -  1);  }  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  String  newName  =  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  String  newName  =  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	143	None	replace
1603	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  name  =  newName.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  name  =  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  name  =  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	143	None	replace
1604	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  name  =  newName.substring(0,  oldName.length()  -  1);  }  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  name  =  newName.substring(0,  oldName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  name  =  newName.substring(0,  oldName.length()  -  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    String    newName    =    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	143	None	replace
1605	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1606	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  nameStack.peek();  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    nameStack.pop();    }    	compilable	timeout	92	1	replace
1607	[BUG]  [BUGGY]  newName  =  names.replacementName(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.replacementName(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.replacementName(oldName,  newName);	          newName    =    names.getReplacementName(oldName);    timeout    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1608	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "._ "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toString()  + "._ "  +  nameStack.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	compilable	timeout	204	1	replace
1609	[BUG]  [BUGGY]  return  newName.toString()  + "._ "  +  nameStack.peek();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toString()  + "._ "  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toString()  + "._ "  +  nameStack.peek();	  return    newName.toString()    +   "_   "    +    nameStack.peek();    timeout    	compilable	timeout	204	1	replace
1610	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName  {  null)?  null  :  oldName;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName;  return(newName  {  null)?  null  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName    ==    null)?    null    :    oldName;    return(newName  {  null)?  null  :  oldName;	  timeout    	non-compiled	[CE]  ')'  expected	26	None	add
1611	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName  ==  null?  newName  :  oldName.trim();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
1612	[BUG]  [BUGGY]  return  oldName  ==  null?  newName  :  oldName.trim();  timeout  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  ==  null?  newName  :  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  ==  null?  newName  :  oldName.trim();	  return    oldName    ==    null?    newName    :    oldName;    timeout    	compilable	timeout	186	1	replace
1613	[BUG]  [BUGGY]  return  newName!=  null?  null  :  newName;  renewName!=  null?  null  :  newName;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  newName;  renewName!=  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    null    :    newName;    renewName!=  null?  null  :  newName;	  timeout    	non-compiled	[CE]  not  a  statement	119	None	add
1614	[BUG]  [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName!=  null)?  null  :  oldName);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName!=  null)?  null  :  oldName;  return(newName!=  null)?  null  :  oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName!=    null)?    null    :    oldName;    return(newName!=  null)?  null  :  oldName);	  timeout    	non-compiled	[CE]  ';'  expected	28	None	add
1615	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
1616	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  oldName.trim();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
1617	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals(newName))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.equals(newName))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
1618	[BUG]  [BUGGY]  if(oldName.equals(newName))  {  return  newName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.equals(newName))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.equals(newName))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().length()    ==    0)    {    return    newName.trim();    }    	compilable	timeout	33	1	replace
1619	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  referenceStack.push(newName);  return  newName.toLowerCase()  +  1;  [CE]  cannot  find  symbol  referenceStack  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  referenceStack.push(newName);  return  newName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    referenceStack.push(newName);  return  newName.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	46	None	add
1620	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  1;  renamer.toLowerCase()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  1;  renamer.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    1;    renamer.toLowerCase()  +  1;	  timeout    	non-compiled	[CE]  not  a  statement	46	None	add
1621	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName.toUpperCase();	  return    newName    ==    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	75	1	replace
1622	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toUpperCase();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName.toUpperCase();	  return    newName    ==    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	75	1	replace
1623	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName.toLowerCase()  +  1;	  return    newName    ==    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	75	1	replace
1624	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase()  +  1;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.toLowerCase()  +  1;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName.toLowerCase()  +  1;	  return    newName    ==    null?    oldName    :    newName.toLowerCase();    timeout    	compilable	timeout	75	1	replace
1625	[BUG]  [BUGGY]  newName  =  names.replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.replace(oldName,  newName);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1626	[BUG]  [BUGGY]  newName  =  names.names.get(oldName);  [CE]  cannot  find  symbol  names  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.names.get(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.names.get(oldName);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol  names	19	None	replace
1627	[BUG]  [BUGGY]  newName  =  names.declare(oldName);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.declare(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.declare(oldName);	          newName    =    names.get(oldName);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1628	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
1629	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length());  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(0,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(0,    oldName.length()    -    1);    }    	compilable	timeout	88	1	replace
1630	[BUG]  [BUGGY]  return  newName.trim(),  oldName.trim();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim(),  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim(),  oldName.trim();	  return    newName.trim();    return    oldName.trim();    	non-compiled	[CE]  ';'  expected	155	None	replace
1631	[BUG]  [BUGGY]  newName.append(oldName);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName.append(oldName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName.append(oldName);	  return    newName.toString();    newName.toString();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1632	[BUG]  [BUGGY]  if(newName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  String  newName  =  oldName.trim();  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1633	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  newName  =  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  newName  =  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  newName  =  newName.trim();  if(newName!=  null)  {  return  newName.trim();  }	  return    newName.trim();    if(newName!=    null)    {    String    newName    =    oldName.trim();    if(newName!=    null)    {    return    newName.trim();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1634	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  >  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  >  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	compilable	timeout	115	1	replace
1635	[BUG]  [BUGGY]  if(newName.length()  >  0)  {  return  newName.toString();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  >  0)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  >  0)  {  return  newName.toString();  }	  return    newName.toString();    if(newName.length()    >    0)    {    return    newName.toString();    }    	compilable	timeout	115	1	replace
1636	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName;  newName  =  names.getReplacementName(oldName);  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName;  newName  =  names.getReplacementName(oldName);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName;  newName  =  names.getReplacementName(oldName);  }	  return    oldName;    newName    =    names.getReplacementName(oldName);    	non-compiled	[CE]  unreachable  statement	54	None	replace
1637	[BUG]  [BUGGY]  return  oldName;  newName  =  names.getReplacementName(oldName,  newName);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  newName  =  names.getReplacementName(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  newName  =  names.getReplacementName(oldName,  newName);	  return    oldName;    newName    =    names.getReplacementName(oldName);    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	54	None	replace
1638	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  String  newName  =  oldName.toLowerCase()  +  nameStack.peek();  [CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  nameStack.peek();  String  newName  =  oldName.toLowerCase()  +  nameStack.peek();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName.toLowerCase()    +    nameStack.peek();    String  newName  =  oldName.toLowerCase()  +  nameStack.peek();	  timeout    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  getReplacementName(String)	222	None	add
1639	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.lastIndexOf('.'));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.lastIndexOf('.'));	  return    oldName.trim();    timeout    	compilable	timeout	60	1	replace
1640	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.lastIndexOf('.'));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.lastIndexOf('.'));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.lastIndexOf('.'));	  return    oldName.trim();    timeout    	compilable	timeout	60	1	replace
1641	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.lastIndexOf( "$$ "));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.lastIndexOf( "$$ "));	  return    oldName.trim();    timeout    	compilable	timeout	60	1	replace
1642	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.lastIndexOf( "$$ "));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.lastIndexOf( "$$ "));  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.lastIndexOf( "$$ "));	  return    oldName.trim();    timeout    	compilable	timeout	60	1	replace
1643	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  new  String(oldName.toString());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  new  String(oldName.toString());	  return    oldName.toString();    timeout    	compilable	timeout	126	1	replace
1644	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  new  String(oldName.toString());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  new  String(oldName.toString());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  new  String(oldName.toString());	  return    oldName.toString();    timeout    	compilable	timeout	126	1	replace
1645	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  new  Name(oldName.toString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  new  Name(oldName.toString());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  new  Name(oldName.toString());	  return    oldName.toString();    timeout    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1646	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  -  5);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.substring(0,  oldName.length()  -  5);	  return    newName.substring(0,    oldName.length());    timeout    	compilable	timeout	2	1	replace
1647	[BUG]  [BUGGY]  return  newName.substring(0,  oldName.length()  -  5);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  oldName.length()  -  5);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  oldName.length()  -  5);	  return    newName.substring(0,    oldName.length());    timeout    	compilable	timeout	2	1	replace
1648	[BUG]  [BUGGY]  name  =  oldName.substring(0,  newName.length());  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  name  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	name  =  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  name	213	None	replace
1649	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	compilable	timeout	213	1	replace
1650	[BUG]  [BUGGY]  newName  =  oldName.substring(0,  oldName.length());  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName.substring(0,  oldName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	compilable	timeout	213	1	replace
1651	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	compilable	timeout	213	1	replace
1652	[BUG]  [BUGGY]  newName  =  oldName.substring(0,  newName.length());  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  oldName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    String    newName    =    oldName.substring(0,    newName.length()    -    1);    	compilable	timeout	213	1	replace
1653	[BUG]  [BUGGY]  return  oldName  <  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName  <  null?  null  :  newName.substring(0,  oldName.length()  -  1);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName  <  null?  null  :  newName.substring(0,  oldName.length()  -  1);	  return    newName    <    null?    null    :    newName.substring(0,    oldName.length()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	224	None	replace
1654	[BUG]  [BUGGY]  return  oldName;  if(newName!=  null)  {  return  newName;  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName;  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName;  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    return    newName;    }    	non-compiled	[CE]  unreachable  statement	51	None	replace
1655	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName!=  null?  null  :  oldName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
1656	[BUG]  [BUGGY]  return  newName!=  null?  null  :  oldName.toLowerCase();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  null  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName!=  null?  null  :  oldName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
1657	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  null  :  oldName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
1658	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  oldName.toLowerCase();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  oldName.toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  null  :  oldName.toLowerCase();	  return    newName    <    null?    null    :    newName.toLowerCase();    	compilable	timeout	123	1	replace
1659	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  newName.substring(0,  newName.length());  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  String  oldName  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    String  oldName  =  newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	3	None	add
1660	[BUG]  [BUGGY]  return  oldName.substring(0,  newName.length());  newName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.substring(0,  newName.length());  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.substring(0,    newName.length());    newName.substring(0,  newName.length());	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
1661	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	9	1	replace
1662	[BUG]  [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName.length()  ==  0)  {  return  newName.substring(0,  newName.length()  -  1);  }  else  {  return  newName.substring(0,  newName.length()  -  1);  }	  return    newName.substring(0,    newName.length()    -    1);    return    newName.substring(0,    newName.length()    -    1);    	compilable	timeout	9	1	replace
1663	[BUG]  [BUGGY]  return  newName;  newName  =  oldName.substring(0,  newName.length());  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName;  newName  =  oldName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName;  newName  =  oldName.substring(0,  newName.length());	  return    oldName;    newName    =    newName.substring(0,    newName.length()    -    1);    	non-compiled	[CE]  unreachable  statement	52	None	replace
1664	[BUG]  [BUGGY]  return  name.toLowerCase(newName,  nameStack.getDefault());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name.toLowerCase(newName,  nameStack.getDefault());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name.toLowerCase(newName,  nameStack.getDefault());	  return    name.toLowerCase(nameStack.getDefault());    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
1665	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1666	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1667	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1668	[BUG]  [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  ==  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length());  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1669	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  +  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  +  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1670	[BUG]  [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  +  1);  }  timeout  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  +  1);  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.length()  >  0)  {  return  newName.substring(0,  oldName.length()  -  1);  }  else  {  return  newName.substring(1,  oldName.length()  +  1);  }	  return    newName.substring(0,    oldName.length()    -    1);    if(oldName.length()    >    0)    {    return    newName.substring(0,    oldName.length()    -    1);    }    else    {    return    newName.substring(1,    oldName.length()    -    1);    }    	compilable	timeout	212	1	replace
1671	[BUG]  [BUGGY]  return  nameUsage.toString();  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameUsage.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameUsage.toString();	  return    name.toString();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	149	None	replace
1672	[BUG]  [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null  ||  oldName.length()  ==  0)  {  String  oldName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    newName;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1673	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( "- "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.trim().equals( "- "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	compilable	timeout	34	1	replace
1674	[BUG]  [BUGGY]  if(oldName.trim().equals( "- "))  {  return  newName.trim();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( "- "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.trim().equals( "- "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	compilable	timeout	34	1	replace
1675	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	compilable	timeout	34	1	replace
1676	[BUG]  [BUGGY]  if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.trim().equals( "- "))  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	compilable	timeout	34	1	replace
1677	[BUG]  [BUGGY]  result.append( "- ").append(oldName).toLowerCase();  [CE]  cannot  find  symbol  result  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  result.append( "- ").append(oldName).toLowerCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	result.append( "- ").append(oldName).toLowerCase();	  return    newName.trim();    if(newName.trim().equals(   "-   "))    {    return    newName.trim();    }    	non-compiled	[CE]  cannot  find  symbol  result	34	None	replace
1678	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  idPrefix);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  idPrefix);	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  idPrefix	132	None	replace
1679	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName,  0);  [CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName,  0);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName,  0);	          newName    =    names.getReplacementName(oldName);    return    newName;    	non-compiled	[CE]  method  getReplacementName  in  interface  Renamer  cannot  be  applied  to  given  types;	132	None	replace
1680	[BUG]  [BUGGY]  return  newName.toLowerCase();  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase();  nameStack.push(newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase();  nameStack.push(newName);	  return    newName.toLowerCase();    referenceStack.push(newName);    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	207	None	replace
1681	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  oldName!=  null?  newName  :  oldName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
1682	[BUG]  [BUGGY]  return  oldName!=  null?  newName  :  oldName.toString();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName!=  null?  newName  :  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  oldName!=  null?  newName  :  oldName.toString();	  return    newName!=    null?    oldName    :    newName.toString();    timeout    	compilable	timeout	200	1	replace
1683	[BUG]  [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName  ==  null)  {  return  oldName;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName  ==  null)  {  return  oldName;  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName!=  null)  {  String  oldName  =  names.getReplacementName(newName);  if(oldName  ==  null)  {  return  oldName;  }	  return    oldName;    if(oldName!=    null)    {    String    oldName    =    names.getReplacementName(newName);    if(oldName!=    null)    {    return    oldName;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1684	[BUG]  [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName  {  null?  null  :  newName;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  null  :  newName;  return  newName  {  null?  null  :  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName    ==    null?    null    :    newName;    return  newName  {  null?  null  :  newName;	  timeout    	non-compiled	[CE]  ';'  expected	121	None	add
1685	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	compilable	timeout	69	1	replace
1686	[BUG]  [BUGGY]  if(newName!=  null)  {  return  oldName.toLowerCase();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(newName!=  null)  {  return  oldName.toLowerCase();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(newName!=  null)  {  return  oldName.toLowerCase();  }	  return    newName.toLowerCase();    String    newName    =    names.getReplacementName(oldName);    if(newName!=    null)    {    return    oldName.toLowerCase();    }    	compilable	timeout	69	1	replace
1687	[BUG]  [BUGGY]  return  originalName.substring(0,  newName.length());  [CE]  cannot  find  symbol  originalName  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  originalName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  originalName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    2);    return    oldName.substring(0,    newName.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  originalName	39	None	replace
1688	[BUG]  [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName!=  null?  labels.toString()  :  oldName;  [CE]  cannot  find  symbol  labels  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName!=  null?  names.toString()  :  oldName;  return  newName!=  null?  labels.toString()  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    newName!=    null?    names.toString()    :    oldName;    return  newName!=  null?  labels.toString()  :  oldName;	  timeout    	non-compiled	[CE]  cannot  find  symbol  labels	106	None	add
1689	[BUG]  [BUGGY]  return  nameStack.replace(oldName,  newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  nameStack.replace(oldName,  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  nameStack.replace(oldName,  newName);	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
1690	[BUG]  [BUGGY]  return  newName.replace(oldName,  nameStack.peek(),  newName);  [CE]  no  suitable  method  found  for  replace(String,Renamer,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.replace(oldName,  nameStack.peek(),  newName);  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.replace(oldName,  nameStack.peek(),  newName);	  return    newName.replace(oldName,    nameStack.peek());    	non-compiled	[CE]  no  suitable  method  found  for  replace(String,Renamer,String)	225	None	replace
1691	[BUG]  [BUGGY]  renamer.replaceChild(name,  newName);  return  oldName;  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(name,  newName);  return  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(name,  newName);  return  oldName;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  name	196	None	replace
1692	[BUG]  [BUGGY]  renamer.replaceChild(oldName,  newName);  return  name;  [CE]  cannot  find  symbol  renamer  [FE]                              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  renamer.replaceChild(oldName,  newName);  return  name;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	renamer.replaceChild(oldName,  newName);  return  name;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  cannot  find  symbol  renamer	196	None	replace
1693	[BUG]  [BUGGY]  Renamer  names  =  names.replaceChild(oldName,  newName);  return  names;  [CE]  variable  names  is  already  defined  in  method  getReplacementName(String)  [FE]                                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  Renamer  names  =  names.replaceChild(oldName,  newName);  return  names;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	Renamer  names  =  names.replaceChild(oldName,  newName);  return  names;	  renamer.replaceChild(oldName,    newName);    return    newName;    	non-compiled	[CE]  variable  names  is  already  defined  in  method  getReplacementName(String)	196	None	replace
1694	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.toString()!=  null)  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.toString()!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.toString()!=  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
1695	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.toString()  ==  null)  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.toString()  ==  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.toString()  ==  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
1696	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName!=  null)  {  return  oldName.toString();  }  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName!=  null)  {  return  oldName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName!=  null)  {  return  oldName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
1697	[BUG]  [BUGGY]  return  oldName.toString();  if(oldName.toString()!=  null)  {  return  newName.toString();  }  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  if(oldName.toString()!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    if(oldName.toString()!=  null)  {  return  newName.toString();  }	  timeout    	non-compiled	[CE]  unreachable  statement	125	None	add
1698	[BUG]  [BUGGY]  return  oldName.toString();  String  oldName  =  newName.toString();  return  oldName.toString();  [CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)  [FE]                          AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  oldName.toString();  String  oldName  =  newName.toString();  return  oldName.toString();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return    oldName.toString();    String  oldName  =  newName.toString();  return  oldName.toString();	  timeout    	non-compiled	[CE]  variable  oldName  is  already  defined  in  method  getReplacementName(String)	125	None	add
1699	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( " "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.trim().equals( " "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	compilable	timeout	31	1	replace
1700	[BUG]  [BUGGY]  if(oldName.trim().equals( " "))  {  return  newName.trim();  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( " "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.trim().equals( " "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	compilable	timeout	31	1	replace
1701	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( "* "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.trim().equals( "* "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	compilable	timeout	31	1	replace
1702	[BUG]  [BUGGY]  if(oldName.trim().equals( "* "))  {  return  newName.trim();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( "* "))  {  return  newName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.trim().equals( "* "))  {  return  newName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	compilable	timeout	31	1	replace
1703	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( " "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	if(oldName.trim().equals( " "))  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	compilable	timeout	31	1	replace
1704	[BUG]  [BUGGY]  if(oldName.trim().equals( " "))  {  return  oldName.trim();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  if(oldName.trim().equals( " "))  {  return  oldName.trim();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	if(oldName.trim().equals( " "))  {  return  oldName.trim();  }	  return    newName.trim();    if(newName.trim().equals(   "   "))    {    return    newName.trim();    }    	compilable	timeout	31	1	replace
1705	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null?  oldName  :  newName.trim();	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
1706	[BUG]  [BUGGY]  return  newName  ==  null?  oldName  :  newName.trim();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null?  oldName  :  newName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null?  oldName  :  newName.trim();	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
1707	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null  ||  oldName.length()  ==  0?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName  ==  null  ||  oldName.length()  ==  0?  newName  :  oldName;	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
1708	[BUG]  [BUGGY]  return  newName  ==  null  ||  oldName.length()  ==  0?  newName  :  oldName;  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName  ==  null  ||  oldName.length()  ==  0?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName  ==  null  ||  oldName.length()  ==  0?  newName  :  oldName;	  return    newName    ==    null?    oldName    :    newName;    timeout    	compilable	timeout	71	1	replace
1709	[BUG]  [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  newName  =  newName.substring(0,  newName.length());  return  newName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1710	[BUG]  [BUGGY]  return  newName.substring(0,  newName.length());  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.substring(0,  newName.length());  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.substring(0,  newName.length());  }	  return    newName.substring(0,    newName.length()    -    2);    return    newName.substring(0,    newName.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1711	[BUG]  [BUGGY]  return  newName.trim()  +  names.substring(0,  newName.length());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  names.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  names.substring(0,  newName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
1712	[BUG]  [BUGGY]  return  newName.trim()  +  names.substring(0,  oldName.length());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.trim()  +  names.substring(0,  oldName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.trim()  +  names.substring(0,  oldName.length());	  return    newName.trim()    +    oldName.substring(0,    newName.length()    -    1);    timeout    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
1713	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return(newName  ==  null)?  null  :  oldName.trim();	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
1714	[BUG]  [BUGGY]  return(newName  ==  null)?  null  :  oldName.trim();  timeout  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return(newName  ==  null)?  null  :  oldName.trim();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return(newName  ==  null)?  null  :  oldName.trim();	  return(newName    ==    null)?    null    :    oldName;    timeout    	compilable	timeout	27	1	replace
1715	[BUG]  [BUGGY]  return  name  ==  null?  newName  :  oldName;  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  name  ==  null?  newName  :  oldName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  name  ==  null?  newName  :  oldName;	  return    oldName    ==    null?    newName    :    newName;    timeout    	non-compiled	[CE]  cannot  find  symbol  name	165	None	replace
1716	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	return  newName.toLowerCase()  +  oldName.toUpperCase();	  return    newName.toLowerCase();    return    newName.toUpperCase();    	compilable	timeout	206	1	replace
1717	[BUG]  [BUGGY]  return  newName.toLowerCase()  +  oldName.toUpperCase();  timeout  [FE]              AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  newName.toLowerCase()  +  oldName.toUpperCase();  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  newName.toLowerCase()  +  oldName.toUpperCase();	  return    newName.toLowerCase();    return    newName.toUpperCase();    	compilable	timeout	206	1	replace
1718	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	compilable	timeout	137	1	replace
1719	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName  ==  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	compilable	timeout	137	1	replace
1720	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	compilable	timeout	137	1	replace
1721	[BUG]  [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  timeout  [FE]                        AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	newName  =  names.getReplacementName(oldName);  if(newName!=  null)  {  return  newName.toString();  }	  return    newName.toString();    String    newName    =    names.getReplacementName(oldName);    if(newName    ==    null)    {    return    newName.toString();    }    	compilable	timeout	137	1	replace
1722	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  result  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	String  result  =  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	compilable	timeout	16	1	replace
1723	[BUG]  [BUGGY]  String  result  =  newName.substring(0,  newName.length());  timeout  [FE]                            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  String  result  =  newName.substring(0,  newName.length());  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	String  result  =  newName.substring(0,  newName.length());	  return    newName.substring(0,    newName.length()    -    1);    result.substring(0,    newName.length()    -    1);    	compilable	timeout	16	1	replace
1724	[BUG]  [BUGGY]  return  names.toLowerCase()  +  newName;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  String  getReplacementName(String  oldName)  {  for  (Renamer  names  :  nameStack)  {  String  newName  =  names.getReplacementName(oldName);  if  (newName  !=  null)  {      [BUGGY]  return  names.toLowerCase()  +  newName;  [BUGGY]      }  }  return  null;  }  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  getReplacementName  [RETURN_TYPE]  String  String  oldName  [VARIABLES]  Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  oldName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	return  names.toLowerCase()  +  newName;	  return    names.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
