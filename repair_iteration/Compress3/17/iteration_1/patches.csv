bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  entry.writeEntryHeader(currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(currBytes,  recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBytes,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currBytes);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(currName,  recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeRecordHeader(recordBuf,  currBytes);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currBytes);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
22	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  buffer.writeRecord(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
23	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
28	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
30	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
31	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
32	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
33	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
34	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecordHeader(recordBuf);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
35	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
36	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
37	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
41	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
42	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
43	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
44	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
45	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
46	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
49	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
50	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
51	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
52	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
54	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeRecordHeader(currName,  recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeEntryHeader(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
70	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
72	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
73	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
74	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
75	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
76	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
77	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
78	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
79	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
80	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
81	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
82	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
83	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
84	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
85	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
86	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
87	[BUG]  [BUGGY]  entry.copyCurrentEntry(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currName);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
88	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
89	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
90	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
91	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(assemBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(recordBuf);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
93	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(recordBuf,  currBytes);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  currBytes);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
94	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeRecordHeader(recordBuf,  currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currName);	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(assemBuf,  currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currName);	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  buffer);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  buffer);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currName,  buffer);	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
97	[BUG]  [BUGGY]  entry.writeRecord(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeRecord(recordBuf,  currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecord(recordBuf,  currName);	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
98	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currName,  assemLen);	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
99	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeRecordHeader(recordBuf,  currSize);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currSize);	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
100	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(recordBuf,  currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  currName);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
101	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(recordBuf,  currSize);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  currSize);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
102	[BUG]  [BUGGY]  entry.copyCurrentEntry(buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(buffer);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(buffer);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
103	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
104	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
105	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
106	[BUG]  [BUGGY]  entry.writeArchiveEntry(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeArchiveEntry(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeArchiveEntry(recordBuf);	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
107	[BUG]  [BUGGY]  entry.writeName(currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeName(currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeName(currName);	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
108	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
109	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
110	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
111	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
112	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
113	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
114	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
115	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
117	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
118	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
119	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
120	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
121	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
122	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
123	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
124	[BUG]  [BUGGY]  entry.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.close();  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.close();	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
125	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry!=  null)  {  entry.closeArchiveEntry();  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.closeArchiveEntry();  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
126	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
127	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
128	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
129	[BUG]  [BUGGY]  if(closed)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeEntryHeader(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
130	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
131	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
132	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
133	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
134	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
135	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
136	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
137	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  ];  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  ];  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  ];	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
138	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
139	[BUG]  [BUGGY]  entry.writeEntryHeader(currBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(currBuf,  recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBuf,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
140	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
141	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  buffer);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  buffer);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currBytes,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
142	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
143	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
144	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
145	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  entry.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
146	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  entry.closeArchiveEntry();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
147	[BUG]  [BUGGY]  entry.writeEntryHeader(currBytes);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(currBytes);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBytes);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
148	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHeader(recordBuf,  assemBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  assemBuf);	  entry.writeEntryHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
149	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
150	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
151	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  recordBuf.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  recordBuf.entrySet().iterator().next();  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  recordBuf.entrySet().iterator().next();	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
152	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordSize);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  recordSize);	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
153	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf));  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(recordBuf));	  entry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
154	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
155	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.writeEntryHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
156	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
157	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
158	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
159	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
160	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  entry.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
161	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
162	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
163	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  ];  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  ];  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  ];	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
164	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
165	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.size()  -  1;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.size()  -  1;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  recordBuf.size()  -  1;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
166	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
167	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
168	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
169	[BUG]  [BUGGY]  entry.writeEntryName(currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryName(currName);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryName(currName);	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
170	[BUG]  [BUGGY]  entry.writeEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntry(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntry(recordBuf);	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
171	[BUG]  [BUGGY]  entry.writeEntryName(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryName(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryName(recordBuf);	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
172	[BUG]  [BUGGY]  entry.writeEntryHandler(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  entry.writeEntryHandler(recordBuf);  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHandler(recordBuf);	  entry.writeEntryHeader(currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
173	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }    [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]    buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
