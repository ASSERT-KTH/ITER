bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
2	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
3	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
4	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
5	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
6	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
7	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
8	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
9	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
10	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(currName);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
11	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  currName);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
12	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(buffer);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(buffer);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
13	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  buffer);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  buffer);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
14	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(entry);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(entry);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(entry);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
15	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  currBytes);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
16	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  0,  recordSize);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
17	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
18	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
19	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
20	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordHader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
21	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
22	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
23	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
24	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
25	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryName(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryName(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryName(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
26	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
27	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
28	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryName(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryName(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryName(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
29	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordName(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
30	[BUG]  [BUGGY]  Entry  <  K,  V>  currName  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  currName  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  currName  =  entry.getValue();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
31	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
32	[BUG]  [BUGGY]  Entry  <?>  curr  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <?>  curr  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <?>  curr  =  entry.getValue();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
33	[BUG]  [BUGGY]  Entry  <  K,  V>  curr  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  curr  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  curr  =  entry.getValue();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
34	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecordHeader(recordBuf);	  if(!closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
35	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);	  if(!closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
36	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeEntryHeader(recordBuf);	  if(!closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
37	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  }	  if(!closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
38	[BUG]  [BUGGY]  safely())  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  safely())  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	safely())  {  buffer.writeEntryHeader(recordBuf);  }	  if(!closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
39	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);	  if(!closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
40	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
41	[BUG]  [BUGGY]  archiveEntry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.closeArchiveEntry();	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
42	[BUG]  [BUGGY]  final  TarArchiveEntry  entry  =  entry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  TarArchiveEntry  entry  =  entry.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  TarArchiveEntry  entry  =  entry.closeArchiveEntry();	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
43	[BUG]  [BUGGY]  ArchiveEntry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  ArchiveEntry.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	ArchiveEntry.closeArchiveEntry();	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
44	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntry(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
45	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
46	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
47	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
48	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
49	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntry(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
50	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntry(recordBuf);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
51	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
52	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
54	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
55	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
56	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
57	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
59	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
60	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
61	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
62	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
63	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
64	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
65	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
66	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
67	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
68	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
69	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  recordBuf);	  entry.writeEntryHeader(currBytes,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  entry.writeRecordHeader(currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currBytes,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currBytes,  recordBuf);	  entry.writeEntryHeader(currBytes,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  entry.writeEntryHeader(currBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBuf,  currBytes);	  entry.writeEntryHeader(currBytes,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
72	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currBytes,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
73	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  currBytes,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  currBytes,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
74	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  recordBuf,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
75	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
76	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes,  assemLen);  }	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
77	[BUG]  [BUGGY]  entry.writeEntryHeader(currBytes,  recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBytes,  recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBytes,  recordBuf,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
78	[BUG]  [BUGGY]  entry.writeEntryHeader(currBuf,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBuf,  currBytes,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBuf,  currBytes,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
79	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
80	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
81	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
82	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
83	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
84	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
85	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
86	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
87	[BUG]  [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
88	[BUG]  [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
89	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
90	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
91	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
92	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  entry.writeRecord(currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecord(currName,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecord(currName,  recordBuf);	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
94	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(recordBuf,  currName);  }	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
95	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
96	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
97	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecord(recordBuf,  currName);  }	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
98	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  currName);  }	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
99	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
100	[BUG]  [BUGGY]  entry.writeEntryHeader(currBytes,  assemBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBytes,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBytes,  assemBuf);	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
101	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  entry.writeEntryHeader(currBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBuf,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBuf,  assemBuf);	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
103	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  currBytes);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  currBytes);	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
104	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  assemBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  assemBuf);	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
105	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(assemBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.writeEntryHeader(assemBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
106	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }	  entry.writeRecordHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
107	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
108	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }	  entry.writeRecordHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
109	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
110	[BUG]  [BUGGY]  final  String  currName  =  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  String  currName  =  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  String  currName  =  recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
111	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
112	[BUG]  [BUGGY]  trackBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  trackBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	trackBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
113	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
115	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
116	[BUG]  [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
117	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
118	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
119	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
120	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
121	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
122	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
123	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
124	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
125	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
126	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
127	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordEntryHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
128	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(currName    ==    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
129	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
130	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(currName    ==    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
131	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(currName    ==    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
132	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
133	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
134	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
135	[BUG]  [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
136	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
137	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
138	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(currBytes);  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
139	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
140	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
141	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
142	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
143	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
144	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
145	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
146	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
147	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
149	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
150	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
151	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
153	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
154	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
155	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
156	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
157	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
159	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
160	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
161	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
162	[BUG]  [BUGGY]  if(!closed)  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
163	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
164	[BUG]  [BUGGY]  if(!closed)  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
165	[BUG]  [BUGGY]  if(currBytes!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
166	[BUG]  [BUGGY]  if(currBytes!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
167	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
168	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
169	[BUG]  [BUGGY]  final  String  currName  =  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  String  currName  =  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  String  currName  =  recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
170	[BUG]  [BUGGY]  this.recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
171	[BUG]  [BUGGY]  RecordBuffer  buffer  =  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  RecordBuffer  buffer  =  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	RecordBuffer  buffer  =  recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
172	[BUG]  [BUGGY]  this.archiveEntry.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
173	[BUG]  [BUGGY]  RecordBuffer  buffer  =  recordBuf.writeRecordHeader(currName);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  RecordBuffer  buffer  =  recordBuf.writeRecordHeader(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	RecordBuffer  buffer  =  recordBuf.writeRecordHeader(currName);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
174	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
175	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
176	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
177	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
178	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
179	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
180	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
181	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
182	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
183	[BUG]  [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
184	[BUG]  [BUGGY]  if(currBytes  >=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  >=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  >=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
185	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
186	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
187	[BUG]  [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
188	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
189	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_ERROR)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_ERROR)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_ERROR)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
190	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
192	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
193	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
194	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
195	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
196	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
198	[BUG]  [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  recordBuf.writeRecord(recordBuf);	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
199	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
200	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
201	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
202	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
203	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
204	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(currName);  }	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
205	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(longFileMode);  }	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
206	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  buffer);  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
207	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
208	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
209	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
210	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
211	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
212	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
213	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
214	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
215	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
216	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
217	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
218	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
219	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.isDirectory())  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.isDirectory())  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.isDirectory())  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
220	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.canReadEntry())  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.canReadEntry())  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.canReadEntry())  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
221	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.isEnabled())  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.isEnabled())  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.isEnabled())  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
222	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
223	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
224	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
225	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
226	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
227	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
229	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
231	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
232	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
233	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  recordBuf.length)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  recordBuf.length)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  currName.length()  ==  recordBuf.length)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
234	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
235	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  buffer.writeEntryHeader(recordBuf,  currBytes);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
236	[BUG]  [BUGGY]  Entry.writeEntryHeader(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry.writeEntryHeader(recordBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry.writeEntryHeader(recordBuf,  currBytes);	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
237	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  currBuf.writeEntryHeader(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  currBuf.writeEntryHeader(recordBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  currBuf.writeEntryHeader(recordBuf,  currBytes);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
238	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
239	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
240	[BUG]  [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
241	[BUG]  [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
242	[BUG]  [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
243	[BUG]  [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
244	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
245	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
246	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
247	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
248	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  recordBuf.length  -  1;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  recordBuf.length  -  1;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  recordBuf.length  -  1;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
251	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);	  if(!closed)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
252	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
253	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
254	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
255	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
256	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
257	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
258	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
259	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
260	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecordBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecordBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecordBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
261	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
262	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
263	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
264	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
265	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
266	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
267	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
269	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
270	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
271	[BUG]  [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
272	[BUG]  [BUGGY]  while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
273	[BUG]  [BUGGY]  if(!closed)  {  entry.writeArchiveEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeArchiveEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeArchiveEntry(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
274	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
275	[BUG]  [BUGGY]  if(!closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
276	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
277	[BUG]  [BUGGY]  if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
278	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeArchiveEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeArchiveEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeArchiveEntry(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
279	[BUG]  [BUGGY]  if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeArchiveEntry(recordBuf);  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
280	[BUG]  [BUGGY]  safely())  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  safely())  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	safely())  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
281	[BUG]  [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
282	[BUG]  [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
283	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
284	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
285	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
286	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
287	[BUG]  [BUGGY]  Entry  <  K,  V>  currName  =  entry.getName();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  currName  =  entry.getName();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  currName  =  entry.getName();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
288	[BUG]  [BUGGY]  Entry  <  K,  V>  currName  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  currName  =  entry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  currName  =  entry.getEntry();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
289	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
290	[BUG]  [BUGGY]  while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecordHeader(recordBuf);	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
291	[BUG]  [BUGGY]  while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecordHeader(recordBuf);	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
292	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.entry();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.entry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  recordBuf.entry();	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
293	[BUG]  [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.get(longFileMode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.get(longFileMode);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.get(longFileMode);	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
294	[BUG]  [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.getEntry(longFileMode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.getEntry(longFileMode);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.getEntry(longFileMode);	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
295	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
296	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
297	[BUG]  [BUGGY]  entry.copyCurrentEntry(currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currName,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currName,  recordBuf);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
298	[BUG]  [BUGGY]  entry.copyCurrentEntry(currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currBytes,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currBytes,  recordBuf);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
299	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  currSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  currSize);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
300	[BUG]  [BUGGY]  entry.copyCurrentEntry(currBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currBuf,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currBuf,  recordSize);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
301	[BUG]  [BUGGY]  entry.copyCurrentEntry(currSize,  recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currSize,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currSize,  recordBuf);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
302	[BUG]  [BUGGY]  entry.copyCurrentEntry(curr,  recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(curr,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(curr,  recordBuf);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
303	[BUG]  [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
304	[BUG]  [BUGGY]  if(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
305	[BUG]  [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
306	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
307	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
308	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  aughtExceptionHandler.handleMissingRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	aughtExceptionHandler.handleMissingRecord(recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
309	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  buffer);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  recordBuf,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
310	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  currBytes,  buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  currBytes,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  currBytes,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
311	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  buffer);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currBytes,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
312	[BUG]  [BUGGY]  entry.writeEntryHeader(buffer,  currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(buffer,  currBytes,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(buffer,  currBytes,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
313	[BUG]  [BUGGY]  entry.writeEntryHeader(buffer,  currBytes);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(buffer,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(buffer,  currBytes);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
314	[BUG]  [BUGGY]  entry.writeEntryHeader(currBuf,  currBytes,  buffer);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBuf,  currBytes,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBuf,  currBytes,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
315	[BUG]  [BUGGY]  Entry  <?>  entry  =  recordBuf.getEntry();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <?>  entry  =  recordBuf.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <?>  entry  =  recordBuf.getEntry();	  if(recordBuf!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
316	[BUG]  [BUGGY]  Entry  <?>  entry  =  recordBuf.entrySet();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <?>  entry  =  recordBuf.entrySet();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <?>  entry  =  recordBuf.entrySet();	  if(recordBuf!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
317	[BUG]  [BUGGY]  after(recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
318	[BUG]  [BUGGY]  safely())  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  safely())  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	safely())  {  buffer.writeRecordHeader(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
319	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecordHeader(recordBuf);	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
320	[BUG]  [BUGGY]  while(closed)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  buffer.writeRecordHeader(recordBuf);	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
321	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
322	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
323	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
324	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
325	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  currName);  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
326	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecord(recordBuf);	  if(closed)    {    entry.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
327	[BUG]  [BUGGY]  after(recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  }	  if(closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
328	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
329	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
330	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(REcordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(REcordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(REcordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
331	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
332	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  1];  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  1];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  1];	  byte[]    recordBuf    =    new    byte[LONGFILE_ERROR.length()    ];    	non-compiled	[CE]  <identifier>  expected	137	None	replace
333	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[length()  ];  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[length()  ];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[length()  ];	  byte[]    recordBuf    =    new    byte[LONGFILE_ERROR.length()    ];    	non-compiled	[CE]  <identifier>  expected	137	None	replace
334	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[lONGFILE_GNU.length()  ];  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[lONGFILE_GNU.length()  ];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[lONGFILE_GNU.length()  ];	  byte[]    recordBuf    =    new    byte[LONGFILE_ERROR.length()    ];    	non-compiled	[CE]  <identifier>  expected	137	None	replace
335	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[longFileMode.length()  ];  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[longFileMode.length()  ];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[longFileMode.length()  ];	  byte[]    recordBuf    =    new    byte[LONGFILE_ERROR.length()    ];    	non-compiled	[CE]  <identifier>  expected	137	None	replace
336	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  2];  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  2];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  2];	  byte[]    recordBuf    =    new    byte[LONGFILE_ERROR.length()    ];    	non-compiled	[CE]  <identifier>  expected	137	None	replace
337	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
338	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.close();  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
339	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
340	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive "))  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().equals( "Archive "))  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().equals( "Archive "))  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
341	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(longFileMode);  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
342	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isArchive())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
343	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
344	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
345	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
346	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordBytes(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordBytes(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
347	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordBytes(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordBytes(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
348	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordBytes(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordBytes(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
349	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordBytes();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordBytes();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordBytes();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
350	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
351	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
352	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
353	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
354	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
355	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
356	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName,  recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName,  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName,  recordBuf);  }	  entry.writeEntryHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
357	[BUG]  [BUGGY]  if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
358	[BUG]  [BUGGY]  if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
359	[BUG]  [BUGGY]  entry.writeRecordHeader(currBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currBuf,  recordBuf);	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
360	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  currBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currBuf);	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
361	[BUG]  [BUGGY]  if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBuf!=  null)  {  entry.writeEntryHeader(currBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
362	[BUG]  [BUGGY]  if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	167	None	replace
363	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	167	None	replace
364	[BUG]  [BUGGY]  Entry.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry.writeEntryHeader(recordBuf);	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	167	None	replace
365	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
366	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
367	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
368	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
369	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
370	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName,  recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName,  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(currName,  recordBuf);  }	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
371	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(currName,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
372	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  recordBuf,  assemLen);	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
373	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  currBytes);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  currBytes);	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
374	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  recordBuf,  buffer);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  recordBuf,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  recordBuf,  buffer);	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
375	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
376	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
377	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
378	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
379	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
380	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
381	[BUG]  [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
382	[BUG]  [BUGGY]  while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
383	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }	  if(recordBuf!=    null)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
384	[BUG]  [BUGGY]  ter.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  ter.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	ter.writeRecordHeader(recordBuf);	  if(recordBuf!=    null)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
385	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
386	[BUG]  [BUGGY]  if(currBytes!=  recordBuf)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  recordBuf)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  recordBuf)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
387	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }	  entry.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
388	[BUG]  [BUGGY]  if(currBytes!=  recordBuf)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  recordBuf)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  recordBuf)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }	  entry.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
389	[BUG]  [BUGGY]  entry.writeRecordHeader(assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(assemBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(assemBuf,  currBytes);	  entry.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
390	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
391	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
392	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
393	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
394	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
395	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
396	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
397	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
398	[BUG]  [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
399	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
400	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry!=  null)  {  entry.closeArchiveEntry();  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
401	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
402	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
403	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
404	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
405	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
406	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
407	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
408	[BUG]  [BUGGY]  if(currSize!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currSize!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currSize!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
409	[BUG]  [BUGGY]  if(currSize!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currSize!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currSize!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currSize);  }	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
410	[BUG]  [BUGGY]  entry.writeRecordHeader(currSize,  recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currSize,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currSize,  recordBuf);	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
411	[BUG]  [BUGGY]  entry.writeRecordHeader(currBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currBuf,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currBuf,  recordSize);	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
412	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
413	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(assemBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
414	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
415	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(assemBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  assemBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
416	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
417	[BUG]  [BUGGY]  entry.writeRecordHeader(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(assemBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(assemBuf,  recordBuf);	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
418	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(currName);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
419	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }	  entry.copyCurrentEntry(currName);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
420	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.copyCurrentEntry(currName);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
421	[BUG]  [BUGGY]  entry.copyCurrentEntry(currName,  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currName,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currName,  recordSize);	  entry.copyCurrentEntry(currName);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
422	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  currBytes);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
423	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  blockSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(recordBuf,  blockSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  blockSize);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
424	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  assemLen);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
425	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
426	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
427	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
428	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode  ==  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode  ==  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
429	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_ERROR)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
430	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
431	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
432	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
433	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
434	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
435	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
436	[BUG]  [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
437	[BUG]  [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
438	[BUG]  [BUGGY]  if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
439	[BUG]  [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
440	[BUG]  [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
441	[BUG]  [BUGGY]  if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
442	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
443	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
444	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
445	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
446	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
447	[BUG]  [BUGGY]  while(!closed)  {  assemBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  assemBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  assemBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
448	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(assemBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
449	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
450	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
451	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
452	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
453	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
454	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
455	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
456	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
457	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
458	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
459	[BUG]  [BUGGY]  if(!closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isArchive())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
460	[BUG]  [BUGGY]  if(!closed)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.closeArchiveEntry();  }	  if(entry.isArchive())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
461	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
462	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
463	[BUG]  [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
464	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
465	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
466	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
467	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
468	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
469	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
470	[BUG]  [BUGGY]  while(currBytes!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currBytes!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currBytes!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
471	[BUG]  [BUGGY]  ArchiveEntry  <  K,  V>  entry  =  entry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  ArchiveEntry  <  K,  V>  entry  =  entry.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	ArchiveEntry  <  K,  V>  entry  =  entry.closeArchiveEntry();	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
472	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  entry.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  entry.closeArchiveEntry();	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
473	[BUG]  [BUGGY]  ArchiveEntry  <  K,  V>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  ArchiveEntry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	ArchiveEntry  <  K,  V>  entry  =  entry.getValue();	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
474	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
475	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
476	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  currName  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  currName  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
477	[BUG]  [BUGGY]  if(currName  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
478	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
479	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
480	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  1];  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  1];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  1];	  byte[]    recordBuf    =    new    byte[LONGFILE_GNU.length()    ];    	non-compiled	[CE]  <identifier>  expected	163	None	replace
481	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  2];  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  2];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  2];	  byte[]    recordBuf    =    new    byte[LONGFILE_GNU.length()    ];    	non-compiled	[CE]  <identifier>  expected	163	None	replace
482	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  4];  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  4];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  4];	  byte[]    recordBuf    =    new    byte[LONGFILE_GNU.length()    ];    	non-compiled	[CE]  <identifier>  expected	163	None	replace
483	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
484	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
485	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
486	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
487	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
488	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
489	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
490	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
491	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
492	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
493	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
494	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
495	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
496	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
497	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
498	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(assemBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
499	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  assemBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  assemBuf);	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
500	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.copyCurrentEntry(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.copyCurrentEntry(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.copyCurrentEntry(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
501	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.copyCurrentEntry(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.copyCurrentEntry(recordBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.copyCurrentEntry(recordBuf,  currBytes);  }	  entry.copyCurrentEntry(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
502	[BUG]  [BUGGY]  entry.copyCurrentEntry(currBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currBuf,  recordBuf);	  entry.copyCurrentEntry(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
503	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
504	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
505	[BUG]  [BUGGY]  while(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
506	[BUG]  [BUGGY]  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
507	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
508	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
509	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
510	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
511	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
512	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
513	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(new  File(recordBuf));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(new  File(recordBuf));  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(new  File(recordBuf));  }	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
514	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(new  File(recordBuf));  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(new  File(recordBuf));  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(new  File(recordBuf));  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
515	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  buffer);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(recordBuf),  buffer);	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
516	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(assemBuf));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(assemBuf));  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(assemBuf));	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
517	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(currName));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(currName));  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(currName));	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
518	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(longFileMode));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(longFileMode));  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(longFileMode));	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
519	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(new  File(recordBuf));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(new  File(recordBuf));  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(new  File(recordBuf));	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
520	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
521	[BUG]  [BUGGY]  final  Entry  <  K,  V>  entry  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  Entry  <  K,  V>  entry  =  entry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  Entry  <  K,  V>  entry  =  entry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
522	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getEntry();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  this.archiveEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
523	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getValue();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
524	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  buffer.getEntry();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  buffer.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  buffer.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
525	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(assemBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
526	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
527	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf,  currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
528	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf,  assemLen);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
529	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf,  assemBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
530	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(currName);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
531	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf,  currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(recordBuf,  currName);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
532	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(entry);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(entry);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(entry);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
533	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(assemBuf);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(assemBuf);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
534	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(recordBuf,  currBytes);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
535	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(assemBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(assemBuf,  recordBuf);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
536	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(buffer);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(buffer);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
537	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	150	None	replace
538	[BUG]  [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
539	[BUG]  [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
540	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
541	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
542	[BUG]  [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
543	[BUG]  [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
544	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
545	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
546	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.isDirectory())  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.isDirectory())  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.isDirectory())  {  recordBuf.writeEntryHeader(recordBuf);	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
547	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
548	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
549	[BUG]  [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
550	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(fileName);  fileName  =  entry.getName();  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(fileName);  fileName  =  entry.getName();  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(fileName);  fileName  =  entry.getName();  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
551	[BUG]  [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
552	[BUG]  [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
553	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
554	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
555	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
556	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
557	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
558	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
559	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }	  entry.copyCurrentEntry(assemBuf);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
560	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(assemBuf);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
561	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.copyCurrentEntry(assemBuf);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
562	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  entry.copyCurrentEntry(assemBuf);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
563	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf  =  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf  =  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf  =  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
564	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf  =  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf  =  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf  =  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
565	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
566	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
567	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
568	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf.length()  ==  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf.length()  ==  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf.length()  ==  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
569	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf.writeRecordHeader(recordBuf))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf.writeRecordHeader(recordBuf))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf.writeRecordHeader(recordBuf))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
570	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
571	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length()  >  0)  {  buffer.writeRecord(recordBuf);	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
572	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
573	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
574	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
575	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive- "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive- "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive- "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
576	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
577	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
578	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(buffer,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(buffer,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(buffer,  recordBuf);	  entry.copyCurrentEntry(buffer);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
579	[BUG]  [BUGGY]  entry.writeCurrentEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeCurrentEntry(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeCurrentEntry(recordBuf);	  entry.copyCurrentEntry(buffer);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
580	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
581	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
582	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
583	[BUG]  [BUGGY]  if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
584	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
585	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
586	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
587	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
588	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
589	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
590	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
591	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
592	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
593	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
594	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
595	[BUG]  [BUGGY]  while(recordBuf!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(recordBuf!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(recordBuf!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
596	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
597	[BUG]  [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
598	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
599	[BUG]  [BUGGY]  if(!closed)  {  buffer.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
600	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  recordBuf.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  recordBuf.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  recordBuf.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
601	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
602	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
603	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
604	[BUG]  [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
605	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
606	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHandler(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
607	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
608	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
609	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
610	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
611	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
612	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHandler(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHandler(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHandler(recordBuf);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
613	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
614	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeName(currName);  }	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
615	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
616	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
617	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
618	[BUG]  [BUGGY]  entry.writeName(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeName(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeName(recordBuf);	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
619	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
620	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currName,  assemLen);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currName,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currName,  assemLen);	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
621	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
622	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  else  {  buffer.writeRecord(REcordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  else  {  buffer.writeRecord(REcordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  currName,  assemLen);  }  else  {  buffer.writeRecord(REcordBuf);  }	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
623	[BUG]  [BUGGY]  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
624	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
625	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
626	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
627	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  recordBuf.size();  i!=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  recordBuf.size();  i!=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  for(int  i  =  recordBuf.size();  i!=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
628	[BUG]  [BUGGY]  for(int  i  =  recordBuf.size();  i!=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  for(int  i  =  recordBuf.size();  i!=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	for(int  i  =  recordBuf.size();  i!=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
629	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.size();  i  >>  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.size();  i  >>  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  recordBuf.size();  i  >>  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
630	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  archiveEntry.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  archiveEntry.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  archiveEntry.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
631	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  assemBuf.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  assemBuf.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  assemBuf.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
632	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  nameBytes.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  nameBytes.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  nameBytes.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
633	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  records.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  records.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  records.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
634	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  recordsBuf.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  recordsBuf.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  recordsBuf.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
635	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  recordBuf.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  recordBuf.entrySet().iterator();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  recordBuf.entrySet().iterator();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
636	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
637	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
638	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
639	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
640	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
641	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
642	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf,  currBytes);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf,  currBytes);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryName(currName);  }  else  {  buffer.writeRecord(recordBuf,  currBytes);  }	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
643	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
644	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
645	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
646	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
647	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
648	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
649	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
650	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
651	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
652	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
653	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
654	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemLen);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemLen);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemLen);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
655	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
656	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
657	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
658	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
659	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
660	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
661	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
662	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
663	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
664	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
665	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
666	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
667	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
668	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  recordBuf.length)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  recordBuf.length)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  currName.length()  ==  recordBuf.length)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
669	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
670	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
671	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
672	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
673	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
674	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
675	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
676	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.entrySet();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.entrySet();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  recordBuf.entrySet();	  if(entry!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
677	[BUG]  [BUGGY]  final  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  Entry  <  K,  V>  entry  =  entry.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
678	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  this.archiveEntry.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
679	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  +  1;  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  +  1;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
680	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  entry.getKey();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
681	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
682	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
683	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
684	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
685	[BUG]  [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
686	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
687	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
688	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
689	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
690	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currBytes,  currSize);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
691	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currBytes,  buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  currBytes,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currBytes,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
692	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  assemBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currBytes,  assemBuf);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
693	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
694	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archivesEntry.getEntry();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  archivesEntry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  archivesEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
695	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
696	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
697	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode,  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode,  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode,  recordBuf);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
698	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
699	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  currBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currBuf);	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
700	[BUG]  [BUGGY]  entry.writeEntryHeader(currBuf,  recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBuf,  recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBuf,  recordBuf,  assemLen);	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
701	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
702	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
703	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
704	[BUG]  [BUGGY]  entry!=  null  &&  recordBuf.length  >  0)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry!=  null  &&  recordBuf.length  >  0)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry!=  null  &&  recordBuf.length  >  0)  {  entry.writeEntryHeader(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	150	None	replace
705	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeEntryHeader(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	150	None	replace
706	[BUG]  [BUGGY]  if(entry  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry  ==  null)  {  entry.writeEntryHeader(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	150	None	replace
707	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  archiveEntry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  archiveEntry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  archiveEntry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
708	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
709	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
710	[BUG]  [BUGGY]  entry.writeEntryHeader(buffer,  recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(buffer,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(buffer,  recordBuf);	  entry.writeEntryHeader(currBytes,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
711	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  archiveBuf.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  archiveBuf.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  archiveBuf.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
712	[BUG]  [BUGGY]  entry.writeEntryHeader(buffer,  currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(buffer,  currName,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(buffer,  currName,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
713	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  buffer);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
714	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  buffer,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  buffer,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currName,  buffer,  assemLen);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
715	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  buffer,  recordSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  currName,  buffer,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currName,  buffer,  recordSize);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
716	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currName,  buffer);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currName,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currName,  buffer);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
717	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  archiveEntry);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  archiveEntry);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  archiveEntry);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
718	[BUG]  [BUGGY]  if(closed  ||  recordBuf)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
719	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
720	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
721	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
722	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
723	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
724	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
725	[BUG]  [BUGGY]  if(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
726	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.copyRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf  =  buffer.copyRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  buffer.copyRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
727	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  recordLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  recordLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currBytes,  recordLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
728	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currBytes,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currBytes,  recordSize);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
729	[BUG]  [BUGGY]  entry.writeEntryHeader(buffer,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(buffer,  currBytes,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(buffer,  currBytes,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
730	[BUG]  [BUGGY]  entry.writeRecordName(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordName(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordName(recordBuf);	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
731	[BUG]  [BUGGY]  entry.writeRecordName(currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordName(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordName(currName);	  entry.writeEntryName(recordBuf);    	non-compiled	[CE]  <identifier>  expected	171	None	replace
732	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
733	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
734	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
735	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
736	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
737	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currName);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currName);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currName);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
738	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
739	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
740	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(re  RecordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(re  RecordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(re  RecordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
741	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
742	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
743	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
744	[BUG]  [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
745	[BUG]  [BUGGY]  entry.copyCurrentEntry(buffer,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(buffer,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(buffer,  recordBuf);	  entry.copyCurrentEntry(buffer);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
746	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  buffer);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(recordBuf,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  buffer);	  entry.copyCurrentEntry(buffer);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
747	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
748	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
749	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
750	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
751	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf  =  new  StringBuffer();  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf  =  new  StringBuffer();  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf  =  new  StringBuffer();  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
752	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
753	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
754	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
755	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryWrapperHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryWrapperHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryWrapperHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
756	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
757	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  recordBuf  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  recordBuf  +  1);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  recordBuf  +  1);	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
758	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  recordBuf,  0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  recordBuf,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  recordBuf,  0);	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
759	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  4];  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  4];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_ERROR.length()  +  4];	  byte[]    recordBuf    =    new    byte[LONGFILE_ERROR.length()    ];    	non-compiled	[CE]  <identifier>  expected	137	None	replace
760	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
761	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
762	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
763	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
764	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
765	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
766	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
767	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
768	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(buffer);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(buffer);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(buffer);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
769	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(getName());  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(getName());  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(getName());  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
770	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName()!=  null)  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName()!=  null)  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
771	[BUG]  [BUGGY]  if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
772	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
773	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currName,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  currName,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currName,  assemLen);	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
774	[BUG]  [BUGGY]  entry.writeEntryHeader(buffer,  currName,  assemLen);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(buffer,  currName,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(buffer,  currName,  assemLen);	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
775	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  assemLen);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  assemLen);	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
776	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
777	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
778	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
779	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
780	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
781	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
782	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
783	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
784	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
785	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
786	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
787	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
788	[BUG]  [BUGGY]  Entry  <  K,  V>  recordBuf  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  recordBuf  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  recordBuf  =  entry.getValue();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
789	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
790	[BUG]  [BUGGY]  Entry  <  K,  V>  recordBuf  =  entry.getRecordBuf();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  recordBuf  =  entry.getRecordBuf();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  recordBuf  =  entry.getRecordBuf();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
791	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  currName  =  archiveEntry.getName();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  currName  =  archiveEntry.getName();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  currName  =  archiveEntry.getName();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
792	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
793	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
794	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
795	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf,  0);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
796	[BUG]  [BUGGY]  buffer.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.closeArchiveEntry();	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
797	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf,  currSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
798	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
799	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
800	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
801	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
802	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
803	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
804	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
805	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  recordName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  recordName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  recordName);	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
806	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
807	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf);  currBytes  =  0;	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
808	[BUG]  [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.closeArchiveEntry();  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
809	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
810	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
811	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
812	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
813	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
814	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
815	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
816	[BUG]  [BUGGY]  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
817	[BUG]  [BUGGY]  trackBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  trackBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	trackBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
818	[BUG]  [BUGGY]  RecordBuffer  recordBuf  =  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  RecordBuffer  recordBuf  =  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	RecordBuffer  recordBuf  =  recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
819	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
820	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
821	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
822	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
823	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
824	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
825	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeArchiveEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeArchiveEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeArchiveEntryHeader(recordBuf);  }	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
826	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
827	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
828	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
829	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
830	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
831	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
832	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
833	[BUG]  [BUGGY]  while(closed)  {  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  buffer.writeEntryHeader(recordBuf);	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
834	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
835	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
836	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecordHeader(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
837	[BUG]  [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
838	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
839	[BUG]  [BUGGY]  out.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  out.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	out.writeRecordHeader(recordBuf);	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
840	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	OutputStream  out  =  buffer.getOutputStream();	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
841	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
842	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordSize,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
843	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemLen,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemLen,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemLen,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
844	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
845	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
846	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
847	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
848	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
849	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.size()  -  1;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.size()  -  1;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  recordBuf.size()  -  1;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
850	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
851	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
852	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode!=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode!=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode!=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
853	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
854	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecordHeader(recordBuf);  }  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
855	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  nameBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  nameBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  nameBytes);	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
856	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  assemBuf);	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
857	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  assemLen);	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
858	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(currName);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
859	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  buffer  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  buffer  =  entry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  buffer  =  entry.getEntry();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
860	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
861	[BUG]  [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  archiveEntry.getEntry();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  archiveEntry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  TarArchiveEntry  <  K,  V>  entry  =  archiveEntry.getEntry();	  if(entry!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
862	[BUG]  [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.getEntry();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	final  TarArchiveEntry  <  K,  V>  entry  =  recordBuf.getEntry();	  if(entry!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
863	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
864	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
865	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  }  else  {  buffer.writeRecord(currBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  }  else  {  buffer.writeRecord(currBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  }  else  {  buffer.writeRecord(currBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
866	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
867	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode  ==  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
868	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode!=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode!=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode!=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
869	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode  >=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode  >=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf);  }  else  if(longFileMode  >=  LONGFILE_GNU)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
870	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
871	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(assemBuf);  }  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(assemBuf);  }  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
872	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
873	[BUG]  [BUGGY]  entry.copyCurrentEntry(buffer,  recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(buffer,  recordBuf,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(buffer,  recordBuf,  currBytes);	  entry.copyCurrentEntry(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
874	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  currBytes,  buffer);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(recordBuf,  currBytes,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  currBytes,  buffer);	  entry.copyCurrentEntry(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
875	[BUG]  [BUGGY]  after(closed)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  recordBuf.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
876	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed  &&  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);	  if(closed)    {    entry.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
877	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
878	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
879	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
880	[BUG]  [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
881	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
882	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
883	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
884	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
885	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
886	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
887	[BUG]  [BUGGY]  if(closed)  {  buffer.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
888	[BUG]  [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
889	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
890	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
891	[BUG]  [BUGGY]  entry.copyCurrentEntry(buffer,  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(buffer,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(buffer,  currSize);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
892	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currName,  buffer);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  currName,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currName,  buffer);	  entry.writeRecordHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
893	[BUG]  [BUGGY]  archiveEntry.copyRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyRecord(recordBuf);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
894	[BUG]  [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyCurrentEntry(recordBuf,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyCurrentEntry(recordBuf,  currSize);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
895	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
896	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
897	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemLen,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemLen,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemLen,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
898	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
899	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
900	[BUG]  [BUGGY]  entry.writeRecordEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordEntry(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordEntry(recordBuf);	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
901	[BUG]  [BUGGY]  if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeArchiveEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.writeArchiveEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
902	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	167	None	replace
903	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeRecord(currBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeRecord(currBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeRecord(currBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
904	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  recordBuf);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
905	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
906	[BUG]  [BUGGY]  if(closed)  {  buffer.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
907	[BUG]  [BUGGY]  safely())  {  entry.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  safely())  {  entry.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	safely())  {  entry.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
908	[BUG]  [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
909	[BUG]  [BUGGY]  entry.writeRecordHeader(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(assemBuf,  currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(assemBuf,  currName);	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
910	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  currName,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  currName,  recordBuf);	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
911	[BUG]  [BUGGY]  entry.writeRecord(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecord(assemBuf,  currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecord(assemBuf,  currName);	  entry.writeEntryHeader(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
912	[BUG]  [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
913	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  continue;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  continue;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  continue;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
914	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
915	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
916	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
917	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
918	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
919	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
920	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
921	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
922	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
923	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  return;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
924	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.close();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.close();  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
925	[BUG]  [BUGGY]  archiveEntry.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.close();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.close();	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
926	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
927	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
928	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  return;  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
929	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  recordBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  recordBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  recordBytes);	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
930	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
931	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
932	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
933	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
934	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
935	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
936	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
937	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
938	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
939	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
940	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
941	[BUG]  [BUGGY]  entry.writeRecordHeader(assemBuf,  currSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(assemBuf,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(assemBuf,  currSize);	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
942	[BUG]  [BUGGY]  after(closed)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeEntryHeader(recordBuf);  }	  if(closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
943	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  currName);	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
944	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
945	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf,  currName,  buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(recordBuf,  currName,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf,  currName,  buffer);	  entry.copyCurrentEntry(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
946	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
947	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
948	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
949	[BUG]  [BUGGY]  entry.writeEntryHandler(currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHandler(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHandler(currName);	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
950	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
951	[BUG]  [BUGGY]  entry.writeRecordHandler(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHandler(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHandler(recordBuf);	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
952	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryHandler(recordBuf);    	non-compiled	[CE]  <identifier>  expected	172	None	replace
953	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
954	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
955	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
956	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
957	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
958	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecordHeader(recordBuf);  currBytes  =  0;  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecordHeader(recordBuf);  currBytes  =  0;	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
959	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
960	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHeader(0);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecordHeader(0);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeRecordHeader(0);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
961	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
962	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
963	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
964	[BUG]  [BUGGY]  if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
965	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
966	[BUG]  [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
967	[BUG]  [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
968	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	buffer.writeRecord(recordBuf);  fileName  =  entry.getName();	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
969	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(fileName);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(fileName);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(fileName);  fileName  =  entry.getName();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
970	[BUG]  [BUGGY]  entry.copyCurrentStructure(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentStructure(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentStructure(recordBuf);	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
971	[BUG]  [BUGGY]  entry.copyCurrentStructure(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentStructure(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentStructure(currName);	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
972	[BUG]  [BUGGY]  entry.writeName(name);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeName(name);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeName(name);	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
973	[BUG]  [BUGGY]  entry.writeName(fileName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeName(fileName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeName(fileName);	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
974	[BUG]  [BUGGY]  after(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
975	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
976	[BUG]  [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
977	[BUG]  [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
978	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
979	[BUG]  [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
980	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
981	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
982	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
983	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
984	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.getEntry();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  recordBuf.getEntry();	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
985	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
986	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
987	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
988	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
989	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
990	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
991	[BUG]  [BUGGY]  if(currBytes!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
992	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
993	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  3];  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  3];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_GNU.length()  +  3];	  byte[]    recordBuf    =    new    byte[LONGFILE_GNU.length()    ];    	non-compiled	[CE]  <identifier>  expected	163	None	replace
994	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeEntryHeader(recordBuf);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
995	[BUG]  [BUGGY]  safely())  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  safely())  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	safely())  {  entry.writeEntryHeader(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
996	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(recordBuf),  currName);	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
997	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  assemLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(recordBuf),  assemLen);	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
998	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(recordBuf),  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(recordBuf),  recordSize);	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
999	[BUG]  [BUGGY]  entry.copyCurrentEntry(new  File(fileName));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(new  File(fileName));  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(new  File(fileName));	  entry.copyCurrentEntry(new    File(recordBuf));    	non-compiled	[CE]  <identifier>  expected	153	None	replace
1000	[BUG]  [BUGGY]  RecordBuffer  buffer  =  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  RecordBuffer  buffer  =  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	RecordBuffer  buffer  =  recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1001	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1002	[BUG]  [BUGGY]  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1003	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
1004	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
1005	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
1006	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
1007	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
1008	[BUG]  [BUGGY]  this.archiveEntry.copyRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyRecord(recordBuf);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1009	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  currSize);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1010	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(new  File(recordBuf));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(new  File(recordBuf));  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(new  File(recordBuf));	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1011	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1012	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1013	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1014	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1015	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1016	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1017	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1018	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1019	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1020	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1021	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordFieldHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordFieldHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordFieldHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1022	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1023	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
1024	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
1025	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHandler(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
1026	[BUG]  [BUGGY]  while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecordHeader(recordBuf);	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
1027	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  recordBuf.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
1028	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  buffer.getValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  buffer.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  buffer.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
1029	[BUG]  [BUGGY]  if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  &&  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1030	[BUG]  [BUGGY]  if(closed  ||  currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1031	[BUG]  [BUGGY]  if(closed  ||  currBytes!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  currBytes!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  currBytes!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1032	[BUG]  [BUGGY]  if(closed  ||  currBytes  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  currBytes  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  currBytes  ==  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1033	[BUG]  [BUGGY]  if(closed  ||  currBytes!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  currBytes!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  currBytes!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1034	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
1035	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1036	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1037	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordBytes(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordBytes(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordBytes(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1038	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1039	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(recordName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordName);	  entry.copyCurrentEntry(currName);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
1040	[BUG]  [BUGGY]  entry.writeRecord(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecord(recordBuf,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecord(recordBuf,  currSize);	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
1041	[BUG]  [BUGGY]  entry.writeRecord(recordBuf,  currName,  buffer);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecord(recordBuf,  currName,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecord(recordBuf,  currName,  buffer);	  entry.writeRecord(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
1042	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
1043	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
1044	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
1045	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  buffer.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  buffer.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
1046	[BUG]  [BUGGY]  after(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
1047	[BUG]  [BUGGY]  safely())  {  entry.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  safely())  {  entry.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	safely())  {  entry.writeRecordHeader(recordBuf);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
1048	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
1049	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  recordBuf.length;  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
1050	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  <  1;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  <  1;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  recordBuf.length;  i  <  1;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
1051	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  <  2;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  for(int  i  =  recordBuf.length;  i  <  2;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  for(int  i  =  recordBuf.length;  i  <  2;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
1052	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1053	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1054	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  buffer.writeRecord(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1055	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.closeArchiveEntry();  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1056	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.closeArchiveEntry();  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1057	[BUG]  [BUGGY]  Entry  <  K,  V>  buffer  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  buffer  =  entry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  buffer  =  entry.getEntry();	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1058	[BUG]  [BUGGY]  ArchiveEntry  entry  =  getArchiveEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  ArchiveEntry  entry  =  getArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	ArchiveEntry  entry  =  getArchiveEntry();	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1059	[BUG]  [BUGGY]  ArchiveEntry  entry  =  new  ArchiveEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  ArchiveEntry  entry  =  new  ArchiveEntry(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	ArchiveEntry  entry  =  new  ArchiveEntry(recordBuf);	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1060	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordSize,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordSize,  currBytes);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  recordSize,  currBytes);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1061	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  assemLen);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1062	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  0,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  0,  recordSize);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1063	[BUG]  [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(assemBuf,  recordSize  +  1);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(assemBuf,  recordSize  +  1);	  entry.copyCurrentEntry(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1064	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1065	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(currName);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1066	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(longFileMode);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1067	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  entry.getValue();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1068	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  this.recordBuf.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  this.recordBuf.entrySet().iterator().next();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  entry  =  this.recordBuf.entrySet().iterator().next();	  Entry    <    String,ArchiveEntry>    entry    =    recordBuf.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	151	None	replace
1069	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
1070	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
1071	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
1072	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
1073	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
1074	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
1075	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
1076	[BUG]  [BUGGY]  if(entry.isRecorded())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isRecorded())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isRecorded())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
1077	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
1078	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(LONGFILE_GNU);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(LONGFILE_GNU);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
1079	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  0,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
1080	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordSize  +  1);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordSize  +  1);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  recordSize  +  1);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
1081	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	168	None	replace
1082	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  longLinkEntry.getEntry();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  longLinkEntry.getEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  longLinkEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1083	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHandler(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHandler(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHandler(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
1084	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
1085	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
1086	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
1087	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordName);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeName(currName);  }  else  {  buffer.writeRecord(recordName);  }	  entry.writeName(currName);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
1088	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1089	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordHader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordHader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1090	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
1091	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
1092	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
1093	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
1094	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
1095	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
1096	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  recordSize  =  0;  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    recordSize    =    0;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
1097	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
1098	[BUG]  [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.write(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.write(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
1099	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
1100	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
1101	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
1102	[BUG]  [BUGGY]  Entry  <?>  entry  =  recordBuf.entry  Entry();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <?>  entry  =  recordBuf.entry  Entry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <?>  entry  =  recordBuf.entry  Entry();	  if(entry!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
1103	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
1104	[BUG]  [BUGGY]  if(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
1105	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
1106	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1107	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1108	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1109	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1110	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  recordBuf.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1111	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1112	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1113	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  name);  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1114	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
1115	[BUG]  [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  break;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes!=  null)  {  entry.writeEntryHeader(currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  break;  }	  entry.writeEntryHeader(currBytes);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
1116	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
1117	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
1118	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  LONGFILE_GNU);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  LONGFILE_GNU);	  entry.writeRecordHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
1119	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
1120	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
1121	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
1122	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1123	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0,  currSize;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0,    currSize;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1124	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize  +  1);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize  +  1);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordSize  +  1);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1125	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordLONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordLONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf,  recordLONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1126	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1127	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(recordBuf,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  recordSize);	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    recordSize);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1128	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1129	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1130	[BUG]  [BUGGY]  entry.copyCurrentEntry(currName,  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyCurrentEntry(currName,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(currName,  currSize);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
1131	[BUG]  [BUGGY]  entry.writeCurrentEntry(currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeCurrentEntry(currName,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeCurrentEntry(currName,  recordBuf);	  entry.copyCurrentEntry(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
1132	[BUG]  [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  recordBuf.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
1133	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
1134	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	166	None	replace
1135	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
1136	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
1137	[BUG]  [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.toString()  ];  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  byte[]  recordBuf  =  new  byte[LONGFILE_GNU.toString()  ];  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	byte[]  recordBuf  =  new  byte[LONGFILE_GNU.toString()  ];	  byte[]    recordBuf    =    new    byte[LONGFILE_GNU.length()    ];    	non-compiled	[CE]  <identifier>  expected	163	None	replace
1138	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
1139	[BUG]  [BUGGY]  if(entry.isRecorded())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isRecorded())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isRecorded())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
1140	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(longFileMode);  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(longFileMode);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
1141	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1142	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed  &&  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1143	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryWordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  recordBuf.writeEntryWordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  recordBuf.writeEntryWordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
1144	[BUG]  [BUGGY]  entry.writeEntryHeader(currBytes,  recordBuf,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currBytes,  recordBuf,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currBytes,  recordBuf,  0);	  entry.writeEntryHeader(currBytes,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
1145	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
1146	[BUG]  [BUGGY]  if(entry  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
1147	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0	  if(currBytes    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
1148	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
1149	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
1150	[BUG]  [BUGGY]  if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1151	[BUG]  [BUGGY]  if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1152	[BUG]  [BUGGY]  if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1153	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
1154	[BUG]  [BUGGY]  entry!=  null  &&  entry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry!=  null  &&  entry.closeArchiveEntry();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry!=  null  &&  entry.closeArchiveEntry();	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1155	[BUG]  [BUGGY]  entry!=  null?  entry.closeArchiveEntry()  :  null;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry!=  null?  entry.closeArchiveEntry()  :  null;  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry!=  null?  entry.closeArchiveEntry()  :  null;	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
1156	[BUG]  [BUGGY]  entry.copyIn(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.copyIn(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyIn(recordBuf);	  entry.copyCurrentEntry(buffer);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1157	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  if(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
1158	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
1159	[BUG]  [BUGGY]  entry.writeCurrentEntry(assemBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeCurrentEntry(assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeCurrentEntry(assemBuf);	  entry.copyCurrentEntry(assemBuf);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
1160	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
1161	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
1162	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
1163	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
1164	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
1165	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1166	[BUG]  [BUGGY]  entry.writeRecordHeader(currName,  currSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName,  currSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName,  currSize);	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
1167	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  0);	  entry.writeRecordHeader(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
1168	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
1169	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.length  -  1;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  recordBuf.length  -  1;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  recordBuf.length  -  1;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
1170	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  for(int  i  =  recordBuf.length;  i  <  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.length;    i    <    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	164	None	replace
1171	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
1172	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  fileName,  buffer);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  fileName,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  fileName,  buffer);	  entry.writeEntryHeader(recordBuf,    currName,    buffer);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
1173	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
1174	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
1175	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
1176	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
1177	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHandler(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHandler(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHandler(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
1178	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemLen);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(assemLen);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(assemLen);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
1179	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf,  0,  recordBuf,  0,  recordSize);  }	  if(closed)    {    entry.writeEntryHeader(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
1180	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1181	[BUG]  [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  for(int  i  =  recordBuf.size();  i  >=  0;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    recordBuf.size()    -    1;    i    >=    0;    i++)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1182	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
1183	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
1184	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
1185	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.isRecorded())  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
1186	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1187	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1188	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1189	[BUG]  [BUGGY]  entry.writeRecordEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordEntryHeader(recordBuf);	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1190	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordEntryHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1191	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeRecordEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1192	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordEntryHeader(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1193	[BUG]  [BUGGY]  entry.writeEntry(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntry(assemBuf,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntry(assemBuf,  recordBuf);	  entry.writeEntryHeader(currBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1194	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1195	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1196	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
1197	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHandler(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    1;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
1198	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
1199	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
1200	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
1201	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
1202	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
1203	[BUG]  [BUGGY]  entry.writeEntryHeader(assemLen,  currName,  recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemLen,  currName,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemLen,  currName,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currName,    assemLen);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
1204	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1205	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  recordBuf.writeRecord(recordBuf);  }	  if(!closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1206	[BUG]  [BUGGY]  entry.writeCurrentEntry(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeCurrentEntry(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeCurrentEntry(currName);	  entry.copyCurrentEntry(currName);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
1207	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1208	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeRecordBytes(recordBuf);  }	  if(currName!=    null)    {    entry.writeRecordBytes(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1209	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf,  currBytes,  0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(recordBuf,  currBytes,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf,  currBytes,  0);	  entry.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
1210	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordHeader(recordBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
1211	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(currName!=    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
1212	[BUG]  [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
1213	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
1214	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
1215	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
1216	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
1217	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordSize);  }	  if(currName    ==    null)    {    if(!closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
1218	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Thread.currentThread().getContextClassLoader().writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Thread.currentThread().getContextClassLoader().writeRecordHeader(recordBuf);	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
1219	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf  ==  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
1220	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    recordBuf    =    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
1221	[BUG]  [BUGGY]  if(entry  ==  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry  ==  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry  ==  null)  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
1222	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
1223	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.closeEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.closeEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.closeEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
1224	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry!=    null)    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
1225	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
1226	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
1227	[BUG]  [BUGGY]  if(entry.isDirectory())  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  currName  =  entry.getName();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
1228	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  return;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  return;  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
1229	[BUG]  [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory())  {  entry.close();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  entry.close();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
1230	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
1231	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
1232	[BUG]  [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  recordBuf.writeEntryHeader(recordBuf);  }	  if(closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
1233	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
1234	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  currName  =  entry.getName();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  String,ArchiveEntry>  currName  =  entry.getName();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  String,ArchiveEntry>  currName  =  entry.getName();	  if(currName!=    null)    {    entry.writeEntryHeader(currName);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
1235	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
1236	[BUG]  [BUGGY]  if(recordBuf!=  null  ||  recordBuf.length  <  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null  ||  recordBuf.length  <  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null  ||  recordBuf.length  <  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeLong(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeLong(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
1237	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  recordSize);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  recordSize);	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
1238	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  assemLen);	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
1239	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
1240	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(assemBuf!=  null)  {  entry.writeEntryHeader(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  entry.writeEntryHeader(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
1241	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1242	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1243	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1244	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeEntryHeader(recordBuf);	  if(currName!=    null)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
1245	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1246	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1247	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeInt(recordBuf[i]);  }  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeInt(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1248	[BUG]  [BUGGY]  entry.writeEntry(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntry(assemBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntry(assemBuf);	  entry.writeEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	170	None	replace
1249	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
1250	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  null)  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
1251	[BUG]  [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
1252	[BUG]  [BUGGY]  entry.writeEntryHeader(assemLen,  currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemLen,  currBytes,  recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemLen,  currBytes,  recordBuf);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
1253	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  0,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  0,  assemLen);	  entry.writeEntryHeader(recordBuf,    currBytes,    assemLen);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
1254	[BUG]  [BUGGY]  while(!closed)  {  entry.copyCurrentEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  entry.copyCurrentEntry(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  entry.copyCurrentEntry(recordBuf);	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1255	[BUG]  [BUGGY]  while(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  entry.copyCurrentEntry(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1256	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  currName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
1257	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeEntryHeader(recordBuf,  recordName);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    entry.writeEntryHeader(recordBuf,    currName);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
1258	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1259	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHandler(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1260	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed    ||    recordBuf!=    null)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1261	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.length  >  0)  {  recordBuf.writeEntryHeader(recordBuf);	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
1262	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.endsWith( ".js "))  {  recordBuf.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed  &&  recordBuf.endsWith( ".js "))  {  recordBuf.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed  &&  recordBuf.endsWith( ".js "))  {  recordBuf.writeEntryHeader(recordBuf);	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
1263	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  Entry  <  K,  V>  entry  =  entries.getValue();  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	Entry  <  K,  V>  entry  =  entries.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
1264	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  assemLen);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  assemLen);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1265	[BUG]  [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  this.archiveEntry.copyCurrentEntry(recordBuf,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	this.archiveEntry.copyCurrentEntry(recordBuf,  0);	  this.archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1266	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1267	[BUG]  [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1268	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1269	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1270	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(re  recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName    ==    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(re    recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1271	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
1272	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
1273	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( "Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
1274	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  0);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  recordBuf,  0);	  entry.writeEntryHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
1275	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  false);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  recordBuf,  false);	  entry.writeEntryHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
1276	[BUG]  [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  fileMode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(currName,  recordBuf,  fileMode);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName,  recordBuf,  fileMode);	  entry.writeEntryHeader(currName,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
1277	[BUG]  [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  entry.writeRecordHeader(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry!=    null)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1278	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1279	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1280	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1281	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeEntryHeader(currName);    }    else    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1282	[BUG]  [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf  ==  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    recordBuf.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
1283	[BUG]  [BUGGY]  entry.writeEntryHeader(assemBuf,  0,  buffer);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeEntryHeader(assemBuf,  0,  buffer);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(assemBuf,  0,  buffer);	  entry.writeEntryHeader(recordBuf,    currBytes,    buffer);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
1284	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed  ||  recordBuf!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
1285	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(currName);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
1286	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
1287	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(currName!=  null  &&  recordBuf.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(currName!=  null  &&  recordBuf.length()  >  0)  {  recordBuf.writeRecordHeader(recordBuf);  }	  if(currName!=    null)    {    recordBuf.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
1288	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
1289	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
1290	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
1291	[BUG]  [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  returned;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  returned;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currBytes  ==  LONGFILE_GNU)  {  entry.writeEntryHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  returned;  }	  if(currBytes!=    LONGFILE_GNU)    {    entry.writeEntryHeader(recordBuf,    currBytes);    }    else    {    buffer.writeRecord(recordBuf);    return;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
1292	[BUG]  [BUGGY]  while(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  entry.copyCurrentEntry(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
1293	[BUG]  [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(!closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.copyCurrentEntry(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    entry.copyCurrentEntry(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
1294	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1295	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1296	[BUG]  [BUGGY]  while(!closed)  {  entry.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  entry.writeRecordHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  entry.writeRecordHeader(recordBuf);	  if(!closed)    {    entry.writeRecordHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
1297	[BUG]  [BUGGY]  after(closed)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  after(closed)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	after(closed)  {  entry.writeEntryHeader(recordBuf);  }	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
1298	[BUG]  [BUGGY]  while(!closed)  {  entry.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  entry.writeEntryHeader(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  entry.writeEntryHeader(recordBuf);	  if(closed)    {    entry.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
1299	[BUG]  [BUGGY]  entry.writeRecordHeader(currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeRecordHeader(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(currName);	  entry.writeRecordHeader(recordBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
1300	[BUG]  [BUGGY]  while(closed)  {  buffer.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  buffer.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  buffer.writeEntryHeader(recordBuf);  }	  if(closed)    {    buffer.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
1301	[BUG]  [BUGGY]  while(true)  {  recordBuf.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(true)  {  recordBuf.writeEntryHeader(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(true)  {  recordBuf.writeEntryHeader(recordBuf);  }	  while(!closed)    {    recordBuf.writeEntryHeader(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
1302	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
1303	[BUG]  [BUGGY]  because(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  because(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	because(currName!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
1304	[BUG]  [BUGGY]  if(entry.isArchive())  {  entry.closeEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isArchive())  {  entry.closeEntry();  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isArchive())  {  entry.closeEntry();  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isArchive())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
1305	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.isDirectory()  ||  entry.isDirectory())  {  entry.closeArchiveEntry();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
1306	[BUG]  [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(!closed)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1307	[BUG]  [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  while(closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	while(closed)  {  recordBuf  =  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1308	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  buffer.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  buffer.writeRecordEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1309	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(entry.getName().endsWith( ".Archive "))  {  entry.closeArchiveEntry();  }  else  {  buffer.writeRecord(recordBuf);  fileName  =  entry.getName();  }	  if(entry.isDirectory())    {    entry.closeArchiveEntry();    }    else    {    buffer.writeRecord(recordBuf);    fileName    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
1310	[BUG]  [BUGGY]  archiveEntry.copyInstance(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyInstance(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyInstance(recordBuf);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
1311	[BUG]  [BUGGY]  archiveEntry.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.writeRecord(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.writeRecord(recordBuf);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
1312	[BUG]  [BUGGY]  archiveEntry.copyInformation(recordBuf);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  archiveEntry.copyInformation(recordBuf);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	archiveEntry.copyInformation(recordBuf);	  archiveEntry.copyCurrentEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
1313	[BUG]  [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  if(closed)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeRecordHeader(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    entry.writeRecordHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
1314	[BUG]  [BUGGY]  entry.writeFieldName(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }      [BUGGY]  entry.writeFieldName(currName);  [BUGGY]      buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeFieldName(currName);	  entry.writeEntryName(currName);    	non-compiled	[CE]  <identifier>  expected	169	None	replace
