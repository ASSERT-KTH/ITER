bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
2	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
3	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
4	[BUG]  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName  ==  null)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
5	[BUG]  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
6	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeEntryHeader(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
7	[BUG]  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(currName!=  null)  {  entry.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]    [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	  	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
9	[BUG]  [BUGGY]  entry.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.writeRecord(recordBuf);  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecord(recordBuf);	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
10	[BUG]  [BUGGY]  entry.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.writeRecordHeader(recordBuf);  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeRecordHeader(recordBuf);	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
11	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.writeEntryHeader(recordBuf,  currBytes);  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currBytes);	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
12	[BUG]  [BUGGY]  entry.writeEntryHeader(currName);  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.writeEntryHeader(currName);  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(currName);	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
13	[BUG]  [BUGGY]  entry.writeEntryHeader(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.writeEntryHeader(recordBuf,  currName);  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.writeEntryHeader(recordBuf,  currName);	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
14	[BUG]  [BUGGY]  entry.copyCurrentEntry(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.copyCurrentEntry(recordBuf);  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.copyCurrentEntry(recordBuf);	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
15	[BUG]  [BUGGY]  entry.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  entry.closeArchiveEntry();  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	entry.closeArchiveEntry();	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
16	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
17	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
18	[BUG]  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  write(nameBytes);  write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  [BUGGY]  if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	176	176	1	replace	if(!closed)  {  entry.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordSize);  }	entry.writeEntryHeader(recordBuf);  	non-compiled	[CE]  <identifier>  expected	33	None	replace
