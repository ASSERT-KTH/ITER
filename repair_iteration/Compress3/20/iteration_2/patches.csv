bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().length()  >=  0)  {	  if(entry!=    null    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
2	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.getName().length()  >  0)  {	  if(entry!=    null    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
3	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().length()  <  =  0)  {	  if(entry!=    null    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
4	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.getName().length()  >  0)  {	  if(entry!=    null    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
5	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().length()  <  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().length()  <  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().length()  <  0)  {	  if(entry!=    null    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
6	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
7	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
8	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR,  currName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR,  currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR,  currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
9	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
10	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_GNU))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_GNU))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_GNU))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
11	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.NAME_ERROR))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.NAME_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.NAME_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
12	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry.isDirectory())  {	  if(entry!=    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
13	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.getName().equals( "Archive "))  {	  if(entry!=    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
14	[BUG]  [BUGGY]  if(entry  >=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  >=  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  >=  null  &&  entry.isDirectory())  {	  if(entry!=    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
15	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.getName().length()  ==  0)  {	  if(entry!=    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
16	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive. "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive.   "))    {    	non-compiled	[CE]  <identifier>  expected	118	None	replace
17	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive. "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive.   "))    {    	non-compiled	[CE]  <identifier>  expected	118	None	replace
18	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive. "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive.   "))    {    	non-compiled	[CE]  <identifier>  expected	118	None	replace
19	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive. "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive.   "))    {    	non-compiled	[CE]  <identifier>  expected	118	None	replace
20	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive. "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive.   "))    {    	non-compiled	[CE]  <identifier>  expected	118	None	replace
21	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getSize().length()  ==  0)  {	  if(entry!=    null    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
22	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.getName().length()  ==  0)  {	  if(entry!=    null    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
23	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
24	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getName().equals(currName))  {	  if(entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
25	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  entry.getName().equals(currName))  {	  if(entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
26	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
27	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
28	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.equals(entry.getName())||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.equals(entry.getName())||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.equals(entry.getName())||  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
29	[BUG]  [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
30	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
31	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.length()  >  0  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.length()  >  0  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.length()  >  0  ||  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
32	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.title ")||  entry.getName().startsWith( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.title ")||  entry.getName().startsWith( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry.title ")||  entry.getName().startsWith( "ArchiveEntry.title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
33	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".title "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
34	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
35	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry.title ")||  entry.getName().startsWith( ".ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry.title ")||  entry.getName().startsWith( ".ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry.title ")||  entry.getName().startsWith( ".ArchiveEntry.title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
36	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
37	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
38	[BUG]  [BUGGY]  buffer.writeRecord(currBytes);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(currBytes);  currBytes  =  0;  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(currBytes);  currBytes  =  0;	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
39	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
40	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
41	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  currName  =  entry.getName();  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  currName  =  entry.getName();  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
42	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
43	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
44	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
45	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")&&  entry.isDirectory())  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
46	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.title ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.title ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.title ")||  entry.isDirectory())  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
47	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.name ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.name ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.name ")||  entry.isDirectory())  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
48	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getName())||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getName())||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.class.getName())||  entry.isDirectory())  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
49	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.zip ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.zip ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.zip ")||  entry.isDirectory())  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
50	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "Directory "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "Directory "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "Directory "))  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
51	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.URL "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.URL "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.URL "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
52	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
53	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
54	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.url ")||  entry.getName().startsWith( "ArchiveEntry.url   "))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.url ")||  entry.getName().startsWith( "ArchiveEntry.url   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry.url ")||  entry.getName().startsWith( "ArchiveEntry.url   "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
55	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.URL "))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.URL "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.URL "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
56	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
58	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
63	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
64	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
65	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
66	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf);  currBytes  =  0;  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf);  currBytes  =  0;	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
67	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
68	[BUG]  [BUGGY]  if(entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()!=  0)  {	  if(entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.getName().length()!=  0)  {	  if(entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  entry.getName().length()  ==  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
71	[BUG]  [BUGGY]  if(entry.getName().length()!=  0  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()!=  0  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()!=  0  ||  entry.getName().length()  ==  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
72	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.getSize().length()  ==  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
73	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.getName().length()  >=  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
74	[BUG]  [BUGGY]  if(entry.getName().length()  >  0  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >  0  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >  0  ||  entry.getName().length()  ==  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
75	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
76	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
77	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isVersion())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isVersion())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isVersion())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
78	[BUG]  [BUGGY]  if(entry.isName()  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isName()  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isName()  ||  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
79	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( "Archive "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
80	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
81	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
82	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
83	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
84	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
85	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive- "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
86	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive_ "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
87	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".Archive "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
88	[BUG]  [BUGGY]  if(entry.getName()  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ||  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
89	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  ||  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  if(currName!=  null  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
91	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  ||  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
92	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
93	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
94	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().endsWith( "/.js "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().endsWith( "/.js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")||  entry.getName().endsWith( "/.js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
95	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
96	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.title "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
97	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.class "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
98	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.zip "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.zip "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.zip "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
99	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.name "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
100	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.type "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.type "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.type "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
101	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
102	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
103	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
104	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class,  currName))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class,  currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class,  currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
105	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.class)||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
106	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SHORT_NAME))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SHORT_NAME))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SHORT_NAME))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
107	[BUG]  [BUGGY]  if(entry.getName().length()  <  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  <  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  0)  {	  if(entry.getName().length()    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
108	[BUG]  [BUGGY]  if(entry.getSize().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()  >=  0)  {	  if(entry.getName().length()    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
109	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  entry.isDirectory()  &&  entry.getName().length()!=  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
110	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  &&  entry.getName().length()!=  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
111	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
112	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
113	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
114	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().startsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().startsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().startsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
115	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getSize().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getSize().endsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getSize().endsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
116	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( ".Archive_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
117	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
118	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  ||  entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  ||  entry.getSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  ||  entry.getSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
119	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  ||  entry.getSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
120	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize().length()  >=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
121	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
122	[BUG]  [BUGGY]  if(currName.length()  ==  0  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  ==  0  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  ==  0  &&  entry.getName().length()  >  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
123	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  currName.length()  >  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
124	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  currName.length()!=  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
125	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  currName.length()  >=  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
126	[BUG]  [BUGGY]  if(entry.getName().length()!=  0  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()!=  0  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()!=  0  &&  currName.length()  >  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
127	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  currName.length()  <  =  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
128	[BUG]  [BUGGY]  if(currName.equals(entry.getName())||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())||  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
129	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
130	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
131	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
132	[BUG]  [BUGGY]  if(!entry.getName().equals(currName)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.getName().equals(currName)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.getName().equals(currName)||  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
133	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currName.startsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currName.startsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currName.startsWith( "Archive "))  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
134	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
135	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
136	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
137	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
138	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.title "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
139	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.class "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
140	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.name "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
141	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
142	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.url "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
143	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.class.getName()))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
144	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().endsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().endsWith( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getName().endsWith( "Archive   "))  {	  if(entry.isDirectory()    &&    entry.getName().endsWith(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
145	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().endsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().endsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().endsWith( "Archive "))  {	  if(entry.isDirectory()    &&    entry.getName().endsWith(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
146	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
147	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
148	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
149	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.getName().equals(currName))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
150	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
151	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
152	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
154	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
155	[BUG]  [BUGGY]  if(entry.getEntry()!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getEntry()!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getEntry()!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
156	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
157	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( ".Archive "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
158	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currName  ==  null)  {	  if(entry.isDirectory()    &&    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
159	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  currName  ==  null)  {	  if(entry.isDirectory()    &&    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
160	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  &&  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  currName  ==  null)  {	  if(entry.isDirectory()    &&    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
161	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  currSize  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
162	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  &&  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  &&  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.isDirectory()  &&  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
163	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
164	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
165	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
166	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
167	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  &&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  &&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.isDirectory()  &&  currSize  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
168	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {	  if(entry.getName()    ==    null    ||    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
169	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
170	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
171	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
172	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
173	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith(PRINT_SIZE))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
174	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
175	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
176	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive-   "))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive-   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive-   "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
177	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
178	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
179	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
180	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
181	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
182	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName()  ||  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
183	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
184	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
185	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
186	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
187	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize().equals( "Archive "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
188	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archive_ "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
189	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive_ "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
190	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")&&  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")&&  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")&&  entry.getName().endsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
191	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
192	[BUG]  [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
193	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
194	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
195	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
196	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
197	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
198	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
199	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
200	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
201	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
202	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
203	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
204	[BUG]  [BUGGY]  if(entry!=  null  &&  entry!=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry!=  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry!=  null  &&  entry.isDirectory())  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
205	[BUG]  [BUGGY]  if(entry!=  null  ||  entry!=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry!=  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry!=  null  &&  entry.isDirectory())  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
206	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry!=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry!=  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry!=  null  &&  entry.isDirectory())  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
207	[BUG]  [BUGGY]  if(entry!=  null  &&  entry  ==  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry  ==  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry  ==  null  &&  entry.isDirectory())  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
208	[BUG]  [BUGGY]  if(entry  >=  null  &&  entry!=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  >=  null  &&  entry!=  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  >=  null  &&  entry!=  null  &&  entry.isDirectory())  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
209	[BUG]  [BUGGY]  if(entry!=  null  &&  entry!=  null  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry!=  null  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry!=  null  ||  entry.isDirectory())  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
210	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
211	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive- "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
212	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
213	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
214	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
215	[BUG]  [BUGGY]  if(entry.getEntry()!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getEntry()!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getEntry()!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
216	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive "))  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive "))  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive "))  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
217	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
218	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
219	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
220	[BUG]  [BUGGY]  if(entry.getEntry()!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getEntry()!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getEntry()!=  null)  {  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
221	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.isArchive())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.isArchive())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.isArchive())  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
222	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isAssignableFrom(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isAssignableFrom(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isAssignableFrom(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
223	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isArchive()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
224	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive()  ||  currName.startsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive()  ||  currName.startsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isArchive()  ||  currName.startsWith( "Archive "))  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
225	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isName())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isName())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isName())  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
226	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
227	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
228	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
229	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
230	[BUG]  [BUGGY]  if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().startsWith(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().startsWith(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().startsWith(TarArchiveEntry.class))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
231	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
232	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
233	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
234	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  1;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  1;  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(recordBuf);  currBytes  =  1;	  buffer.writeRecord(recordBuf);    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
235	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(assemBuf);  currBytes  =  0;  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(assemBuf);  currBytes  =  0;	  buffer.writeRecord(recordBuf);    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
236	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  currName.length()  ==  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
237	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  currName.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  currName.length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  currName.length()!=  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
238	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  currName.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  currName.length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  currName.length()  >=  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
239	[BUG]  [BUGGY]  if(currName.length()  ==  0  ||  currName.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  ==  0  ||  currName.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  ==  0  ||  currName.isDirectory()  ||  currName.length()  >  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
240	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  currName.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  currName.isDirectory()  ||  currName.length()  >  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
241	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  currName.length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  currName.length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  currName.length()  <  =  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
242	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
243	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.getName().equals( "Archive "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
244	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals(TarArchiveEntry.class))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
245	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "Archive_ "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
246	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "Archive- "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
247	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName())  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
248	[BUG]  [BUGGY]  if(entry.getName()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
249	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  <  LONGFILE_ERROR)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  <  LONGFILE_ERROR)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  <  LONGFILE_ERROR)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
250	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
251	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  <  len)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  <  len)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  <  len)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
252	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()!=  null)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
253	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
254	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
255	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
256	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry.class "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
257	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
258	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.equals(entry.getSize()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.equals(entry.getSize()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.equals(entry.getSize()))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
259	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  entry.isDirectory()  ||  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
260	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
261	[BUG]  [BUGGY]  if(currName.equals(entry.getName())||  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())||  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())||  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
262	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.length()  ==  0)  {	  if(entry.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
263	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.length()!=  0)  {	  if(entry.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
264	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName!=  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName!=  null  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName!=  null  &&  currName.length()  >  0)  {	  if(entry.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
265	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.length()  >=  0)  {	  if(entry.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
266	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")&&  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
267	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry.zip ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry.zip ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry.zip ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
268	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.class ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.class ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry.class ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
269	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.name ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.name ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry.name ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
270	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".zip ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".zip ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".zip ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
271	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
272	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
273	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
274	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
275	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
276	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
277	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
278	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
279	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
280	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.zip ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.zip ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry.zip ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
281	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
282	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
283	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
285	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
286	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
287	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {  currBytes  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
288	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.name ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.name ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry.name ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   ".ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
289	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  currName.equals(entry.getName()))  {	  if(!entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
290	[BUG]  [BUGGY]  if(!entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(!entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
291	[BUG]  [BUGGY]  if(currName!=  null  &&!entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&!entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&!entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(!entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
292	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().startsWith(currName))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().startsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().startsWith(currName))  {	  if(!entry.isDirectory()    &&    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
293	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.isDirectory())  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
294	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory())  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
295	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.equals(entry.getName()))  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
296	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.isEmpty())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.isEmpty())  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
297	[BUG]  [BUGGY]  if(entry.getSize().length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize().length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()  <  =  0)  {	  if(entry.getName().length()    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
298	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  currName.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
299	[BUG]  [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  currName.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  currName.isDirectory()  &&  currName.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
300	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currSize.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currSize.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  currSize.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
301	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory()  ||  currName.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
302	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().equals( "Archive   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().equals( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getName().equals( "Archive   "))  {	  if(entry.isDirectory()    &&    entry.getName().equals(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
303	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().equals( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().equals( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  entry.getName().equals( "Archive   "))  {	  if(entry.isDirectory()    &&    entry.getName().equals(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
304	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().equals( "Archive "))  {	  if(entry.isDirectory()    &&    entry.getName().equals(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
305	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "Archive "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
306	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "Archive- "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
307	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveInputStream "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveInputStream "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveInputStream "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
308	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveOutputStream "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveOutputStream "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveOutputStream "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
309	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().startsWith(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().startsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().startsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
310	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
311	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.startsWith(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.startsWith(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.startsWith(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
312	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive   ")||  entry.getName().endsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive   ")||  entry.getName().endsWith( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive   ")||  entry.getName().endsWith( "Archive   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
313	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( "Archive   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
314	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( ".Archive "))  {	  if(entry!=    null    &&    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
315	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( "Archive_ "))  {	  if(entry!=    null    &&    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
316	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( "Archive- "))  {	  if(entry!=    null    &&    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
317	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getName().endsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.getName().endsWith( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.getName().endsWith( "Archive   "))  {	  if(entry!=    null    &&    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
318	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().startsWith( "Archive "))  {	  if(entry!=    null    &&    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
319	[BUG]  [BUGGY]  buffer.writeRecord(currBytes);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(currBytes);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
320	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(recordBuf,  currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
321	[BUG]  [BUGGY]  buffer.writeRecord(currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(currName);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(currName);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
322	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(assemBuf);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(assemBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
323	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf  +  currBytes);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(recordBuf  +  currBytes);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(recordBuf  +  currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
324	[BUG]  [BUGGY]  buffer.writeRecord(currBuf);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecord(currBuf);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(currBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
325	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry.class "))  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
326	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName)&&  currSize!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(currName)&&  currSize!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName)&&  currSize!=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
327	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName)||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(currName)||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName)||  currName!=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
328	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName)&&  currSize  ==  null)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(currName)&&  currSize  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName)&&  currSize  ==  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
329	[BUG]  [BUGGY]  if(currName.startsWith(entry.getName())&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.startsWith(entry.getName())&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.startsWith(entry.getName())&&  currName!=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
330	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName)&&  currSize  >=  null)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(currName)&&  currSize  >=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName)&&  currSize  >=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
331	[BUG]  [BUGGY]  if(entry.getName().endsWith(currName)&&  currSize!=  null)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith(currName)&&  currSize!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith(currName)&&  currSize!=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
332	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive/ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive/ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive/ "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive/   "))    {    	non-compiled	[CE]  <identifier>  expected	132	None	replace
333	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "Archive/   "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "Archive/   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals( "Archive/   "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive/   "))    {    	non-compiled	[CE]  <identifier>  expected	132	None	replace
334	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive/ ")||  entry.getName().equals( "Archive/ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive/ ")||  entry.getName().equals( "Archive/ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive/ ")||  entry.getName().equals( "Archive/ "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive/   "))    {    	non-compiled	[CE]  <identifier>  expected	132	None	replace
335	[BUG]  [BUGGY]  if(entry.getParent()!=  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getParent()!=  null  &&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getParent()!=  null  &&  currName!=  null)  {	  if(entry.getDirectory()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
336	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
337	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry.class ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry.class ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry.class ")||  entry.getName().startsWith( ".ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
338	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
339	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
340	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
341	[BUG]  [BUGGY]  if(entry.getName().length()  >  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >  1)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >  1)  {	  if(entry.getName().length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
342	[BUG]  [BUGGY]  if(entry.getName().length()  <  =  1)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  <  =  1)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  =  1)  {	  if(entry.getName().length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
343	[BUG]  [BUGGY]  if(entry.getSize().length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize().length()  ==  1)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()  ==  1)  {	  if(entry.getName().length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
344	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  entry.getName().length()  >  0)  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
345	[BUG]  [BUGGY]  if(entry.getName().isDirectory()  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().isDirectory()  ||  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().isDirectory()  ||  entry.getName().length()  >  0)  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
346	[BUG]  [BUGGY]  if(!currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!currName.isDirectory()  &&  entry.getName().length()  >  0)  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
347	[BUG]  [BUGGY]  if(entry.getName().length()  >  0  ||  currName.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >  0  ||  currName.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >  0  ||  currName.isDirectory())  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
348	[BUG]  [BUGGY]  if(entry.getRecordSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getRecordSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getRecordSize().length()  ==  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
349	[BUG]  [BUGGY]  if(entry.getLongSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getLongSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getLongSize().length()  ==  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
350	[BUG]  [BUGGY]  if(entry.getSize().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()  >  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
351	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(tarrName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
352	[BUG]  [BUGGY]  if(entry.getName().equals(tarrName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
353	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals(tarrName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().equals(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
354	[BUG]  [BUGGY]  if(entry.getName().equals(tarrName)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(tarrName)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(tarrName)||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
355	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".zip ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".zip ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".zip ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.zip   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
356	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.zip   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
357	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.zip ")&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.zip ")&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry.zip ")&&  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.zip   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
358	[BUG]  [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(PRINT_SIZE)&&  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
359	[BUG]  [BUGGY]  if(entry.getName().endsWith(PRINT_SIZE)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith(PRINT_SIZE)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith(PRINT_SIZE)||  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
360	[BUG]  [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)||  entry.getName().endsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)||  entry.getName().endsWith( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(PRINT_SIZE)||  entry.getName().endsWith( "Archive "))  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
361	[BUG]  [BUGGY]  if(entry.getName().equals(PRINT_SIZE)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(PRINT_SIZE)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(PRINT_SIZE)||  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
362	[BUG]  [BUGGY]  if(entry.getName().endsWith(PRINT_SIZE)&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith(PRINT_SIZE)&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith(PRINT_SIZE)&&  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
363	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
364	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
365	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
366	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
367	[BUG]  [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
368	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.getName().length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
369	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()!=  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
370	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
371	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
372	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( ".ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
373	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()    ==    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
374	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {	  if(entry.getName()    ==    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
375	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {	  if(entry.getName()    ==    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
376	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
377	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
378	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
379	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".dir ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".dir ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".dir ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
380	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
381	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.title "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
382	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals( "ArchiveEntry.title "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
383	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TITLE_NAME))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TITLE_NAME))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TITLE_NAME))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
384	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TITLE_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TITLE_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TITLE_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
385	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TEST_NAME))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TEST_NAME))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.TEST_NAME))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
386	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
387	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
388	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
389	[BUG]  [BUGGY]  if(entry.getSize()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
390	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
391	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( ".js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
392	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "/.js "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "/.js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "/.js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
393	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
394	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.js "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
395	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getSimpleName()))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
396	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSimpleName().equals(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getSimpleName().equals(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSimpleName().equals(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getSimpleName()))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
397	[BUG]  [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getSimpleName())||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(TarArchiveEntry.class.getSimpleName())||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(TarArchiveEntry.class.getSimpleName())||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getSimpleName()))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
398	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  currName.length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
399	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  ||  currName.length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
400	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  currName.length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
401	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getDirectory()!=  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getDirectory()!=  null  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getDirectory()!=  null  &&  currName.length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
402	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getName().length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
403	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  currName.length()  ==  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
404	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
405	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
406	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
407	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
408	[BUG]  [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  if(closed)  {  buffer.writeRecord(recordBuf);  }  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
409	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
410	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
411	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
412	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
413	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
414	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.name   "))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.name   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.name   "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
415	[BUG]  [BUGGY]  if(currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName()))  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
416	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  =  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  =  LONGFILE_GNU)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currSize  <  =  LONGFILE_GNU)  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
417	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currSize  >  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currSize  >  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currSize  >  entry.getSize())  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
418	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  =  LONGFILE_ERROR)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  =  LONGFILE_ERROR)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currSize  <  =  LONGFILE_ERROR)  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
419	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getName().equals(currName))  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
420	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currSize  <  entry.getSize())  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
421	[BUG]  [BUGGY]  if(!entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.getName().equals(currName))  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
422	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
423	[BUG]  [BUGGY]  if(currName.equals(entry.getName())||  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())||  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())||  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
424	[BUG]  [BUGGY]  if(currName.equals(entry.getName())||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
425	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
426	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
427	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  currName  ==  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
428	[BUG]  [BUGGY]  if(entry.getName()  ==  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  &&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  &&  currName!=  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
429	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  currName!=  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
430	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  currName!=  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
431	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getName()!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getName()!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getName()!=  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
432	[BUG]  [BUGGY]  if(entry.getSize()!=  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()!=  null  &&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()!=  null  &&  currName!=  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
433	[BUG]  [BUGGY]  if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().endsWith(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().endsWith(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().endsWith(TarArchiveEntry.class))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
434	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
435	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
436	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
437	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.isDirectory())  {	  if(entry.isDirectory()    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
438	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  entry.isDirectory())  {	  if(entry.isDirectory()    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
439	[BUG]  [BUGGY]  if(currName.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
440	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
441	[BUG]  [BUGGY]  if(currName.length()  ==  0  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  ==  0  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  ==  0  ||  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
442	[BUG]  [BUGGY]  if(!currName.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!currName.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!currName.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
443	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  entry.getName().equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  entry.getName().equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  entry.getName().equals(entry.getName()))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
444	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
445	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
446	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")&&  entry.getName().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")&&  entry.getName().endsWith( "- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")&&  entry.getName().endsWith( "- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
447	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
448	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().startsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().startsWith( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().startsWith( "Archive   "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
449	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
450	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "url "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "url   "))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
451	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "url   "))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
452	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "url "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "url   "))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
453	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "url "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "url   "))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
454	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().length()  >  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
455	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().length()  <  =  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
456	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
457	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
458	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
459	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive "))  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive "))  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive "))  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
460	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
461	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
462	[BUG]  [BUGGY]  if(entry.getName().length()!=  0  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()!=  0  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()!=  0  &&  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
463	[BUG]  [BUGGY]  if(entry.getName().length()!=  0  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()!=  0  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()!=  0  ||  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
464	[BUG]  [BUGGY]  if(entry.getSize().length()  ==  0  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize().length()  ==  0  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()  ==  0  ||  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
465	[BUG]  [BUGGY]  if(entry.getName().length()  ==  1  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  1  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  1  ||  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
466	[BUG]  [BUGGY]  if(entry.getName().length()  >=  0  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >=  0  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >=  0  ||  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
467	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
468	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
469	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
470	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  ||  entry.getSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
471	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getLongFileMode().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getLongFileMode().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getLongFileMode().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
472	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
473	[BUG]  [BUGGY]  if(currName  ==  null  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
474	[BUG]  [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
475	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
476	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
477	[BUG]  [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
478	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
479	[BUG]  [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
480	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currName!=  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
481	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize!=  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
482	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  ==  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
483	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currName!=  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
484	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currSize!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currSize!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currSize!=  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
485	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  >=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  >=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  >=  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
486	[BUG]  [BUGGY]  if(currName.getName().equals(entry.getName())&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.getName().equals(entry.getName())&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.getName().equals(entry.getName())&&  currName!=  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
487	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)&&  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")&&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
488	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive: ")||  entry.getName().endsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive: ")||  entry.getName().endsWith( "Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive: ")||  entry.getName().endsWith( "Archive: "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive:   "))    {    	non-compiled	[CE]  <identifier>  expected	129	None	replace
489	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().startsWith( "Archive: "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive:   "))    {    	non-compiled	[CE]  <identifier>  expected	129	None	replace
490	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive: "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive: "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive:   "))    {    	non-compiled	[CE]  <identifier>  expected	129	None	replace
491	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "Archive: "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive:   "))    {    	non-compiled	[CE]  <identifier>  expected	129	None	replace
492	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
493	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().startsWith( ".ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
494	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
495	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
496	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith(TarArchiveEntry.class))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().startsWith(TarArchiveEntry.class))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
497	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
498	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive "))  {	  if(entry.getName().endsWith(   ".Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
499	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archiver "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archiver "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archiver "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
500	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( "Archiver   "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( "Archiver   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")||  entry.getName().startsWith( "Archiver   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
501	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archiver "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archiver "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archiver "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
502	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
503	[BUG]  [BUGGY]  if(entry.getName()  ||  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ||  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ||  currName  ==  null)  {	  if(entry.isDirectory()    ||    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
504	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
505	[BUG]  [BUGGY]  if(entry.getDirectory()  ||  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ||  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ||  currName  ==  null)  {	  if(entry.isDirectory()    ||    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
506	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName  >=  null)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName  >=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName  >=  null)  {	  if(entry.isDirectory()    ||    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
507	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
508	[BUG]  [BUGGY]  if(entry.getName().endsWith(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
509	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().endsWith(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().endsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().endsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
510	[BUG]  [BUGGY]  if(entry.getName().endsWith(currName)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith(currName)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith(currName)||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
511	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().length()  >=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
512	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
513	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
514	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  ==  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  ==  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  ==  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
515	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  <  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  <  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  <  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
516	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  >=  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  >=  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  >=  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
517	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize!=  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize!=  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize!=  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
518	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.equals(entry.getName())&&  currSize  <  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.equals(entry.getName())&&  currSize  <  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.equals(entry.getName())&&  currSize  <  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
519	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  <  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  <  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  <  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
520	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currName.length()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
521	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currName.length()  ==  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
522	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currName.length()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
523	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize.length()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
524	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  entry.length()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
525	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currName.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currName.length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currName.length()  >=  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
526	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
527	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.url "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
528	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals( "ArchiveEntry.url "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
529	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.URL "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.URL "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.URL "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
530	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL_KEY))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL_KEY))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL_KEY))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
531	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
532	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL_DEFAULT))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL_DEFAULT))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.URL_DEFAULT))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
533	[BUG]  [BUGGY]  if(currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  ==  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
534	[BUG]  [BUGGY]  if(currName.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()!=  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
535	[BUG]  [BUGGY]  if(currName.length()  <  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  <  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  <  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
536	[BUG]  [BUGGY]  if(currName.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  >=  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
537	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  currName.length()  >  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
538	[BUG]  [BUGGY]  if(currName.length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  <  =  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
539	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    &&    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
540	[BUG]  [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  &&  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  &&  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  entry.isDirectory()  &&  currName.length()  ==  0)  {	  if(currName!=    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
541	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
542	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
543	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
544	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  buffer.writeRecord(currName);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
545	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
546	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory())  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
547	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getName().length()  ==  0)  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
548	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
549	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
550	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
551	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
552	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( "./. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( "./. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( "./. "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
553	[BUG]  [BUGGY]  if(currSize  ==  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currSize  ==  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currSize  ==  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
554	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
555	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
556	[BUG]  [BUGGY]  if(closed  ||  currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
557	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
558	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currName);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
559	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
560	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
561	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals(PRINT_SIZE))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
562	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {	  if(entry.isDirectory()    &&    entry.getName().endsWith(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
563	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().startsWith(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().startsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().startsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
564	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(currName  +  File.separator))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(currName  +  File.separator))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(currName  +  File.separator))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
565	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
566	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
567	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
568	[BUG]  [BUGGY]  if(entry.getName()  ==  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {	  if(entry.getName()!=    null    &&    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
569	[BUG]  [BUGGY]  if(entry.getName()  ==  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    &&    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
570	[BUG]  [BUGGY]  if(entry.getName().length()  >>  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >>  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >>  0)  {	  if(entry.getName().length()    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
571	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  ==  null)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
572	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  >=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  >=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  >=  null)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
573	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  <  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  <  LONGFILE_GNU)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  <  LONGFILE_GNU)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
574	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getName().equals(currName)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getName().equals(currName)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getName().equals(currName)||  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
575	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.getName().equals(currName)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.getName().equals(currName)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.getName().equals(currName)||  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
576	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currSize  ==  0)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currSize  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  entry.isDirectory()  ||  currSize  ==  0)  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
577	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(tarrName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
578	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(tarrName)||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(tarrName)||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(tarrName)||  currName!=  null)  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
579	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".Archive ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".Archive ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".Archive ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   ".ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
580	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   ".ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
581	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.SOURCENAME_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.SOURCENAME_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(ArchiveEntry.SOURCENAME_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
582	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)&&  currName!=  null)  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
583	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
584	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()!=  null  &&  entry.getSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  entry.getSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
585	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry. "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
586	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
587	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
588	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
589	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  ==  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
590	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  >=  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
591	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isRecord())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isRecord())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isRecord())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
592	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getRecordSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getRecordSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getRecordSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
593	[BUG]  [BUGGY]  if(entry.getName().equals(PRINT_NAME)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(PRINT_NAME)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(PRINT_NAME)||  entry.isDirectory())  {	  if(entry.getName().equals(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
594	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  currName.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
595	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  currName.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
596	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  currName.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  currName.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
597	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName())||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName())||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName())||  currName!=  null)  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
598	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName())&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName())&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName())&&  currName!=  null)  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
599	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive. "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( ".Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive.   "))    {    	non-compiled	[CE]  <identifier>  expected	118	None	replace
600	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
601	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
602	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
603	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "Archive: "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
604	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
605	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
606	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
607	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
608	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
609	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
610	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
611	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
612	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
613	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  &&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  currName!=  null)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
614	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currBytes  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currBytes  <  =  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currBytes  <  =  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
615	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  ==  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  ==  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  ==  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
616	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currBytes  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currBytes  <  =  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currBytes  <  =  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
617	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.dir ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.dir ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry.dir ")||  entry.isDirectory())  {	  if(entry.isDirectory()    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
618	[BUG]  [BUGGY]  if(entry.getSize()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.getName()    ==    null    ||    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
619	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".class "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
620	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
621	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".class "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
622	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".class "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
623	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
624	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
625	[BUG]  [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  &&  entry.isDirectory()  ||  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
626	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
627	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive   ")||  entry.getName().endsWith( "Archiver   "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive   ")||  entry.getName().endsWith( "Archiver   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive   ")||  entry.getName().endsWith( "Archiver   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
628	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( "Archiver   "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( "Archiver   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( "Archiver   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
629	[BUG]  [BUGGY]  if(entry.getName().endsWith( "./ ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "./ ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "./ ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
630	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".jar ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".jar ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".jar ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
631	[BUG]  [BUGGY]  if(entry.getName()  ==  null  &&  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  &&  currName  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  &&  currName  ==  null)  {	  if(entry.getName()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
632	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "/.* "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "/.* "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "/.* "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
633	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry.zip "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry.zip "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry.zip "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
634	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getDirectory()  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getDirectory()  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getDirectory()  ==  null)  {	  if(entry.getDirectory()    ==    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
635	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive/* "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive/* "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "Archive/* "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive/   "))    {    	non-compiled	[CE]  <identifier>  expected	132	None	replace
636	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
637	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".title "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
638	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
639	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().startsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().startsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().startsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
640	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "/ ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "/ ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
641	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( "Archive   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive   ")&&  entry.getName().endsWith( "Archive   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
642	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive. "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive. "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
643	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getDirectory()!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getDirectory()!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getDirectory()!=  null)  {	  if(entry.getDirectory()!=    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
644	[BUG]  [BUGGY]  if(entry.getSize()!=  null  &&  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()!=  null  &&  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()!=  null  &&  entry.getSize().length()  ==  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
645	[BUG]  [BUGGY]  if(entry.getSize()  ==  null  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()  ==  null  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()  ==  null  ||  entry.getSize().length()  ==  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
646	[BUG]  [BUGGY]  if(entry.getType()  ==  Token.NAME  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getType()  ==  Token.NAME  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getType()  ==  Token.NAME  ||  entry.getSize().length()  ==  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
647	[BUG]  [BUGGY]  if(entry.getSize()!=  null)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()!=  null)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
648	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName)&&  currBytes  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(currName)&&  currBytes  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName)&&  currBytes  ==  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
649	[BUG]  [BUGGY]  if(currName.startsWith(entry.getName())&&  currSize!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.startsWith(entry.getName())&&  currSize!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.startsWith(entry.getName())&&  currSize!=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
650	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
651	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
652	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
653	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
654	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
655	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currBytes    ==    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
656	[BUG]  [BUGGY]  if(entry.getSize()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()  ==  0  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()    ==    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
657	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
658	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()  ==  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
659	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  currSize  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  currSize  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currBytes);  currSize  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
660	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  currName.isDirectory()  &&  entry.getName().length()  >  0)  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
661	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currSize  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currSize  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currSize  ==  0)  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
662	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archiver_ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archiver_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archiver_ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
663	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "$$ "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "$$ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "$$ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
664	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  entry.getName().length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
665	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.NAME))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.NAME))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
666	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class)&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class)&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class)&&  currName!=  null)  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
667	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
668	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().startsWith(PRINT_SIZE))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
669	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currBytes  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currBytes  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currBytes  ==  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
670	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currSize  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currSize  ==  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currSize  ==  null)  {	  if(entry.getName().equals(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
671	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
672	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
673	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
674	[BUG]  [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
675	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
676	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive_ ")||  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive_ ")||  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive_ ")||  entry.getName().endsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
677	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "Archive))  {	  if(entry.isDirectory()    &&    entry.getName().equals(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
678	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().equals( "Archive "))  {	  if(entry.isDirectory()    &&    entry.getName().equals(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
679	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith( ".ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
680	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
681	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  currName.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  currName.isDirectory()  ||  currName.length()  >  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
682	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  currName.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  currName.isDirectory()  ||  currName.length()  >  0)  {	  if(currName.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
683	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName!=  null  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName!=  null  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName!=  null  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
684	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName  ==  null  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName  ==  null  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName  ==  null  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
685	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
686	[BUG]  [BUGGY]  if(currName.getName().equals(entry.getName())&&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.getName().equals(entry.getName())&&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.getName().equals(entry.getName())&&  currName.length()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
687	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currBytes.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currBytes.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currBytes.length()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
688	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  currSize  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
689	[BUG]  [BUGGY]  if(currName.getName().equals(currName)&&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.getName().equals(currName)&&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.getName().equals(currName)&&  currSize  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
690	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize!=  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize!=  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
691	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.name "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
692	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.title "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
693	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
694	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currBytes);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
695	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  1;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
696	[BUG]  [BUGGY]  buffer.writeBytes(currBytes);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeBytes(currBytes);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeBytes(currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
697	[BUG]  [BUGGY]  buffer.writeRecordBytes(currBytes);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecordBytes(currBytes);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecordBytes(currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
698	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
699	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().endsWith(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().endsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().endsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
700	[BUG]  [BUGGY]  if(entry.getSize()!=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()!=  0)  {	  if(entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
701	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
702	[BUG]  [BUGGY]  if(entry.getName().startsWith( ". ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ". ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ". ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
703	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
704	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
705	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")&&  entry.isDirectory())  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
706	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.hasName()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.hasName()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.hasName()  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
707	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
708	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archiver_ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archiver_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( "Archiver_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
709	[BUG]  [BUGGY]  if(entry.getName().length()!=  0  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()!=  0  &&  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()!=  0  &&  entry.getName().length()  ==  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
710	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(PRINT_NAME))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(PRINT_NAME))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(PRINT_NAME))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
711	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "- "))  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
712	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "._ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "._ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "._ "))  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
713	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {	  if(currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
714	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
715	[BUG]  [BUGGY]  if(closed  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
716	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
717	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf  +  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf  +  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf  +  currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
718	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().startsWith( "ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
719	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(tarrName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(tarrName))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
720	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(PRINT_NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(PRINT_NAME))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(PRINT_NAME))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
721	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.name "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
722	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.url "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
723	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.URL "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.URL "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.URL "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
724	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
725	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
726	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
727	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
728	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isInternal())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isInternal())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isInternal())  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
729	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive()  ||  recordSize  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive()  ||  recordSize  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isArchive()  ||  recordSize  ==  0)  {	  if(entry.isDirectory()    ||    entry.isArchive())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
730	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(PRINT_SIZE))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
731	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
732	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
733	[BUG]  [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)||  entry.getName().endsWith(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)||  entry.getName().endsWith(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(PRINT_SIZE)||  entry.getName().endsWith(PRINT_SIZE))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
734	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
735	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
736	[BUG]  [BUGGY]  if(entry.getDirectory()  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ||  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
737	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
738	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")&&  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")&&  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")&&  entry.getName().endsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
739	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	130	None	replace
740	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
741	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
742	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".url "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
743	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ",Archive_ "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ",Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ",Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   ".Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
744	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  <  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  <  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().length()  <  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
745	[BUG]  [BUGGY]  if(entry.getName().startsWith( ",ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ",ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ",ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
746	[BUG]  [BUGGY]  if(currBytes  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
747	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.startsWith(entry.getName()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.startsWith(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.startsWith(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
748	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName  ==  null  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName  ==  null  ||  currName.equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName  ==  null  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
749	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getLongName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getLongName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getLongName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    currName.equals(entry.getName()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
750	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry.close "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
751	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().indexOf(currName)>  -1)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().indexOf(currName)>  -1)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().indexOf(currName)>  -1)  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
752	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().indexOf(currName)>  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().indexOf(currName)>  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().indexOf(currName)>  0)  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
753	[BUG]  [BUGGY]  if(currName.equals(entry.getName())||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())||  entry.getName().equals(currName))  {	  if(currName.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
754	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
755	[BUG]  [BUGGY]  if(entry  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
756	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( ".js "))  {	  if(entry    ==    null    &&    entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
757	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
758	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
759	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archiver   "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archiver   "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archiver   "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
760	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archiver "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archiver "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archiver "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archiver       "))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
761	[BUG]  [BUGGY]  if(entry.getName().length()  >=  0  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >=  0  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >=  0  &&  currName.length()  >  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
762	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.getName().length()  ==  0  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.getName().length()  ==  0  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.getName().length()  ==  0  &&  currName.length()  >  0)  {	  if(entry.getName().length()    ==    0    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
763	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
764	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
765	[BUG]  [BUGGY]  if(currName.isDirectory()  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.isDirectory()  &&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  &&  entry.isDirectory())  {	  if(entry.isDirectory()    &&    currName    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
766	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
767	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes  +  1);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  currBytes  +  1);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  currBytes  +  1);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
768	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  entry.getSize()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  entry.getSize()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  entry.getSize()  >  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
769	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  <  =  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  <  =  0)  {	  if(entry.getName().equals(currName)&&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
770	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  &&  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
771	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().endsWith( ".dir "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().endsWith(   ".dir   "))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
772	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getLongSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getLongSize().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getLongSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
773	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getLongFileMode().length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getLongFileMode().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getLongFileMode().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
774	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.close "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.close "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive ")||  entry.getName().startsWith( "ArchiveEntry.close "))  {	  if(entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
775	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class.getSimpleName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class.getSimpleName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class.getSimpleName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getSimpleName()))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
776	[BUG]  [BUGGY]  if(entry.getSize()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
777	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
778	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archive- "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
779	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( ".Archive- "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( ".Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( ".Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
780	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive- "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
781	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    &&    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
782	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(PRINT_SIZE))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
783	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( ".Archive_ "))  {	  if(entry!=    null    &&    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
784	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith(LONGFILE_GNU))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith(LONGFILE_GNU))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().startsWith(LONGFILE_GNU))  {	  if(entry!=    null    &&    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
785	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(LONGFILE_GNU))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(LONGFILE_GNU))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(LONGFILE_GNU))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
786	[BUG]  [BUGGY]  if(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
787	[BUG]  [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	while(currName!=  null  &&  recordBuf.length  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
788	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.getDirectory().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.getDirectory().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.getDirectory().length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
789	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()!=  null  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.getName().length()  >  0)  {	  if(entry.getDirectory()!=    null    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
790	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
791	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.dir ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry.dir ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry.dir ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   ".ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
792	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_GNU)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_GNU)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_GNU)||  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
793	[BUG]  [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE  +  recordSize)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE  +  recordSize)||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(PRINT_SIZE  +  recordSize)||  entry.isDirectory())  {	  if(entry.getName().startsWith(PRINT_SIZE)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
794	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getDirectory()  ==  null  ||  entry.getSize().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  ||  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getSize().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
795	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  +  currName)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName()  +  currName)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName()  +  currName)  {	  if(entry.isDirectory()    ||    entry.getName())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
796	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
797	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".title "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.title   "))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
798	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( ".Archive- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( ".Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( ".Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
799	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(PRINT_SIZE))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(PRINT_SIZE))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(PRINT_SIZE))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
800	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
801	[BUG]  [BUGGY]  if(entry.getName()  +  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  +  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  +  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
802	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  currName!=  null)  {	  if(entry.isDirectory()    ||    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
803	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.length()  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    entry.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
804	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getSize()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getSize()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getSize()  >  0)  {	  if(entry!=    null    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
805	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive/ "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive/ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive/ "))  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
806	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.length "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.length "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.length "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
807	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.length "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.length "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.length "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
808	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.title "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive ")||  entry.getName().equals( "ArchiveEntry.title "))  {	  if(entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
809	[BUG]  [BUGGY]  if(currBytes  >  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  >  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  >  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
810	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	while(closed)  {  recordBuf.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
811	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(closed)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
812	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(tarrName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
813	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().equals(tarrName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().equals(tarrName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize().equals(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(tarrName))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
814	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.close "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.close "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.close "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
815	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry.zip "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry.zip "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry.zip "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
816	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.close "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.close "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.getName().equals( "ArchiveEntry.close "))  {	  if(entry.getName().equals(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
817	[BUG]  [BUGGY]  if(currBytes  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  buffer.writeRecord(recordBuf);    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
818	[BUG]  [BUGGY]  if(currBytes  >=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  >=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  >=  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  buffer.writeRecord(recordBuf);    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
819	[BUG]  [BUGGY]  if(entry.getParent()  ==  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getParent()  ==  null  &&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getParent()  ==  null  &&  currName!=  null)  {	  if(entry.getDirectory()    ==    null    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
820	[BUG]  [BUGGY]  if(entry.getName()  ==  null  &&  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName()  ==  null  &&  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  &&  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.getName()!=    null    &&    entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
821	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry.isDirectory()  ||  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
822	[BUG]  [BUGGY]  if(currSize  ==  0  ||  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currSize  ==  0  ||  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currSize  ==  0  ||  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
823	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  currName.length()  <  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  currName.length()  <  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  currName.length()  <  0)  {	  if(currName    ==    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
824	[BUG]  [BUGGY]  if(entry.getName().endsWith(currName)&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith(currName)&&  currName!=  null)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith(currName)&&  currName!=  null)  {	  if(entry.getName().startsWith(currName)&&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
825	[BUG]  [BUGGY]  if(entry.getName().length()  <  =  4)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  <  =  4)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  =  4)  {	  if(entry.getName().length()    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
826	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  >=  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
827	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  >  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
828	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
829	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry.class ")||  entry.getName().startsWith( ".class "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry.class ")||  entry.getName().startsWith( ".class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry.class ")||  entry.getName().startsWith( ".class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
830	[BUG]  [BUGGY]  if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(TarArchiveEntry.class)||  entry.getName().startsWith( "ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.class   "))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
831	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
832	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
833	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "Directory "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "Directory "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "Directory "))  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
834	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".js ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".js ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".js ")||  entry.isDirectory())  {	  if(entry.getName().endsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
835	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.getName().length()  >  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
836	[BUG]  [BUGGY]  if(entry.getName().length()  >=  0  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >=  0  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >=  0  ||  entry.getName().length()  ==  0)  {	  if(entry.getName().length()    ==    0    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
837	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ",ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ",ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ",ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
838	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)||  entry.getName().equals(TarConstants.NAMELEN))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)||  entry.getName().equals(TarConstants.NAMELEN))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR)||  entry.getName().equals(TarConstants.NAMELEN))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
839	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.length "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.length "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.length "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
840	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.close "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.close "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "ArchiveEntry.close "))  {	  if(entry!=    null    &&    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
841	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive: "))  {	  if(entry.isDirectory()    ||    entry.getName().startsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
842	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecordHeader(recordBuf);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecordHeader(recordBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
843	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  buffer.writeRecordBytes(recordBuf);  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecordBytes(recordBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
844	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  entry.getName().equals(currName))  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
845	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
846	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals(currName)||  currSize  <  =  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  currSize  <  =  entry.getSize())  {	  if(entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
847	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "._ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "._ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "._ "))  {	  if(entry.getName().endsWith(   ".Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
848	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.getName().startsWith( ".url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "url   "))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
849	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive- "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive-   "))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
850	[BUG]  [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.name "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(LONGFILE_ERROR)||  entry.getName().startsWith( "ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.getName().startsWith(   "ArchiveEntry.name   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
851	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.length()  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.length()  <  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.length()  <  0)  {	  if(entry.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
852	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  currName.length()  <  =  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.length()  <  =  0)  {	  if(entry.isDirectory()    ||    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
853	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  currName.endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  currName.endsWith( ".js "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  currName.endsWith( ".js "))  {	  if(currName!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
854	[BUG]  [BUGGY]  if(currBytes  ==  null  ||  currBytes  <  0)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null  ||  currBytes  <  0)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null  ||  currBytes  <  0)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
855	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
856	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(TarArchiveEntry.class.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(TarArchiveEntry.class.getName()))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
857	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(currName!=    null    &&    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
858	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive: "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "Archive: "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "Archive:   "))    {    	non-compiled	[CE]  <identifier>  expected	129	None	replace
859	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(LONGFILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(LONGFILE_ERROR))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(LONGFILE_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
860	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().endsWith(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().endsWith(currName))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize().endsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(currName))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
861	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "/ "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ ")||  entry.getName().endsWith( "/ "))  {	  if(entry.getName().endsWith(   "Archive_   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
862	[BUG]  [BUGGY]  if(entry.getName().length()  >  0  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  >  0  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >  0  ||  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
863	[BUG]  [BUGGY]  if(entry.getName().length()  <  0  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  <  0  ||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  0  ||  entry.isDirectory())  {	  if(entry.getName().length()    ==    0    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
864	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  entry.getName())  {	  if(entry!=    null    &&    entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
865	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().equals( "ArchiveEntry ")||  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry ")||  entry.isDirectory())  {	  if(entry.isDirectory()    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
866	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.close "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.close "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.close "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "ArchiveEntry.url   "))    {    	non-compiled	[CE]  <identifier>  expected	131	None	replace
867	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive- ")||  entry.getName().endsWith( "- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
868	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( "./.* "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( "./.* "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( "./.* "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
869	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".- "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive_ ")||  entry.getName().endsWith( ".- "))  {	  if(entry.getName().endsWith(   "Archive   ")||    entry.getName().endsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
870	[BUG]  [BUGGY]  if(entry.getName().length()  <  4)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  <  4)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  4)  {	  if(entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
871	[BUG]  [BUGGY]  if(entry.getFileMode()  ==  LONGFILE_GNU  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getFileMode()  ==  LONGFILE_GNU  ||  entry.getSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getFileMode()  ==  LONGFILE_GNU  ||  entry.getSize().length()  ==  0)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
872	[BUG]  [BUGGY]  if(entry.getFileMode()  ==  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getFileMode()  ==  LONGFILE_GNU)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getFileMode()  ==  LONGFILE_GNU)  {	  if(entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
873	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry!=    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
874	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null  ||  entry.getName().equals( "Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  ||  entry.getName().equals( "Archive "))  {	  if(entry!=    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
875	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  currSize  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
876	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  recordSize  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  recordSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  recordSize  >  0)  {	  if(currName!=    null    &&    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
877	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName)&&    currSize    <    =    entry.getSize())    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
878	[BUG]  [BUGGY]  if(entry.getName().length()  <  2  ||  entry.getName().length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getName().length()  <  2  ||  entry.getName().length()  ==  1)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  2  ||  entry.getName().length()  ==  1)  {	  if(entry.getName().length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
879	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.getName().equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.getName().equals(entry.getName()))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.getName().equals(entry.getName()))  {	  if(currName    ==    null    ||    entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
880	[BUG]  [BUGGY]  if(currName.equals(entry.getName())&&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.equals(entry.getName())&&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.equals(entry.getName())&&  entry.getName().length()  >  0)  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
881	[BUG]  [BUGGY]  if(currName.length()  >  0  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName.length()  >  0  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  >  0  &&  entry.getName().length()  >  0)  {	  if(currName.isDirectory()    &&    entry.getName().length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
882	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
883	[BUG]  [BUGGY]  if(entry  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
884	[BUG]  [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry!=  null)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null)  {  buffer.writeRecord(currBytes);  }	  if(currBytes    ==    null)    {    buffer.writeRecord(currBytes);    }    else    {    buffer.writeRecord(currBytes);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
885	[BUG]  [BUGGY]  if(entry.getSize()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.getSize()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.getName()!=    null    ||    entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
886	[BUG]  [BUGGY]  if(!entry.getName().equals(currName)&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(!entry.getName().equals(currName)&&  entry.isDirectory())  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.getName().equals(currName)&&  entry.isDirectory())  {	  if(entry.getName().equals(currName)||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
887	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getLongSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getLongSize().length()  ==  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getLongSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getSize().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
888	[BUG]  [BUGGY]  if(currBytes!=  null  &&  currBytes.length  >  0)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null  &&  currBytes.length  >  0)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null  &&  currBytes.length  >  0)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
889	[BUG]  [BUGGY]  if(currBytes!=  null  &&  currBytes  <  =  LONGFILE_GNU)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null  &&  currBytes  <  =  LONGFILE_GNU)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null  &&  currBytes  <  =  LONGFILE_GNU)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
890	[BUG]  [BUGGY]  if(currBytes!=  null  &&  currBytes  <  =  entry.getSize())  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes!=  null  &&  currBytes  <  =  entry.getSize())  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null  &&  currBytes  <  =  entry.getSize())  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	  if(currBytes!=    null)    {    buffer.writeRecord(currBytes);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
891	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( ".Archive "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( ".Archive "))  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( ".Archive "))  {	  if(entry.isDirectory()    &&    entry.getName().equals(   "Archive       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
892	[BUG]  [BUGGY]  if(currBytes  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
893	[BUG]  [BUGGY]  if(currBytes  ==  null  ||  currBytes  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null  ||  currBytes  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null  ||  currBytes  <  0)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
894	[BUG]  [BUGGY]  if(currBytes  ==  null  ||  recordBuf.length  <  4)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currBytes  ==  null  ||  recordBuf.length  <  4)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null  ||  recordBuf.length  <  4)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	  if(currBytes    ==    null)    {    buffer.writeRecord(recordBuf);    currBytes    =    0;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
895	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currSize  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currSize  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  &&  currSize  >  0)  {	  if(currName!=    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
896	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;      [BUGGY]  if(currName  ==  null  ||  currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [BUGGY]      currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  currName.isDirectory()  &&  entry.getName().length()  >  0)  {	  if(currName!=    null    ||    entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
