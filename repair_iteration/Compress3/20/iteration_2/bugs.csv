bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()!=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  >=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().length()  >=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  if(entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()!=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".Archive "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive_ "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "Archive "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  buffer.writeRecord(recordBuf);  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(recordBuf);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  buffer.writeRecord(recordBuf);  currBytes  =  0;  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	buffer.writeRecord(recordBuf);  currBytes  =  0;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  }  else  {  buffer.writeRecord(currBytes);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(currBytes);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.title "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.title "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.class "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.name "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.name "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.name "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "ArchiveEntry.url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "Archive   "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals( "Archive   "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals( "Archive   "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  if(entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "Archive "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getSimpleName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName()))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.SOURCENAME_ERROR))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(TarArchiveEntry.class))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName.isDirectory()  ||  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals(currName)&&  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  if(currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getDirectory()!=  null  &&  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  ==  0  &&  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  &&  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  if(currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName.isDirectory()  &&  entry.getName().length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  &&  entry.getName().length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.isArchive())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isArchive())  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName())  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive   "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive   "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().endsWith( "Archive   "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
43	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive_ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive_ "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
45	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "Archive "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive- "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive- "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  currName!=  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName!=  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  if(entry.getName().equals(currName)&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals(currName)&&  currName!=  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)&&  currName!=  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getDirectory()!=  null  &&  currName!=  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()!=  null  &&  currName!=  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
50	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  currName  ==  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  currName  ==  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
51	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  currName  ==  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName  ==  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  if(entry.getName().startsWith(currName)&&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith(currName)&&  currName!=  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(currName)&&  currName!=  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry  ==  null  &&  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
54	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  ||  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
55	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "Archive "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  &&  entry.getName().endsWith( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().endsWith( "Archive "))  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
56	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  &&  entry.getName().equals( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().equals( "Archive "))  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  &&  entry.getName().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().length()  ==  0)  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
58	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  &&  entry.getName().length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().length()  >  0)  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
59	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
60	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  currName.equals(entry.getName()))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  currName.equals(entry.getName()))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
61	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
62	[BUG]  [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(!entry.isDirectory()  &&  entry.getName().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(!entry.isDirectory()  &&  entry.getName().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  if(currName.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName.isDirectory()  ||  entry.getName().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals(currName)||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals(currName)||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
65	[BUG]  [BUGGY]  if(entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >  0)  {	  if(entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  if(entry.getName().length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  >=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  >=  0)  {	  if(entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  if(entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getSize().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getSize().length()  ==  0)  {	  if(entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
68	[BUG]  [BUGGY]  if(entry.getName().length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  <  =  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  <  =  0)  {	  if(entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  &&  entry.getName().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  &&  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
71	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "ArchiveEntry. ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")&&  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
74	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals( "ArchiveEntry. ")||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
75	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.zip ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry.zip ")||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry.zip ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith(PRINT_SIZE)||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith(PRINT_SIZE)||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".dir "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
78	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(tarrName))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(tarrName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(tarrName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
79	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive- "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "Archive- "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
80	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
81	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "url "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "url "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().startsWith( "url "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
82	[BUG]  [BUGGY]  if(entry.getName().equals( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().equals( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().equals( "ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
83	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
84	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
85	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(currBytes);  currBytes  =  0;  }  else  {  buffer.writeRecord(currBytes);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
87	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "- "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "- "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
88	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archiver   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archiver   "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archiver   "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
89	[BUG]  [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( "ArchiveEntry. ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
90	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().length()!=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  entry.isDirectory()  ||  entry.getName().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
91	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  ||  entry.getName().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
93	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(currName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
94	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName!=  null  &&  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory())  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
95	[BUG]  [BUGGY]  if(entry.getName()!=  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName()!=  null  &&  currName!=  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()!=  null  &&  currName!=  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
96	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null  &&  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getDirectory()  ==  null  &&  currName!=  null)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getDirectory()  ==  null  &&  currName!=  null)  {	  if(entry.isDirectory()    &&    currName!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
97	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
98	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
99	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  &&  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
100	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
101	[BUG]  [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName  ==  null  ||  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  &&  currName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName!=  null  ||  entry.isDirectory()  &&  currName.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  ||  entry.isDirectory()  &&  currName.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
103	[BUG]  [BUGGY]  if(entry.getName().length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  ==  1)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  1)  {	  if(entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
104	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName()  ==  null  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
105	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(currName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
106	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().equals(currName))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize().equals(currName))  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals(currName)&&  currSize  <  =  entry.getSize())  {	  if(entry.isDirectory()    ||    entry.getName().equals(currName))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
108	[BUG]  [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currName!=  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currName!=  null  &&  entry.isDirectory()  &&  entry.length()  >  0)  {	  if(entry.isDirectory()    &&    currName.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
109	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
110	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
111	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
112	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
113	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  currBytes  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
114	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().length()  >  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().length()  >  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
115	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().length()!=  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getSize().length()!=  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getSize().length()!=  0)  {	  if(entry.isDirectory()    ||    entry.getName().length()!=    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
117	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive_ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive_ "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive_ "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
118	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().endsWith( ".Archive. "))  {	  if(entry.isDirectory()    ||    entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
119	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().length()  ==  0)  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
120	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().equals( "Archive "))  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
121	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.getName().startsWith( "ArchiveEntry. "))  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
122	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry.isDirectory()    ||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
123	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().length()  ==  0  ||  entry.getName().length()  ==  0)  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().length()  ==  0  ||  entry.getName().length()  ==  0)  {	  if(entry.getName().length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
124	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
125	[BUG]  [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().startsWith( ".ArchiveEntry. ")||  entry.isDirectory())  {	  if(entry.getName().startsWith(   "ArchiveEntry.   ")||    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
126	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( ".ArchiveEntry. "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( ".ArchiveEntry. "))  {	  if(entry.getName().startsWith(   "ArchiveEntry.   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
127	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry!=  null  &&  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry  ==  null  &&  entry!=  null  &&  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry  ==  null  &&  entry!=  null  &&  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
128	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.isDirectory())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry!=  null  &&  entry.isDirectory()  ||  entry.isDirectory())  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry!=  null  &&  entry.isDirectory()  ||  entry.isDirectory())  {	  if(entry!=    null    &&    entry.isDirectory())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
129	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive: "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive: "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive: "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
130	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {	  if(entry.getName().endsWith(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
131	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.url "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.url "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.url "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
132	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive/ "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "Archive/ "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "Archive/ "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
133	[BUG]  [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.title "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  currBytes  =  0;    [BUGGY]  if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.title "))  {  [BUGGY]    currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	181	181	1	replace	if(entry.isDirectory()  ||  entry.getName().equals( "ArchiveEntry.title "))  {	  if(entry.isDirectory()    ||    entry.getName().equals(   "Archive   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
