bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getKey();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getKey();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getKey();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getValue();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getValue();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getAttributeValue();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getAttributeValue();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getAttributeValue();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getValue()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getValue()  +  1;  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getValue()  +  1;	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getAstRoot();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getAstRoot();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getAstRoot();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.clone();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.clone();	  TarArchiveEntry    entry    =(TarArchiveEntry)this.archiveEntry;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getKey();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getKey();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getKey();	  TarArchiveEntry    entry    =(TarArchiveEntry)this.archiveEntry;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)object.clone();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)object.clone();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)object.clone();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  ArchiveEntry  entry  =  archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  ArchiveEntry  entry  =  archiveEntry.getValue();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	ArchiveEntry  entry  =  archiveEntry.getValue();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.get(entry.getName()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.get(entry.getName()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.get(entry.getName()))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  return;  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  return;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.clone();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.clone();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.clone();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	ArchiveEntry  entry  =(ArchiveEntry)archiveEntry.getValue();  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString());  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString());  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes());  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes());  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes(),  entry.getName());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes(),  entry.getName());  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes(),  entry.getName());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().toString());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().toString());  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().toString());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString(),  entry.toString());  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString(),  entry.toString());  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString(),  entry.toString());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString()  +  1);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString()  +  1);  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.keySet())  {  buffer.put(entry.getName().toString()  +  1);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes()  +  1);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes()  +  1);  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(!closed)  {  for(ArchiveEntry  entry  :  archiveEntries.values())  {  buffer.put(entry.getName().getBytes()  +  1);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getName();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getName();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)this.archiveEntry.getName();	  TarArchiveEntry    entry    =(TarArchiveEntry)this.archiveEntry;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getName();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getName();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getName();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getData();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getData();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)archiveEntry.getData();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)data.get(archiveEntry);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)data.get(archiveEntry);  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)data.get(archiveEntry);	  TarArchiveEntry    entry    =(TarArchiveEntry)this.archiveEntry;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry.clone());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry.clone());  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry.clone());	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry.getName());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry.getName());  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry.getName());	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)dataset.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)dataset.clone();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)dataset.clone();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry);  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)super.put(archiveEntry.getName(),  archiveEntry);	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  return;  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  return;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE);  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE,  TarConstants  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE,  TarConstants  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE,  TarConstants	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE,  TarConstants.  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE,  TarConstants.  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.LONGFILE_TRUNCATE,  TarConstants.	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.GNUTYPE_LONGNAME);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.GNUTYPE_LONGNAME);  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  entry  =  new  TarArchiveEntry(TarConstants.GNUTYPE_LONGNAME);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  putArchiveEntry(TarConstants.LONGFILE_TRUNCATE);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  putArchiveEntry(TarConstants.LONGFILE_TRUNCATE);  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  putArchiveEntry(TarConstants.LONGFILE_TRUNCATE);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  continue;  }  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN)  {  if(longFileMode  ==  LONGFILE_GNU)  {  continue;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)data.getValue();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)data.getValue();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)data.getValue();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)getValue();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {    [BUGGY]  TarArchiveEntry  entry  =(TarArchiveEntry)getValue();  [BUGGY]    if  (entry.getName().length()  >=  TarConstants.NAMELEN)  {  if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	154	154	1	replace	TarArchiveEntry  entry  =(TarArchiveEntry)getValue();	  TarArchiveEntry    entry    =(TarArchiveEntry)archiveEntry.getValue();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
