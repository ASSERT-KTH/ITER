bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.FILE_ERROR)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.FILE_ERROR)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.FILE_ERROR)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NUMBER)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER_ALIASING)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER_ALIASING)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NUMBER_ALIASING)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER_FILE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER_FILE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NUMBER_FILE)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_LONGLINK)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_LONGLINK)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER_LONGLINK)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NUMBER_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NUMBER_LONGLINK)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  if(entry.getName().length()  >=  TarConstants.NUMBER)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  >=  TarConstants.NUMBER)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  >=  TarConstants.NUMBER)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_ARRAY)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_ARRAY)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_ARRAY)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_FILE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_FILE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_FILE)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_LONGLINK)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAME_LONGLINK)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME_LONGLINK)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAME_LONGLINK)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  if(entry.getName().endsWith(TarConstants.NAME))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith(TarConstants.NAME))  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith(TarConstants.NAME))  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
13	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_FILE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_FILE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAME_FILE)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  if(entry.getName().length()  >=  TarConstants.NAME)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  >=  TarConstants.NAME)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  >=  TarConstants.NAME)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.GNU_LONGLINK)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.GNU_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.GNU_LONGLINK)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.FILE_LONGLINK)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.FILE_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.FILE_LONGLINK)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  longLinkEntry.setSize(currName);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  longLinkEntry.setSize(currName);  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  longLinkEntry.setSize(currName);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  return;  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  return;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(entry.getName().length()  ==  LONGFILE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  LONGFILE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  LONGFILE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_GNU)  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_GNU)  {  return;  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_GNU)  {  return;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  longLinkEntry.setSize(currName  +  1);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  longLinkEntry.setSize(currName  +  1);  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  if(currName.length()  ==  LONGFILE_ERROR)  {  longLinkEntry.setSize(currName  +  1);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(0,  entry.getValue().length()  -  1);  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(0,  entry.getValue().length()  -  1);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(0,  entry.getValue().length()  -  1);  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_ALIASING)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_ALIASING)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_ALIASING)  {	  if(entry.getName().length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.LONGNAME)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.LONGNAME)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.LONGNAME)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_BACKSLASH)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_BACKSLASH)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_BACKSLASH)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NULL)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NULL)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NULL)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  longFileMode  =  entry.getName().getBytes();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  longFileMode  =  entry.getName().getBytes();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	longFileMode  =  entry.getName().getBytes();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  final  int  longFileMode  =  entry.getName().getLongSize();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  final  int  longFileMode  =  entry.getName().getLongSize();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	final  int  longFileMode  =  entry.getName().getLongSize();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  final  int  longFileMode  =  entry.getName().getBytes();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  final  int  longFileMode  =  entry.getName().getBytes();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	final  int  longFileMode  =  entry.getName().getBytes();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  int  longFileMode  =  entry.getName().getBytes();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  int  longFileMode  =  entry.getName().getBytes();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	int  longFileMode  =  entry.getName().getBytes();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  int  longFileMode  =  entry.getName().getLongSize();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  int  longFileMode  =  entry.getName().getLongSize();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	int  longFileMode  =  entry.getName().getLongSize();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  longLinkEntry  =  entry.getName().getBytes();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  longLinkEntry  =  entry.getName().getBytes();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	longLinkEntry  =  entry.getName().getBytes();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  final  int  longFileMode  =  entry.getName().getSize();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  final  int  longFileMode  =  entry.getName().getSize();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	final  int  longFileMode  =  entry.getName().getSize();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.GNU_LONGLINK)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.GNU_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.GNU_LONGLINK)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.UNKNOWN)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.UNKNOWN)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.UNKNOWN)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME  ||  entry.getName().length()  ==  TarConstants.GNU_LONGLINK)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME  ||  entry.getName().length()  ==  TarConstants.GNU_LONGLINK)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAME  ||  entry.getName().length()  ==  TarConstants.GNU_LONGLINK)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_TRUNCATE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAME_TRUNCATE)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_SIZE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME_SIZE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAME_SIZE)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME  ||  entry.getName().length()  ==  TarConstants.FILE_LONGNAME)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAME  ||  entry.getName().length()  ==  TarConstants.FILE_LONGNAME)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAME  ||  entry.getName().length()  ==  TarConstants.FILE_LONGNAME)  {	  if(entry.getName().length()    ==    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_LONGNAME)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_LONGNAME)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_LONGNAME)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_SIZE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_SIZE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_SIZE)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
43	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_ERROR)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NUMBER_ERROR)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NUMBER_ERROR)  {	  if(entry.getName().length()!=    TarConstants.NUMBER)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  longFileMode  =  entry.getName().getLongSize();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  longFileMode  =  entry.getName().getLongSize();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	longFileMode  =  entry.getName().getLongSize();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  Long  longFileMode  =  entry.getName().getLongSize();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  Long  longFileMode  =  entry.getName().getLongSize();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	Long  longFileMode  =  entry.getName().getLongSize();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  longFileMode  =  entry.getName().getLongValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  longFileMode  =  entry.getName().getLongValue();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	longFileMode  =  entry.getName().getLongValue();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
47	[BUG]  [BUGGY]  Long  longFileMode  =  entry.getName().getLongValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  Long  longFileMode  =  entry.getName().getLongValue();  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	Long  longFileMode  =  entry.getName().getLongValue();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
48	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAMELEN  ||  entry.getName().length()!=  TarConstants.GNUTYPE_LONGNAME)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAMELEN  ||  entry.getName().length()!=  TarConstants.GNUTYPE_LONGNAME)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAMELEN  ||  entry.getName().length()!=  TarConstants.GNUTYPE_LONGNAME)  {	  if(entry.getName().length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAMELEN  ||  entry.getName().length()!=  TarConstants.LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAMELEN  ||  entry.getName().length()!=  TarConstants.LONGFILE_GNU)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAMELEN  ||  entry.getName().length()!=  TarConstants.LONGFILE_GNU)  {	  if(entry.getName().length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME_TRUNCATE)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAME_TRUNCATE)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.FILE_LONGNAME)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.FILE_LONGNAME)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.FILE_LONGNAME)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.LONGFILE_GNU)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()!=  TarConstants.NAME  ||  entry.getName().length()!=  TarConstants.LONGFILE_GNU)  {	  if(entry.getName().length()!=    TarConstants.NAME)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN  ||  entry.getName().length()  ==  TarConstants.LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  putArchiveEntry(ArchiveEntry  archiveEntry)  throws  IOException  {  TarArchiveEntry  entry  =  (TarArchiveEntry)  archiveEntry;    [BUGGY]  if(entry.getName().length()  ==  TarConstants.NAMELEN  ||  entry.getName().length()  ==  TarConstants.LONGFILE_GNU)  {  [BUGGY]      if  (longFileMode  ==  LONGFILE_GNU)  {    TarArchiveEntry  longLinkEntry  =  new  TarArchiveEntry(TarConstants.GNU_LONGLINK,  TarConstants.LF_GNUTYPE_LONGNAME);  final  byte[]  nameBytes  =  entry.getName().getBytes();  //  TODO  is  it  correct  to  use  the  default  charset  here?  longLinkEntry.setSize(nameBytes.length  +  1);  //  +1  for  NUL  putArchiveEntry(longLinkEntry);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	155	155	1	replace	if(entry.getName().length()  ==  TarConstants.NAMELEN  ||  entry.getName().length()  ==  TarConstants.LONGFILE_GNU)  {	  if(entry.getName().length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
