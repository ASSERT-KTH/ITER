bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  buffer);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  buffer);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  buffer.length);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  buffer.length);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  true);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  true);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  0,  currSize);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  0,  currSize);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  0,  currSize);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  false);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  false);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  false);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  null);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  null);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  null);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length();  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length();  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length();  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  4;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  4;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  /  4;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
9	[BUG]  [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
10	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
11	[BUG]  [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(REcordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(REcordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(REcordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf[i]);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  buffer.writeRecord(recordBuf[i]);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	buffer.writeRecord(recordBuf[i]);	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
17	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
18	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  RecordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  RecordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  RecordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
19	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
20	[BUG]  [BUGGY]  if(currName!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
21	[BUG]  [BUGGY]  if(currName  ==  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName  ==  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName  ==  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  if(currName!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  writeEOFRecord(recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  writeEOFRecord(recordBuf,  0,  recordBuf.length);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	writeEOFRecord(recordBuf,  0,  recordBuf.length);	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
24	[BUG]  [BUGGY]  if(currName  ==  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName  ==  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName  ==  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
26	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
27	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(REcordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(REcordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(REcordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
30	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
31	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
32	[BUG]  [BUGGY]  if(i  ==  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
33	[BUG]  [BUGGY]  if(i!=  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i!=  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i!=  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
34	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0,  recordBuf.length;  i  <  recordBuf.length;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0,  recordBuf.length;  i  <  recordBuf.length;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0,  recordBuf.length;  i  <  recordBuf.length;  ++i)  {	  for(int    i    =    2;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length  -  1;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length  -  1;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  2;  i  <  recordBuf.length  -  1;  ++i)  {	  for(int    i    =    2;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
37	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  -  1;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  -  1;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  0;  i  <  recordBuf.length  -  1;  ++i)  {	  For(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  -  2;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  -  2;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  0;  i  <  recordBuf.length  -  2;  ++i)  {	  For(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
39	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  +  1;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  +  1;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  0;  i  <  recordBuf.length  +  1;  ++i)  {	  For(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
40	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  recordBuf.length;  ++i)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  For(int  i  =  1;  i  <  recordBuf.length;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  1;  i  <  recordBuf.length;  ++i)  {	  For(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
41	[BUG]  [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
42	[BUG]  [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
43	[BUG]  [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
44	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(0,  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(0,  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(0,  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  3;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  3;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  -  3;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length    -    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  4;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  4;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  -  4;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length    -    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  /  2;  ++i)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  /  2;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  /  2;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length    -    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
49	[BUG]  [BUGGY]  if(i!=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i!=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i!=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
50	[BUG]  [BUGGY]  if(i  ==  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
52	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(true);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(true);	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord().cloneTarBuffer();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord().cloneTarBuffer();  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord().cloneTarBuffer();	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
54	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEORFecord();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEORFecord();  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEORFecord();	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
55	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(recordBuf);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(recordBuf);	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
56	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord().toByteArray();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord().toByteArray();  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord().toByteArray();	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
57	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord().getBytes();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord().getBytes();  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord().getBytes();	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &  1;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &  1;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &  1;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  6;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  6;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  -  6;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
60	[BUG]  [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
62	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
65	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
66	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
67	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  if(i  ==  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
69	[BUG]  [BUGGY]  if(i!=  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i!=  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i!=  0)  {  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
70	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
71	[BUG]  [BUGGY]  if(buffer!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(buffer!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
73	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(REcordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(REcordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(REcordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
74	[BUG]  [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
75	[BUG]  [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
76	[BUG]  [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
77	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
78	[BUG]  [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
81	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
82	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
83	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
84	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(REcordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(REcordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(REcordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]  ==  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]  ==  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]  >=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]  >=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]  >=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  buffer[i]!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  buffer[i]!=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  buffer[i]!=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  buffer.canWriteEOFRecord(recordBuf[i]))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  buffer.canWriteEOFRecord(recordBuf[i]))  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  buffer.canWriteEOFRecord(recordBuf[i]))  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  buffer.nextToken()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  buffer.nextToken()!=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  buffer.nextToken()!=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!closed)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!closed)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&!closed)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  i  <  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  i  <  LONGFILE_GNU)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  i  <  LONGFILE_GNU)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!recordBuf.length)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!recordBuf.length)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&!recordBuf.length)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&!buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
97	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
98	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
100	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  currName.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  currName.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  currName.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
101	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  1;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  1;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  1;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
102	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
103	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
104	[BUG]  [BUGGY]  if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
105	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
106	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
107	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  buffer.writeRecord(recordBuf);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	buffer.writeRecord(recordBuf);	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
108	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
110	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
111	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
112	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
113	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
114	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
116	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
117	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
118	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(REcordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(REcordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(REcordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
119	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
121	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
122	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
123	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
124	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
125	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
126	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
128	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
129	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i  +  1);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i  +  1);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i  +  1);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
130	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
131	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  writeEOFRecord(i);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  writeEOFRecord(i);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
132	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
133	[BUG]  [BUGGY]  if(i  >=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  5;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  5;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  -  5;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length    -    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
135	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
136	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length  -  2;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length  -  2;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  2;  i  <  recordBuf.length  -  2;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  8;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  8;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  -  8;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    4;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
139	[BUG]  [BUGGY]  if(currName!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
140	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
141	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(null);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(null);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(null);	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
142	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(wBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(wBuf);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(wBuf);	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
143	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(0,  0);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(0,  0);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(0,  0);	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
144	[BUG]  [BUGGY]  if(i  >=  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
145	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(REcordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(REcordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  buffer.writeRecord(REcordBuf);  }  else  {  buffer.writeRecord(REcordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
146	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
147	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
148	[BUG]  [BUGGY]  if(i  >=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
149	[BUG]  [BUGGY]  if(i  ==  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  0;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  0;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  0;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  2  +  1;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  2  +  1;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  /  2  +  1;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  3;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  3;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  /  3;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  2  +  4;  ++i)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  2  +  4;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  /  2  +  4;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    /    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  2;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  ==  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  ==  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    6;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
157	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName,  0);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName,  0);	  byte[]    recordBuf    =    getEOFRecord(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
158	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
159	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
160	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
161	[BUG]  [BUGGY]  if(recordBuf!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null  ||  recordBuf.length  ==  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
162	[BUG]  [BUGGY]  if(recordBuf!=  null  ||  recordBuf.length  <  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||  recordBuf.length  <  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null  ||  recordBuf.length  <  0)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
163	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
164	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  i++)  {  buffer.writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  i++)  {  buffer.writeEOFRecord(i);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  RecordBuffer.length;  i++)  {  buffer.writeEOFRecord(i);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
165	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(0);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(0);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(0);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
166	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord();  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord();  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeEOFRecord(i);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
167	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[0]  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[0]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[0]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
168	[BUG]  [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
169	[BUG]  [BUGGY]  if(i  >  0)  {  recordBuf[i]  =  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  recordBuf[i]  =  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  recordBuf[i]  =  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
170	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
171	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
172	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
173	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
174	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  0)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  0)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  ==  0)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  ==  0)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  1  &&  ++i)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  1  &&  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  -  1  &&  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  >=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  >=  0)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]  >=  0)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  ++i)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  +  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
180	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(REcordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(REcordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(REcordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
181	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
182	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
183	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i],  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i],  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i],  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
184	[BUG]  [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  ==  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
185	[BUG]  [BUGGY]  if(i  >  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
186	[BUG]  [BUGGY]  if(i  >  0)  {  recordBuf[i]  =  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  recordBuf[i]  =  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  recordBuf[i]  =  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
187	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf,  0,  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf,  0,  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf,  0,  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
188	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
189	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
190	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getLongName());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getLongName());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getLongName());  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
191	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
192	[BUG]  [BUGGY]  if(i  >  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
193	[BUG]  [BUGGY]  if(!closed)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(!closed)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(!closed)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
194	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
195	[BUG]  [BUGGY]  if(i!=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i!=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i!=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
196	[BUG]  [BUGGY]  if(i  >  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&!isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  for(int    i    =    0;    i    <    recordBuf.length    &&    ++i)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
199	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
200	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
201	[BUG]  [BUGGY]  if(i  >  0)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  recordBuf  =  buffer.writeRecord(recordBuf);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
202	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
203	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
204	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i],  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i],  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i],  recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(0,    recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
205	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  0;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {	  For(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
206	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  -  4;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length  -  4;  ++i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  0;  i  <  recordBuf.length  -  4;  ++i)  {	  For(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
207	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
208	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
209	[BUG]  [BUGGY]  if(i!=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i!=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i!=  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
210	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecordBytes();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecordBytes();  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecordBytes();	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
211	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord(0);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(0);	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
212	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord2();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  byte[]  recordBuf  =  getEOFRecord2();  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord2();	  byte[]    recordBuf    =    getEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
213	[BUG]  [BUGGY]  if(i  >=  recordBuf.length)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >=  recordBuf.length)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >=  recordBuf.length)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
214	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
215	[BUG]  [BUGGY]  if(i!=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i!=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i!=  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
216	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	  byte[]    recordBuf    =    getEOFRecord(currName);    writeEOFRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
217	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
218	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  --i)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  --i)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  --i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    5;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
220	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
221	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEEFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEEFRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEEFRecord(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeEOFRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
222	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(recordBuf[i]);    }    else    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
223	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	while(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
224	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  writeEOFRecord(currName);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    writeEOFRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
225	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeRecord(recordBuf[i].getName());    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
226	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
227	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  1,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  1,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  1,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  +  1  &&  recordBuf[i]!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  +  1  &&  recordBuf[i]!=  null)  {  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  +  1  &&  recordBuf[i]!=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]!=  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]!=  null);  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]!=  null);	  for(int    i    =    1;    i    <    recordBuf.length    &&    recordBuf[i]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
230	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf.toString());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
231	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(REcord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(REcord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(REcord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	  if(i    <    recordBuf.length)    {    buffer.writeRecord(EOFRecord.toString());    }    else    {    buffer.writeRecord(EOFRecord.toString());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
232	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(i  >  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  >  0)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
233	[BUG]  [BUGGY]  if(currName!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(currName!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(currName!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
234	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  records.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	  if(recordBuf!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    ++i)    {    buffer.writeBytes(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
235	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  RecordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  RecordBuf[i]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  RecordBuf[i]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
236	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  1,  recordBuf.length);  recordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  writeEOFRecord()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  1,  recordBuf.length);  recordBuf[i]  =  0;  }  [BUGGY]      recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  1,  recordBuf.length);  recordBuf[i]  =  0;  }	  if(recordBuf!=    null)    {    System.arraycopy(recordBuf,    0,    recordBuf,    0,    recordBuf.length);    recordBuf[i]    =    0;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
