bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  2;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  2;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  3;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  3;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  4;  ++i)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  4;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  +  4;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  5;  ++i)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  5;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  +  5;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  6;  ++i)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  +  6;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  +  6;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    +    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  4;  ++i)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  4;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  -  4;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  3;  ++i)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  3;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  6;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  6;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  -  6;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  5;  ++i)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  -  5;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  -  5;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(EOFRecord.toString());  }  else  {  buffer.writeRecord(EOFRecord.toString());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName);  writeEOFRecord(recordBuf,  0,  recordBuf.length);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  byte[]  recordBuf  =  getEOFRecord(currName);  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord(currName);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  byte[]  recordBuf  =  getEOFRecord();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  byte[]  recordBuf  =  getEOFRecord();  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	byte[]  recordBuf  =  getEOFRecord();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(i  <  recordBuf.length)  {  buffer.writeRecord(recordBuf[i]);  }  else  {  buffer.writeRecord(0,  recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length;  ++i)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  2;  i  <  recordBuf.length;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  2;  i  <  recordBuf.length;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  2;  ++i)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  2;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  -  2;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  1;  ++i)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  -  1;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  -  1;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  2;  ++i)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  2;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  /  2;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  For(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	For(int  i  =  0;  i  <  recordBuf.length;  ++i)  {	  for(int    i    =    1;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeEOFRecord(i);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  recordBuf[i]  =  0;  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  System.arraycopy(recordBuf,  0,  recordBuf,  0,  recordBuf.length);  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  ++i)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  &&  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  &&  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    2;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  1;  i  <  recordBuf.length  &&  recordBuf[i]!=  null)  {	  for(int    i    =    1;    i    <    recordBuf.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  1;  ++i)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length  /  1;  ++i)  {  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	for(int  i  =  0;  i  <  recordBuf.length  /  1;  ++i)  {	  for(int    i    =    0;    i    <    recordBuf.length    -    1;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeBytes(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeEOFRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  writeEOFRecord(currName);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  void  writeEOFRecord()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]    recordBuf[i]  =  0;  }  buffer.writeRecord(recordBuf);  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writeEOFRecord  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  wBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  aLen  assemLen  blockSize  i  longFileMode  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	303	303	1	replace	if(recordBuf!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  ++i)  {  buffer.writeRecord(recordBuf[i].getName());  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
