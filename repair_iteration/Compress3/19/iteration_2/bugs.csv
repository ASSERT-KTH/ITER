bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordBuf.length  -  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  -  1;	  currBytes    =    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordBuf.length  +  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  +  1;	  currBytes    =    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  -  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordBuf.length  -  2;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  -  2;	  currBytes    =    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  -  4;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordBuf.length  -  4;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  -  4;	  currBytes    =    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  currBytes  =  assemBuf.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  assemBuf.length;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  assemBuf.length;	  currBytes    =    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(recordBuf);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  Long.parseLong(recordBuf);  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(recordBuf);	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  currBytes  =  assemBuf;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  assemBuf;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  assemBuf;	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(entry.getName());  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  Long.parseLong(entry.getName());  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(entry.getName());	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  currBytes  =  longFileMode;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  longFileMode;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  longFileMode;	  currBytes    =    recordSize;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  LONGFILE_GNU  +  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU  +  1;	  currBytes    =    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  currBytes  =  LONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  LONGFILE_ERROR;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_ERROR;	  currBytes    =    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  1;	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length;	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize;	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length();  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length();	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toString();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toString();  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.toString();	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  currBytes  -=  4;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  -=  4;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  4;	  currBytes    =    4;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  currBytes  =  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  2;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  2;	  currBytes    =    4;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf);  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  currBytes  -=  0L;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  -=  0L;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  0L;	  currBytes    =    0L;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  long  currBytes  =  0;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  long  currBytes  =  0;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  0;	  currBytes    =    0L;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  -=  recordBuf.length;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length;	  currBytes    =    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  currBytes  -=  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  -=  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  1;	  currBytes    =    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  -=  recordBuf.length();  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length();	  currBytes    =    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  currBytes  =  buffer.getBytes(recordBuf);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  buffer.getBytes(recordBuf);  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.getBytes(recordBuf);	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  currBytes  =  recordBuf  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordBuf  +  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  +  1;	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  currBytes  =  blockSize;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  blockSize;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  blockSize;	  currBytes    =    recordSize;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  +  2;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordBuf.length  +  2;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  +  2;	  currBytes    =    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
38	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  -  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  1;	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
39	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength();  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength();	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
40	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toFormatter();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toFormatter();  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.toFormatter();	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
41	[BUG]  [BUGGY]  currBytes  =  recordLONGFILE_GNU;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordLONGFILE_GNU;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordLONGFILE_GNU;	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  currBytes  =  buffer.writeBytes(recordBuf);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  buffer.writeBytes(recordBuf);  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeBytes(recordBuf);	  currBytes    =    recordBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;	  currBytes    =    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU);  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_GNU);	  currBytes    =    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
45	[BUG]  [BUGGY]  currBytes  =  recordSize  -  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordSize  -  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  -  1;	  currBytes    =    recordSize;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
46	[BUG]  [BUGGY]  currBytes  =  recordSize  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  recordSize  +  1;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  +  1;	  currBytes    =    recordSize;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
47	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
48	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);    [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize;  [BUGGY]      if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  recordSize;	  currBytes    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
