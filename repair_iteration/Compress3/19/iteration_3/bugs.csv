bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
2	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
3	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
4	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
5	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
6	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
7	[BUG]  [BUGGY]  long  currBytes  =  recordBuf.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  recordBuf.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  recordBuf.length;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
8	[BUG]  [BUGGY]  long  currBytes  =  0L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  0L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  0L;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
9	[BUG]  [BUGGY]  long  currBytes  =  recordSize;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  recordSize;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
10	[BUG]  [BUGGY]  long  currBytes  =  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  LONGFILE_GNU;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  LONGFILE_GNU;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
11	[BUG]  [BUGGY]  long  currBytes  =  recordBuf.length  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  recordBuf.length  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  recordBuf.length  -  1;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
12	[BUG]  [BUGGY]  long  currBytes  =  recordBuf;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  recordBuf;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  recordBuf;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
13	[BUG]  [BUGGY]  long  currBytes  =  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  1;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
14	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  /  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  /  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  /  2;	  currBytes    =    recordBuf.length    +    2;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
15	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
16	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
17	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
18	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
19	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
20	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
21	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  recordBuf.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
22	[BUG]  [BUGGY]  currBytes  =  recordLONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordLONGFILE_ERROR;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordLONGFILE_ERROR;	  currBytes    =    recordLONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
23	[BUG]  [BUGGY]  currBytes  =  recordLONGFILE_GNU  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordLONGFILE_GNU  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordLONGFILE_GNU  +  1;	  currBytes    =    recordLONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
24	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_ERROR);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_ERROR);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
25	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU,  LONGFILE_ERROR);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_GNU,  LONGFILE_ERROR);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
26	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU  +  1);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_GNU  +  1);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
27	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU,  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_GNU,  recordSize);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
28	[BUG]  [BUGGY]  currBytes  =  new  longMode(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longMode(LONGFILE_ERROR);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longMode(LONGFILE_ERROR);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
29	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().equals(currName))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
31	[BUG]  [BUGGY]  if(entry.isDirectory())  {  currName  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  currName  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.isDirectory())  {  currName  =  null;  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
32	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
33	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
34	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  1;	  currBytes    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
35	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  1L;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  1L;	  currBytes    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
36	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  2;	  currBytes    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  safely())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  safely())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	safely())  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
39	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
40	[BUG]  [BUGGY]  currBytes  =  new  long(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  long(LONGFILE_ERROR);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  long(LONGFILE_ERROR);	  currBytes    =    longFileMode;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  currBytes  -=  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  2;	  currBytes    -=    4;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
42	[BUG]  [BUGGY]  currBytes  -=  recordBuf;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf;	  currBytes    -=    4;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
43	[BUG]  [BUGGY]  currBytes  -=  3;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  3;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  3;	  currBytes    -=    4;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
44	[BUG]  [BUGGY]  currBytes  -=  8;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  8;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  8;	  currBytes    -=    4;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
45	[BUG]  [BUGGY]  currBytes  -=  10;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  10;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  10;	  currBytes    -=    4;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
46	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  *  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  *  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  *  1;	  currBytes    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
47	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(currName);	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(recordBuf);  }	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  Long.parseLong(recordBuf);  }	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  Long.parseLong(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(recordBuf)+  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(recordBuf)+  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(recordBuf)+  1;	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
53	[BUG]  [BUGGY]  currBytes  =  entry.getBytes(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  entry.getBytes(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  entry.getBytes(recordBuf);	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
54	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
55	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
56	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
57	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
58	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  throw  new  RuntimeException( " ");  }	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_TRUNCATE;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_TRUNCATE;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_TRUNCATE;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
60	[BUG]  [BUGGY]  currBytes  =  fileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  fileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  fileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
61	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU?  LONGFILE_ERROR  :  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  LONGFILE_GNU?  LONGFILE_ERROR  :  LONGFILE_GNU;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU?  LONGFILE_ERROR  :  LONGFILE_GNU;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
62	[BUG]  [BUGGY]  currBytes  =  lengthFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  lengthFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  lengthFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
63	[BUG]  [BUGGY]  currBytes  =  recordSize?  LONGFILE_GNU  :  LONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize?  LONGFILE_GNU  :  LONGFILE_ERROR;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize?  LONGFILE_GNU  :  LONGFILE_ERROR;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
64	[BUG]  [BUGGY]  safely())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  safely())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	safely())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
65	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  aughtExceptionHandler.handleMissingRecord(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	aughtExceptionHandler.handleMissingRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
66	[BUG]  [BUGGY]  currBytes  =  recordBuf  +  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  +  2;	  currBytes    =    recordBuf    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
67	[BUG]  [BUGGY]  currBytes  =  recordBuf  +  1L;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf  +  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  +  1L;	  currBytes    =    recordBuf    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
68	[BUG]  [BUGGY]  currBytes  =  recordBuf  *  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf  *  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  *  1;	  currBytes    =    recordBuf    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
69	[BUG]  [BUGGY]  currBytes  =  recordBuf  +  4;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf  +  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  +  4;	  currBytes    =    recordBuf    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
70	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getName();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getName();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getName();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
71	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.toString();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.toString();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  recordBuf.toString();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
72	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize.toString();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize.toString();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize.toString();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
73	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.toString();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.toString();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  *  recordBuf.toString();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
74	[BUG]  [BUGGY]  currBytes  =  buffer.writeBytes(currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.writeBytes(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeBytes(currName);	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
75	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
76	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
77	[BUG]  [BUGGY]  currBytes  =  buffer.writeBytes(assemBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.writeBytes(assemBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeBytes(assemBuf);	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
78	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
79	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  buffer.writeBytes(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
80	[BUG]  [BUGGY]  currBytes  =  buffer.writeBytes(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.writeBytes(recordBuf,  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeBytes(recordBuf,  recordSize);	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
81	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length  -  1;	  currBytes    -=    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
82	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length  +  1;	  currBytes    -=    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
83	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length  -  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length  -  2;	  currBytes    -=    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
84	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length  +  2;	  currBytes    -=    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
85	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordSize;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  recordSize;	  currBytes    =    System.currentTimeMillis()    -    recordSize;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
86	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordBuf;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordBuf;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  recordBuf;	  currBytes    =    System.currentTimeMillis()    -    recordSize;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
87	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  recordSize  +  1;	  currBytes    =    System.currentTimeMillis()    -    recordSize;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
88	[BUG]  [BUGGY]  currBytes  -=  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  0;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  0;	  currBytes    -=    0L;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
89	[BUG]  [BUGGY]  currBytes  -=  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  LONGFILE_GNU;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  LONGFILE_GNU;	  currBytes    -=    0L;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
90	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length  -  1;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  recordBuf.length;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length  +  1;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  *  recordBuf.length;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
94	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  *  2;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  *  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length  *  2;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf;	  currBytes    =    System.currentTimeMillis()    +    recordSize;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
96	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize  +  1;	  currBytes    =    System.currentTimeMillis()    +    recordSize;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
97	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordSize;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  *  recordSize;	  currBytes    =    System.currentTimeMillis()    +    recordSize;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
98	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize  -  1;	  currBytes    =    System.currentTimeMillis()    +    recordSize;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
99	[BUG]  [BUGGY]  currBytes  =  recordSize  /  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  /  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  /  1;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
100	[BUG]  [BUGGY]  currBytes  =  recordSize  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  -  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  -  2;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
101	[BUG]  [BUGGY]  currBytes  =  recordSize  -  1L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  -  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  -  1L;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
102	[BUG]  [BUGGY]  currBytes  =  recordSize  -  1LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  -  1LONGFILE_GNU;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  -  1LONGFILE_GNU;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
103	[BUG]  [BUGGY]  currBytes  =  recordBuf  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  -  1;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
104	[BUG]  [BUGGY]  currBytes  =  recordSize  -  4;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  -  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  -  4;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
105	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	aughtExceptionHandler.handleMissingException( " ");	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
107	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSertionError( "msg.bad.archive.url ",  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  aughtExceptionHandler.throwAsSertionError( "msg.bad.archive.url ",  recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	aughtExceptionHandler.throwAsSertionError( "msg.bad.archive.url ",  recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
108	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(entry.getName(),  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  aughtExceptionHandler.handleMissingName(entry.getName(),  recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	aughtExceptionHandler.handleMissingName(entry.getName(),  recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
109	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length()  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length()  +  1;	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
110	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length()  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length()  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length()  +  2;	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
111	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length()  +  4;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length()  +  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length()  +  4;	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
112	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length()  *  2;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length()  *  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length()  *  2;	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
113	[BUG]  [BUGGY]  long  currBytes  -=  recordBuf.length();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  -=  recordBuf.length();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  -=  recordBuf.length();	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
114	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  -  1L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  -  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  -  1L;	  currBytes    =    recordBuf.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
115	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  /  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  /  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  /  1;	  currBytes    =    recordBuf.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
116	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.length();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  recordBuf.length();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
117	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length()  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length()  -  1;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
118	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize.length();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize.length();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize.length();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
119	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU  +  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  LONGFILE_GNU  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU  +  2;	  currBytes    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
120	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU  +  1L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  LONGFILE_GNU  +  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU  +  1L;	  currBytes    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
121	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU  +  4;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  LONGFILE_GNU  +  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU  +  4;	  currBytes    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
122	[BUG]  [BUGGY]  currBytes  =  assemBuf.length  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  assemBuf.length  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  assemBuf.length  -  1;	  currBytes    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
123	[BUG]  [BUGGY]  currBytes  -=  assemBuf.length;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  assemBuf.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  assemBuf.length;	  currBytes    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
124	[BUG]  [BUGGY]  currBytes  =  assemBuf.length  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  assemBuf.length  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  assemBuf.length  +  1;	  currBytes    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
125	[BUG]  [BUGGY]  currBytes  =  assemBuf.length  -  2;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  assemBuf.length  -  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  assemBuf.length  -  2;	  currBytes    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
126	[BUG]  [BUGGY]  long  currBytes  =  Long.parseLong(entry.getName());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  Long.parseLong(entry.getName());  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  Long.parseLong(entry.getName());	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
127	[BUG]  [BUGGY]  if(currName!=  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
128	[BUG]  [BUGGY]  if(currName!=  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  currBytes  =  Long.parseLong(entry.getName());  }	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
129	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(entry.getName(),  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(entry.getName(),  recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(entry.getName(),  recordBuf);	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
130	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(entry.getName(),  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(entry.getName(),  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(entry.getName(),  recordSize);	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
131	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(entry.getName()  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(entry.getName()  +  1);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(entry.getName()  +  1);	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
132	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
133	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
134	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
135	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
136	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
137	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
138	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
139	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
140	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".archives "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
141	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archives "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
142	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
143	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
144	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
145	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
146	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
147	[BUG]  [BUGGY]  String  currName  =  entry.getName();  buffer.writeRecord(currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  String  currName  =  entry.getName();  buffer.writeRecord(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	String  currName  =  entry.getName();  buffer.writeRecord(currName);	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
148	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
149	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
150	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
151	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
152	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  /  4;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  /  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  /  4;	  currBytes    =    recordBuf.length    -    4;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
153	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  -  3;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  -  3;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  -  3;	  currBytes    =    recordBuf.length    -    4;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
154	[BUG]  [BUGGY]  currBytes  -=  1L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  1L;	  currBytes    -=    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
155	[BUG]  [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  recordBuf.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
156	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.toFormatter();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.toFormatter();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  recordBuf.toFormatter();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toFormatter();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
157	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.toFormatter();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.toFormatter();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  *  recordBuf.toFormatter();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toFormatter();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
158	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize.toFormatter();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize.toFormatter();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize.toFormatter();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toFormatter();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
159	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.getLength();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  /  recordBuf.getLength();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  /  recordBuf.getLength();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
160	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength()  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength()  +  1;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
161	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getSize();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getSize();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getSize();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
162	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength()  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getLength()  -  1;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
163	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.getLength();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  *  recordBuf.getLength();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  *  recordBuf.getLength();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
164	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  +  4;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  +  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  +  4;	  currBytes    =    recordBuf.length    +    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
165	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(assemBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
166	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
167	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  assemLen);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf,  assemLen);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
168	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf,  recordSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
169	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf,  0);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
170	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf,  currName);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
171	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
172	[BUG]  [BUGGY]  Entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
173	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
174	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive ")||  entry.getName().endsWith( ".Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
175	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
176	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archives "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
177	[BUG]  [BUGGY]  currBytes  =  recordSize  +  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  +  2;	  currBytes    =    recordSize    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
178	[BUG]  [BUGGY]  currBytes  =  recordSize  +  1L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  +  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  +  1L;	  currBytes    =    recordSize    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
179	[BUG]  [BUGGY]  currBytes  =  recordSize  +  4;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  +  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  +  4;	  currBytes    =    recordSize    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
180	[BUG]  [BUGGY]  currBytes  =  buffer.writeRecord(assemBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.writeRecord(assemBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeRecord(assemBuf);	  currBytes    =    assemBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
181	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
182	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
183	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
184	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null  ||  entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null  ||  entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null  ||  entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
185	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
186	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
187	[BUG]  [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i].getName());  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i].getName());  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i].getName());  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
188	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length()  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length()  -  1;	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
189	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length()  *  recordSize;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length()  *  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length()  *  recordSize;	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
190	[BUG]  [BUGGY]  currBytes  -=  recordSize;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordSize;	  currBytes    -=    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
191	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  RecordBuffer.toFormatter();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  RecordBuffer.toFormatter();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  RecordBuffer.toFormatter();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toFormatter();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
192	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toPath();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toPath();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.toPath();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
193	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toFormat();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toFormat();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.toFormat();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
194	[BUG]  [BUGGY]  currBytes  =  buffer.getBytes(longFileMode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.getBytes(longFileMode);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.getBytes(longFileMode);	  currBytes    =    assemBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
195	[BUG]  [BUGGY]  currBytes  =  buffer.getBytes(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.getBytes(recordBuf,  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.getBytes(recordBuf,  recordSize);	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
196	[BUG]  [BUGGY]  currBytes  =  archiveEntry.getBytes(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  archiveEntry.getBytes(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  archiveEntry.getBytes(recordBuf);	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
197	[BUG]  [BUGGY]  currBytes  =  buffer.getBytes(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.getBytes(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.getBytes(currName);	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
198	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf[i]);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf[i]);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordBuf[i]);	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
199	[BUG]  [BUGGY]  ArchiveEntry  entry  =  archiveEntry.getEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  ArchiveEntry  entry  =  archiveEntry.getEntry();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	ArchiveEntry  entry  =  archiveEntry.getEntry();	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
200	[BUG]  [BUGGY]  archiveEntry.setArchiveEntry(entry);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  archiveEntry.setArchiveEntry(entry);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	archiveEntry.setArchiveEntry(entry);	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
201	[BUG]  [BUGGY]  ArchiveEntry  entry  =  archiveEntry.get(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  ArchiveEntry  entry  =  archiveEntry.get(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	ArchiveEntry  entry  =  archiveEntry.get(recordBuf);	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
202	[BUG]  [BUGGY]  long  currBytes  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  System.currentTimeMillis();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  System.currentTimeMillis();	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
203	[BUG]  [BUGGY]  buffer.writeRecord(recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecord(recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecord(recordSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
204	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeRecordHeader(recordBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
205	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
206	[BUG]  [BUGGY]  if(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
207	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
208	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName()!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName()!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
209	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName()!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName()!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
210	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry!=  null)  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
211	[BUG]  [BUGGY]  currBytes  =  recordBuf  /  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf  /  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf  /  1;	  currBytes    =    recordBuf    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
212	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
213	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(re  recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
214	[BUG]  [BUGGY]  if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
215	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
216	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
217	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null  ||  currName!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
218	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
219	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeRecordHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
220	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
221	[BUG]  [BUGGY]  currBytes  =  blockSize  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  blockSize  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  blockSize  +  1;	  currBytes    =    recordSize    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
222	[BUG]  [BUGGY]  currBytes  =  buffer.writeBytes(recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.writeBytes(recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeBytes(recordSize);	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
223	[BUG]  [BUGGY]  currBytes  =  buffer.writeBytes(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.writeBytes(recordBuf,  assemLen);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.writeBytes(recordBuf,  assemLen);	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
224	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
225	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
226	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
227	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
228	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(entry.getName());  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  Long.parseLong(entry.getName());  }	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
229	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(recordBuf.getName());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(recordBuf.getName());  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(recordBuf.getName());	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
230	[BUG]  [BUGGY]  entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	entry.getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
231	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
232	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
233	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU  +  recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU  +  recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_GNU  +  recordSize);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
234	[BUG]  [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU  +  4);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode(LONGFILE_GNU  +  4);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode(LONGFILE_GNU  +  4);	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
235	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  *  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  *  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  *  1;	  currBytes    =    recordBuf.length    +    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
236	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toInt();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toInt();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.toInt();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
237	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
238	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
239	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
240	[BUG]  [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  recordSize;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  longFileMode?  LONGFILE_GNU  :  recordSize;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
241	[BUG]  [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR  +  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  longFileMode?  LONGFILE_GNU  :  LONGFILE_ERROR  +  1;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
242	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(file.getAbsolutePath());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  OutputStream  out  =  new  FileOutputStream(file.getAbsolutePath());  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	OutputStream  out  =  new  FileOutputStream(file.getAbsolutePath());	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
243	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
244	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  Long.MAX_VALUE);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  Long.MAX_VALUE);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  Long.MAX_VALUE);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
245	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
246	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  longFileMode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  longFileMode);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR,  longFileMode);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
247	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.length  -  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.length  -  2;	  currBytes    =    System.currentTimeMillis()    +    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
248	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length  +  4;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length  +  4;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length  +  4;	  currBytes    -=    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
249	[BUG]  [BUGGY]  currBytes  -=  recordBuf.length  *  recordSize;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordBuf.length  *  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordBuf.length  *  recordSize;	  currBytes    -=    recordBuf.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
250	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU  +  recordSize;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  LONGFILE_GNU  +  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU  +  recordSize;	  currBytes    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
251	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
252	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
253	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed)  {  buffer.writeRecord(longFileMode);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
254	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getEnd();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getEnd();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getEnd();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
255	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
256	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
257	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
258	[BUG]  [BUGGY]  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
259	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName().substring(1);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
260	[BUG]  [BUGGY]  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName().substring(2);  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName().substring(1);    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
261	[BUG]  [BUGGY]  currBytes  =  longFileMode  +  recordSize;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  longFileMode  +  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  longFileMode  +  recordSize;	  currBytes    =    longFileMode;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
262	[BUG]  [BUGGY]  currBytes  =  recordSize  *  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  *  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  *  1;	  currBytes    =    recordSize    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
263	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
264	[BUG]  [BUGGY]  if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
265	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName  ==  null  ||  currName.length()  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName  ==  null  ||  currName.length()  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName    ==    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
266	[BUG]  [BUGGY]  currBytes  =  blockSize  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  blockSize  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  blockSize  -  1;	  currBytes    =    recordSize    -    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
267	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
268	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  if(entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.isDirectory())    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
269	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  -  6;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  -  6;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  -  6;	  currBytes    =    recordBuf.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
270	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
271	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
272	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "ArchiveEntry. "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
273	[BUG]  [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  1;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  1;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.isDirectory())  {  for(int  i  =  1;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
274	[BUG]  [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "ArchiveEntry. "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "ArchiveEntry. "))  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  }	  if(entry.isDirectory())    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
275	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  buffer.getBytes(recordBuf);  }  else  {  buffer.writeRecordHeader(recordBuf);  }	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
276	[BUG]  [BUGGY]  currBytes  =  buffer.getBytes(recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  buffer.getBytes(recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  buffer.getBytes(recordSize);	  currBytes    =    buffer.getBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
277	[BUG]  [BUGGY]  currBytes  =  new  longFileMode();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  new  longFileMode();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  new  longFileMode();	  currBytes    =    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
278	[BUG]  [BUGGY]  entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	entry.getName().endsWith( "Archive "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
279	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
280	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive_ "))  {  buffer.writeEntryHeader(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeEntryHeader(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
281	[BUG]  [BUGGY]  currBytes  -=  recordSize.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  recordSize.length();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  recordSize.length();	  currBytes    -=    recordBuf.length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
282	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
283	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  1;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null)  {  for(int  i  =  1;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null)  {  for(int  i  =  1;  i  <  recordBuf.length;  i++)  {  buffer.writeRecord(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.writeRecord(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
284	[BUG]  [BUGGY]  currBytes  =  entry.getBytes();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  entry.getBytes();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  entry.getBytes();	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
285	[BUG]  [BUGGY]  currBytes  =  entry.writeBytes(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  entry.writeBytes(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  entry.writeBytes(recordBuf);	  currBytes    =    buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
286	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getHeaderSize();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.getHeaderSize();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.getHeaderSize();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.getLength();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
287	[BUG]  [BUGGY]  if(currName!=  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currName!=  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currName!=  null  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(currName!=    null)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
288	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive- "))  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(entry.getName().endsWith(   "Archive   "))    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
289	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordBuf.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordBuf.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  recordBuf.length;	  currBytes    =    System.currentTimeMillis()    -    recordSize;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
290	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize  -  1;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  recordSize  -  1;	  currBytes    =    System.currentTimeMillis()    -    recordSize;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
291	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize  +  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  -  recordSize  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  recordSize  +  2;	  currBytes    =    System.currentTimeMillis()    -    recordSize;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
292	[BUG]  [BUGGY]  currBytes  -=  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  System.currentTimeMillis();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  System.currentTimeMillis();	  currBytes    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
293	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU?  LONGFILE_GNU  :  LONGFILE_ERROR;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  LONGFILE_GNU?  LONGFILE_GNU  :  LONGFILE_ERROR;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU?  LONGFILE_GNU  :  LONGFILE_ERROR;	  currBytes    =    longFileMode?    LONGFILE_GNU    :    LONGFILE_ERROR;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
294	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  LONGFILE_GNU)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
295	[BUG]  [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes!=  LONGFILE_GNU)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes!=  LONGFILE_GNU)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
296	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
297	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(currBytes  ==  null)  {  currBytes  =  new  longFileMode(LONGFILE_GNU);  }  else  {  buffer.writeRecord(recordBuf);  }	  currBytes    =    new    longFileMode(LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
298	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
299	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getValue();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  String,ArchiveEntry>  entry  =  entry.getValue();	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
300	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getKey();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getKey();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  String,ArchiveEntry>  entry  =  entry.getKey();	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
301	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValueEntry();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValueEntry();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getValueEntry();	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
302	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  String,ArchiveEntry>  entry  =  entry.getName();	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
303	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  K,  V>  entry  =  entry.getKey();	  if(closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
304	[BUG]  [BUGGY]  currBytes  =  recordBuf.length  *  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordBuf.length  *  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length  *  2;	  currBytes    =    recordBuf.length    +    2;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
305	[BUG]  [BUGGY]  buffer.writeEntryHeader(entry.getName());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeEntryHeader(entry.getName());  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeEntryHeader(entry.getName());	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
306	[BUG]  [BUGGY]  buffer.writeHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  buffer.writeHeader(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	buffer.writeHeader(recordBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
307	[BUG]  [BUGGY]  currBytes  -=  assemBuf;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  assemBuf;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  assemBuf;	  currBytes    =    assemBuf;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
308	[BUG]  [BUGGY]  currBytes  =  recordSize  +  longFileMode;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordSize  +  longFileMode;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize  +  longFileMode;	  currBytes    =    longFileMode;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
309	[BUG]  [BUGGY]  currBytes  =  file.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  file.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  file.length;	  currBytes    =    longFileMode;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
310	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize  /  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordSize  /  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordSize  /  2;	  currBytes    =    System.currentTimeMillis()    +    recordSize;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
311	[BUG]  [BUGGY]  currBytes  =  recordLen;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordLen;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordLen;	  currBytes    =    blockSize;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
312	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
313	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  buffer.writeRecord(currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  buffer.writeRecord(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  buffer.writeRecord(currName);	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
314	[BUG]  [BUGGY]  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  buffer.writeRecord(currName);  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
315	[BUG]  [BUGGY]  Entry  <  String,Archive>  entry  =  entry.getName();  buffer.writeRecord(currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  Entry  <  String,Archive>  entry  =  entry.getName();  buffer.writeRecord(currName);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	Entry  <  String,Archive>  entry  =  entry.getName();  buffer.writeRecord(currName);	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    buffer.writeRecord(currName);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
316	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toFile();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  +  recordBuf.toFile();  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  +  recordBuf.toFile();	  currBytes    =    System.currentTimeMillis()    +    recordBuf.toFormatter();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
317	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(recordBuf.toString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(recordBuf.toString());  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(recordBuf.toString());	  currBytes    =    Long.parseLong(entry.getName());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
318	[BUG]  [BUGGY]  long  currBytes  =  Long.parseLong(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  Long.parseLong(recordBuf);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  Long.parseLong(recordBuf);	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
319	[BUG]  [BUGGY]  currBytes  =  Long.parseLong(recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  Long.parseLong(recordSize);  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  Long.parseLong(recordSize);	  currBytes    =    Long.parseLong(recordBuf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
320	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(recordBuf);  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    else    {    buffer.writeRecord(recordBuf);    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
321	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis()  -  1L;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  System.currentTimeMillis()  -  1L;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis()  -  1L;	  currBytes    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
322	[BUG]  [BUGGY]  currBytes  -=  6;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  -=  6;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  -=  6;	  currBytes    -=    4;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
323	[BUG]  [BUGGY]  long  currBytes  =  recordLONGFILE_GNU;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  recordLONGFILE_GNU;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  recordLONGFILE_GNU;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
324	[BUG]  [BUGGY]  int  currBytes  =  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  int  currBytes  =  0;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	int  currBytes  =  0;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
325	[BUG]  [BUGGY]  long  currBytes  =  recordSize  -  recordSize;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  long  currBytes  =  recordSize  -  recordSize;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	long  currBytes  =  recordSize  -  recordSize;	  long    currBytes    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
326	[BUG]  [BUGGY]  currBytes  =  recordLONGFILE_GNU.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordLONGFILE_GNU.length;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordLONGFILE_GNU.length;	  currBytes    =    recordLONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
327	[BUG]  [BUGGY]  currBytes  =  recordLONGFILE_GNU  +  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);      [BUGGY]  currBytes  =  recordLONGFILE_GNU  +  2;  [BUGGY]        if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordLONGFILE_GNU  +  2;	  currBytes    =    recordLONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
