bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currBytes  =  0L;  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  0L;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  0L;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
2	[BUG]  [BUGGY]  currBytes  =  1;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  1;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  1;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
3	[BUG]  [BUGGY]  currBytes  =  recordBuf.length;  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  recordBuf.length;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf.length;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
4	[BUG]  [BUGGY]  currBytes  =  4;  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  4;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  4;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]    [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	  	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
6	[BUG]  [BUGGY]  currBytes  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  System.currentTimeMillis();  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  System.currentTimeMillis();	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
7	[BUG]  [BUGGY]  currBytes  =  recordBuf;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  recordBuf;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordBuf;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
8	[BUG]  [BUGGY]  currBytes  =  recordSize;  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  recordSize;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  recordSize;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
9	[BUG]  [BUGGY]  currBytes  =  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException( "file  name  ' "  +  entry.getName()  +   "'  is  too  long  (  >   "  +  TarConstants.NAMELEN  +   "  bytes) ");  }  }  entry.writeEntryHeader(recordBuf);  buffer.writeRecord(recordBuf);  [BUGGY]  currBytes  =  LONGFILE_GNU;  [BUGGY]    if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	179	179	1	replace	currBytes  =  LONGFILE_GNU;	currBytes  =  0;  	non-compiled	[CE]  <identifier>  expected	37	None	replace
