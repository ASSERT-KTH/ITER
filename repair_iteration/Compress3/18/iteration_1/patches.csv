bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordSize);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordSize);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  +  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  +  1);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBuf.length);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBytes);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  -  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  -  1);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  assemBuf.length);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemLen);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  assemLen);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  assemLen);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemLen);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemLen);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  assemLen);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  recordLen);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordLen);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  recordSize);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordSize);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  assemLen  +  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  assemLen  +  1);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  ||!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  ||!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||!closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  1);	  buffer.writeRecord(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  0);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0);	  buffer.writeRecord(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0L);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0L);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0L);	  buffer.writeRecord(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordBuf);	  buffer.writeRecord(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  nameBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  nameBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  nameBytes);	  buffer.writeRecord(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuf);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordBuffer(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuf);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(assemBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordSize);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  recordSize);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(recordBuf,  assemLen);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  assemLen);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordBytes(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordSize);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  recordSize);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  currBytes);	  buffer.writeRecord(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  +  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  +  1);	  buffer.writeRecord(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  currSize);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  currSize);	  buffer.writeRecord(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(recordBuf);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
45	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
48	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuf);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
51	[BUG]  [BUGGY]  buffer.copyCurrentStructure(recordBuf);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.copyCurrentStructure(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(recordBuf);	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  buffer.writeBytes(recordBuf);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeBytes(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(recordBuf);	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  buffer.copyCurrentStructure(assemBuf);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.copyCurrentStructure(assemBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(assemBuf);	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLen);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordLen);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
55	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR);	  buffer.writeRecord(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordBytes);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  recordBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordBytes);	  buffer.writeRecord(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(recordBuf,  currBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  currBytes);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
61	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(recordBuf,  0);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
62	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  nameBytes);	  buffer.writeRecord(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  recordBytes);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordBytes);	  buffer.writeRecord(recordBuf,    assemBuf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  +  2);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  +  2);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  +  2);	  buffer.writeRecord(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  -  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  -  1);	  buffer.writeRecord(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordHeader(recordSize);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordSize);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecordEntryHeader(recordBuf);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf);	  buffer.writeRecordHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
68	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
69	[BUG]  [BUGGY]  if(closed  ||  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(closed  ||  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
70	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  1);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemLen  +  1);	  buffer.writeRecord(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
71	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
77	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
78	[BUG]  [BUGGY]  buffer.writeInt(recordBuf.length);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(   "file  name  '   "  +  entry.getName()  +     "'  is  too  long  (  >     "  +  TarConstants.NAMELEN  +     "  bytes)   ");  }  }  entry.writeEntryHeader(recordBuf);    [BUGGY]  buffer.writeInt(recordBuf.length);  [BUGGY]      currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordBuf.length);	  buffer.writeRecord(assemBuf);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
