bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
2	[BUG]  [BUGGY]  if(!closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
3	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( " ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
4	[BUG]  [BUGGY]  safely())  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  safely())  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	safely())  {  throw  new  RuntimeException( " ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
5	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(entry.getClass().getClassLoader());  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Thread.currentThread().setContextClassLoader(entry.getClass().getClassLoader());  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Thread.currentThread().setContextClassLoader(entry.getClass().getClassLoader());	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
6	[BUG]  [BUGGY]  safely(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  safely(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	safely(closed)  {  throw  new  RuntimeException( " ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
7	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
8	[BUG]  [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
9	[BUG]  [BUGGY]  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
10	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName!=  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName!=  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName!=  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
11	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
12	[BUG]  [BUGGY]  ||  entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  entry.getName().endsWith( ".Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
13	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  1);	  buffer.writeRecord(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
14	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordBytes);	  buffer.writeRecord(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
15	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0L);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0L);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0L);	  buffer.writeRecord(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
16	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
17	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
18	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
19	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
20	[BUG]  [BUGGY]  if(closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
21	[BUG]  [BUGGY]  if(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
22	[BUG]  [BUGGY]  if(closed  ||  entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  entry.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
23	[BUG]  [BUGGY]  if(closed  ||  recordBuf.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
24	[BUG]  [BUGGY]  if(!closed  ||  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed  ||  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed  ||  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
25	[BUG]  [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
26	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
27	[BUG]  [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i]  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i]  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i]	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
28	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[0];  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[0];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[0];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
29	[BUG]  [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
30	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
32	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
33	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( "  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( "  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( "	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
34	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
35	[BUG]  [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
36	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
37	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
38	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
39	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
40	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
41	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
42	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
44	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
45	[BUG]  [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
46	[BUG]  [BUGGY]  while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
47	[BUG]  [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
48	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordBuf.length);	  buffer.writeRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
49	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  1);	  buffer.writeRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
50	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBuf.length  +  1);	  buffer.writeRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  2);	  buffer.writeRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  +  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBuf.length  +  2);	  buffer.writeRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
53	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  4);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  4);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBuf.length  -  4);	  buffer.writeRecord(recordBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
54	[BUG]  [BUGGY]  if(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
55	[BUG]  [BUGGY]  while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
56	[BUG]  [BUGGY]  while(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
57	[BUG]  [BUGGY]  if(!closed)  {  while(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  while(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  while(recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
58	[BUG]  [BUGGY]  while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
59	[BUG]  [BUGGY]  if(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
60	[BUG]  [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
61	[BUG]  [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
62	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
63	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currName!=  null)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
64	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
65	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
66	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
67	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
68	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( "  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( "  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( "	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
69	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( "  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( "  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( "	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
70	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBytes);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBytes);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
71	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordLongFileMode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordLongFileMode);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordLongFileMode);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
72	[BUG]  [BUGGY]  buffer.writeRecordHeader(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(currName);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(currName);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
73	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordHandler);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordHandler);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordHandler);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
74	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
75	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
76	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
77	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
78	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
79	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
80	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
81	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
82	[BUG]  [BUGGY]  while(!closed)  {  assemBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  assemBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  assemBuf.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
83	[BUG]  [BUGGY]  while(!closed  &&  assemBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  assemBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  assemBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
84	[BUG]  [BUGGY]  safely())  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  safely())  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	safely())  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
85	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
86	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
87	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
88	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
89	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
90	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getIOControl();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getIOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getIOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
91	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.write(assemBuf,  0,  recordBuf.length);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
92	[BUG]  [BUGGY]  buffer.writeBytes(assemBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(assemBuf);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
93	[BUG]  [BUGGY]  buffer.write(assemBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.write(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.write(assemBuf);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
94	[BUG]  [BUGGY]  buffer.writeBytes(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(recordBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(recordBuf,  0,  recordSize);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
95	[BUG]  [BUGGY]  buffer.write(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.write(assemBuf,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.write(assemBuf,  recordBuf);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
96	[BUG]  [BUGGY]  buffer.writeBytes(entry.getName());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(entry.getName());  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(entry.getName());	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
97	[BUG]  [BUGGY]  buffer.writeBytes(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(assemBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(assemBuf,  0,  recordBuf.length);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
98	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  blockSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  blockSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  blockSize);	  buffer.writeRecord(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
99	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordSize  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordSize  +  1);	  buffer.writeRecord(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
100	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordSize  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordSize  -  1);	  buffer.writeRecord(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
101	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  currBytes);	  buffer.writeRecord(assemBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
102	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  nameBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  nameBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  nameBytes);	  buffer.writeRecord(assemBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
103	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  currSize);	  buffer.writeRecord(assemBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
104	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes,  currSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  nameBytes,  currSize);	  buffer.writeRecord(assemBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
105	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemLen  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  assemLen  +  1);	  buffer.writeRecord(assemBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
106	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  recordSize  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordSize  +  1);	  buffer.writeRecord(assemBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
107	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemLen  +  2);	  buffer.writeRecord(assemBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
108	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  4);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  4);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemLen  +  4);	  buffer.writeRecord(assemBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
109	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  3);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  assemLen  +  3);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemLen  +  3);	  buffer.writeRecord(assemBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
110	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  2);	  buffer.writeRecord(recordBuf,    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
111	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBytes.length);	  buffer.writeRecord(recordBuf,    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
112	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuffer);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuffer);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuffer);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
113	[BUG]  [BUGGY]  buffer.writeRecordBuffer(assemBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(assemBuf);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
114	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordBuffer(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecordBuffer(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecordBuffer(recordBuf);  }	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
115	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuf,  0,  recordSize);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
116	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuf,  recordSize);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
117	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuffer,  recordSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuffer,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuffer,  recordSize);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
118	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLONGFILE_ERROR);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordLONGFILE_ERROR);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
119	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_GNU);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_GNU);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordLONGFILE_GNU);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
120	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLONGFILE_GNU);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordLONGFILE_GNU);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
121	[BUG]  [BUGGY]  buffer.writeRecord(0,  0,  recordLONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(0,  0,  recordLONGFILE_ERROR);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(0,  0,  recordLONGFILE_ERROR);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
122	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBufLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBufLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordBufLen);	  buffer.writeRecord(recordBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
123	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemLen  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  assemLen  +  1);	  buffer.writeRecord(recordBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
124	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
126	[BUG]  [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
127	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  system.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  system.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  system.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
128	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  currSize);	  buffer.writeRecord(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
129	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  currSize);	  buffer.writeRecord(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
130	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  currBytes);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  currBytes);	  buffer.writeRecord(recordBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
131	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemBuf);	  buffer.writeRecord(recordBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
132	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  nameBytes);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  nameBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  nameBytes);	  buffer.writeRecord(recordBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
133	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordLen);	  buffer.writeRecord(assemBuf,    recordLen);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
134	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordLen  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  recordLen  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordLen  +  1);	  buffer.writeRecord(assemBuf,    recordLen);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
135	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  blockSize);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  blockSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  blockSize);	  buffer.writeRecord(assemBuf,    recordLen);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
136	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  -  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  -  2);	  buffer.writeRecord(recordBuf,    0,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
137	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  /  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  /  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  /  1);	  buffer.writeRecord(recordBuf,    0,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
138	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  *  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  *  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  *  1);	  buffer.writeRecord(recordBuf,    0,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
139	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
140	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
141	[BUG]  [BUGGY]  final  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
142	[BUG]  [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
143	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
144	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
145	[BUG]  [BUGGY]  &&!closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  &&!closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	&&!closed)  {  buffer.writeRecord(recordBuf);  }	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
146	[BUG]  [BUGGY]  ||(!closed  &&  recordBuf.length  >  0))  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||(!closed  &&  recordBuf.length  >  0))  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||(!closed  &&  recordBuf.length  >  0))  {  buffer.writeRecord(recordBuf);  }	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
147	[BUG]  [BUGGY]  ||(closed  &&  recordBuf.length()  >  0))  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||(closed  &&  recordBuf.length()  >  0))  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||(closed  &&  recordBuf.length()  >  0))  {  buffer.writeRecord(recordBuf);  }	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
148	[BUG]  [BUGGY]  ||  closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  closed)  {  buffer.writeRecord(recordBuf);  }	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
149	[BUG]  [BUGGY]  ||  close)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||  close)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||  close)  {  buffer.writeRecord(recordBuf);  }	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
150	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  1L);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  1L);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  1L);	  buffer.writeRecord(recordBuf,    0L);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
151	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  assemBuf.length);	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
152	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  assemBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  assemBuf.length);  }	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
153	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
154	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
155	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(assemBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  assemBuf.length);  }  else  {  buffer.writeRecord(assemBuf,  0,  recordBuf.length);  }	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
156	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
157	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
158	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
159	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
160	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
161	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
162	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
163	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currName!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
164	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();  if(entry!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
165	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
166	[BUG]  [BUGGY]  if(currName!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currName!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currName!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
167	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/').append(longFileMode);  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
168	[BUG]  [BUGGY]  longLinkEntry  =  entry.getDirectoryEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  entry.getDirectoryEntry(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  entry.getDirectoryEntry(recordBuf);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
169	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(entry);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(entry);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(entry);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
170	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  recordSize);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
171	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getDirectoryEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getDirectoryEntry(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getDirectoryEntry(recordBuf);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
172	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(entry.getName());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(entry.getName());  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(entry.getName());	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
173	[BUG]  [BUGGY]  archiveEntry  =  buffer.getDirectoryEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  archiveEntry  =  buffer.getDirectoryEntry(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	archiveEntry  =  buffer.getDirectoryEntry(recordBuf);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
174	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(longFileMode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(longFileMode);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(longFileMode);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
175	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(assemBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(assemBuf);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
176	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  recordSize);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
177	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  assemLen);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
178	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  0,  recordSize);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
179	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(entry.getName());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(entry.getName());  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(entry.getName());	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
180	[BUG]  [BUGGY]  buffer.writeRecordEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntry(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntry(recordBuf);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
181	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBytes  +  1);	  buffer.writeRecord(recordBuf,    0,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
182	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBytes,  currSize);	  buffer.writeRecord(recordBuf,    0,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
183	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBytes  -  1);	  buffer.writeRecord(recordBuf,    0,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
184	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
185	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
186	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
187	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
188	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
189	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
190	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
191	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
192	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
193	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
194	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getIOControl();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getIOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getIOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
195	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBytes.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBytes.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordBytes.length);	  buffer.writeRecord(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
196	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  assemSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  assemSize);	  buffer.writeRecord(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
197	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordBuf);	  buffer.writeRecord(assemBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
198	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  currBytes);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
199	[BUG]  [BUGGY]  buffer.writeRecordHeader(currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(currBytes,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(currBytes,  recordBuf);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
200	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  currSize);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
201	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  currBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  currBytes);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
202	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  currBytes,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  currBytes,  assemLen);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
203	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  currBytes  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  currBytes  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  currBytes  +  1);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
204	[BUG]  [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
205	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
206	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
207	[BUG]  [BUGGY]  while(true)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(true)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(true)  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
208	[BUG]  [BUGGY]  buffer.copyCurrentStructure(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(assemBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(assemBuf,  recordSize);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
209	[BUG]  [BUGGY]  buffer.writeCurrentStructure(assemBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeCurrentStructure(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeCurrentStructure(assemBuf);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
210	[BUG]  [BUGGY]  buffer.writeCurrentStructure(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeCurrentStructure(assemBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeCurrentStructure(assemBuf,  recordSize);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
211	[BUG]  [BUGGY]  buffer.copyCurrentStructure(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(currName);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(currName);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
212	[BUG]  [BUGGY]  buffer.copyCurrentStructure(assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(assemBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(assemBuf,  currBytes);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
213	[BUG]  [BUGGY]  buffer.writeCurrentStructure(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeCurrentStructure(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeCurrentStructure(recordBuf);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
214	[BUG]  [BUGGY]  safely())  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  safely())  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	safely())  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
215	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
216	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
217	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
218	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
219	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  entry.getKey();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
220	[BUG]  [BUGGY]  final  Entry  <  K,  V>  entry  =  entry.getEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  Entry  <  K,  V>  entry  =  entry.getEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  Entry  <  K,  V>  entry  =  entry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
221	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getAncestor();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getAncestor();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  entry.getAncestor();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
222	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  recordBuf,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordBuf,  currSize);	  buffer.writeRecord(assemBuf,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
223	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
224	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
225	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
226	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.isDirectory())  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
227	[BUG]  [BUGGY]  longLinkEntry  =  archiveEntry.getDirectory();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  archiveEntry.getDirectory();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  archiveEntry.getDirectory();	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
228	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( "  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( "  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( "	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
229	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( "  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( "  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( "	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
230	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
231	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
232	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getName();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
233	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getName();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  repositoryEntry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
234	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  file.getName();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  file.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  file.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
235	[BUG]  [BUGGY]  buffer.writeInt(assemBuf.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(assemBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(assemBuf.length);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
236	[BUG]  [BUGGY]  buffer.writeInt(recordBuf.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(recordBuf.length  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordBuf.length  -  1);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
237	[BUG]  [BUGGY]  buffer.writeInt(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(assemBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(assemBuf,  0,  recordBuf.length);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
238	[BUG]  [BUGGY]  buffer.writeInt(recordBuf.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(recordBuf.length  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordBuf.length  +  1);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
239	[BUG]  [BUGGY]  buffer.writeLong(recordBuf.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeLong(recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeLong(recordBuf.length);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
240	[BUG]  [BUGGY]  buffer.writeInt(recordBuf.length,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(recordBuf.length,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordBuf.length,  recordSize);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
241	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
242	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
243	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
244	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
245	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
246	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(recordBuf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
247	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }	  buffer.writeRecordHeader(assemBuf);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
248	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecordHeader(assemBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecordHeader(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecordHeader(assemBuf);  }	  buffer.writeRecordHeader(assemBuf);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
249	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  buffer.writeRecordHeader(assemBuf);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
250	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecordHeader(assemLen);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecordHeader(assemLen);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecordHeader(assemBuf);  }  else  {  buffer.writeRecordHeader(assemLen);  }	  buffer.writeRecordHeader(assemBuf);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
251	[BUG]  [BUGGY]  ||!closed)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||!closed)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||!closed)  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
252	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  /  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  /  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  /  2);	  buffer.writeRecord(recordBuf,    0,    recordSize    +    2);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
253	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  +  4);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  +  4);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  +  4);	  buffer.writeRecord(recordBuf,    0,    recordSize    +    2);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
254	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  *  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordSize  *  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordSize  *  2);	  buffer.writeRecord(recordBuf,    0,    recordSize    +    2);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
255	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordBuf);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
256	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(assemBuf);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
257	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordSize);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
258	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(entry.getName());  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(entry.getName());  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(entry.getName());	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
259	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(assemBuf,  recordBuf.length);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
260	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuf,  recordSize);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
261	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  buffer.length);  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  buffer.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuf,  buffer.length);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
262	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLen  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLen  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordLen  +  1);	  buffer.writeRecord(assemBuf,    0,    recordLen);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
263	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
264	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
265	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
266	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
267	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
268	[BUG]  [BUGGY]  if(currBytes!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
269	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  +  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  +  2);	  buffer.writeRecord(recordBuf,    recordSize    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
270	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  blockSize  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  blockSize  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  blockSize  +  1);	  buffer.writeRecord(recordBuf,    recordSize    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
271	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  +  4);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  +  4);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  +  4);	  buffer.writeRecord(recordBuf,    recordSize    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
272	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  assemLen);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
273	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  assemLen);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
274	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  assemLen  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  assemLen  +  1);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
275	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  recordLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  recordLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  recordLen);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
276	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  recordSize);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
277	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  0,  recordSize);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
278	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  recordBuf.length);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
279	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordSize  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  recordSize  +  1);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
280	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordBytes);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  recordBytes);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
281	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  assemBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  assemBuf.length);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
282	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordSize  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  recordSize  -  1);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
283	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  assemLen  +  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  assemLen  +  2);	  buffer.writeRecord(recordBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
284	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  -  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  -  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  -  2);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
285	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  blockSize  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  blockSize  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  blockSize  -  1);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
286	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  -  4);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  -  4);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  -  4);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
287	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  *  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  *  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  *  1);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
288	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  /  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  /  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  /  1);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
289	[BUG]  [BUGGY]  while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf  ==  null)  {  buffer.writeRecord(recordBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
290	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf,  0,  recordSize);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
291	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
292	[BUG]  [BUGGY]  while(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
293	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  currBytes,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  currBytes,  assemLen);	  buffer.writeRecord(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
294	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  assemBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  assemBuf,  currBytes);	  buffer.writeRecord(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
295	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  currBytes);	  buffer.writeRecord(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
296	[BUG]  [BUGGY]  buffer.writeRecord(currBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(currBytes,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(currBytes,  recordBuf);	  buffer.writeRecord(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
297	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  1);	  buffer.writeRecordHeader(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
298	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0L);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0L);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0L);	  buffer.writeRecordHeader(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
299	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  0);	  buffer.writeRecordHeader(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
300	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
301	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().startsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
302	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
303	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
304	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
305	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
306	[BUG]  [BUGGY]  buffer.writeRecordBytes(assemBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(assemBuf);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
307	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf,  0,  recordSize);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
308	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecordBytes(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecordBytes(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecordBytes(recordBuf);  }	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
309	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordBuf,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf,  assemLen);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
310	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf,  recordSize);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
311	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordBuf,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf,  currSize);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
312	[BUG]  [BUGGY]  buffer.copyCurrentStructure(entry);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(entry);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(entry);	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
313	[BUG]  [BUGGY]  buffer.copyCurrentStructure(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(recordBuf,  recordSize);	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
314	[BUG]  [BUGGY]  buffer.copyCurrentStructure(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(assemBuf,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(assemBuf,  recordBuf);	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
315	[BUG]  [BUGGY]  buffer.closeArchiveEntry();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.closeArchiveEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.closeArchiveEntry();	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
316	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getName();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
317	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
318	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getName();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  Entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
319	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
320	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
321	[BUG]  [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(closed)  {  buffer.writeRecord(recordBuf);  }	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
322	[BUG]  [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(closed)  {  buffer.writeRecord(recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
323	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordSize  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  recordSize  +  1);	  buffer.writeRecordHeader(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
324	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  recordBytes);	  buffer.writeRecordHeader(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
325	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
326	[BUG]  [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
327	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuf  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuf  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuf  +  1);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
328	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuf,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuf,  0);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
329	[BUG]  [BUGGY]  if(closed  ||  recordBuf)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf)  {  throw  new  RuntimeException( " ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
330	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( " "));  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( " "));  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( " "));  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
331	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  has  been  closed ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  has  been  closed ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "Archive  entry  has  been  closed ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
332	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  has  been  closed. ");  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  has  been  closed. ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "Archive  entry  has  been  closed. ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
333	[BUG]  [BUGGY]  while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
334	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecordHeader(recordBuf);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
335	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer.append('/');  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
336	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer.append('/');  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
337	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append( "./ ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append( "./ ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append( "./ ");  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
338	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
339	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
340	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  recordSize);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
341	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(assemLen);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(assemLen);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(assemLen);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
342	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  1);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  1);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  1);  }	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
343	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
344	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  1);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  1);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  1);  }	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
345	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
346	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
347	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
348	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i].recordSize;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i].recordSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i].recordSize;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
349	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
350	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  recordSize  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordSize  -  1);	  buffer.writeRecord(assemBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
351	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  nameBytes,  recordSize);	  buffer.writeRecord(assemBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
352	[BUG]  [BUGGY]  buffer.writeRecord(nameBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(nameBytes,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(nameBytes,  recordBuf);	  buffer.writeRecord(assemBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
353	[BUG]  [BUGGY]  &&!closed)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  &&!closed)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	&&!closed)  {  buffer.writeRecord(recordBuf);	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
354	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  nameBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  nameBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  nameBytes);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
355	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  assemBuf);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
356	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  currBytes);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
357	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
358	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.append(blockSize,  recordBuf.length);  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  buffer.append(blockSize,  recordBuf.length);  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  buffer.append(blockSize,  recordBuf.length);  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
359	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
360	[BUG]  [BUGGY]  if(entry.getName().endsWith('/'))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith('/'))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith('/'))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
361	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
362	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".archives "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
363	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith(currName))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith(currName))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith(currName))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
364	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
365	[BUG]  [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().startsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().startsWith( "Archive "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
366	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( ".js "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
367	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  String  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
368	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
369	[BUG]  [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
370	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
371	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
372	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordSize;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordSize;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
373	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  RecordBuffer.length;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  RecordBuffer.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  RecordBuffer.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
374	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR  +  1);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
375	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR,  recordSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordLONGFILE_ERROR,  recordSize);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
376	[BUG]  [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
377	[BUG]  [BUGGY]  if(currBytes!=  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
378	[BUG]  [BUGGY]  if(closed)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
379	[BUG]  [BUGGY]  if(closed)  {  if(longLinkEntry  ==  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  if(longLinkEntry  ==  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  if(longLinkEntry  ==  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
380	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " "));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " "));  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " "));  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
381	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordsBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
382	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getIOControl();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getIOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getIOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
383	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  buffer);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  buffer);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuf,  buffer);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
384	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuffer);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuffer);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuffer);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
385	[BUG]  [BUGGY]  if(closed  ||  recordBuf.length!=  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf.length!=  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf.length!=  0)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
386	[BUG]  [BUGGY]  if(closed  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf.length  <  0)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
387	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  nameBytes  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  nameBytes  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  nameBytes  +  1);	  buffer.writeRecord(recordBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
388	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLen  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordLen  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordLen  +  1);	  buffer.writeRecord(recordBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
389	[BUG]  [BUGGY]  buffer.writeInt(recordBuf.length  -  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(recordBuf.length  -  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordBuf.length  -  2);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
390	[BUG]  [BUGGY]  buffer.writeInt(recordBuf.length  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(recordBuf.length  +  2);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordBuf.length  +  2);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
391	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
392	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  new  ArchiveEntry(recordBuf);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  new  ArchiveEntry(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  new  ArchiveEntry(recordBuf);  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
393	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  new  TarBuffer();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  new  TarBuffer();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  new  TarBuffer();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
394	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordGNU);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordGNU);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordGNU);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
395	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordSize  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordSize  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordSize  +  1);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
396	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordHashed);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordHashed);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordHashed);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
397	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  assemBuf);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
398	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  nameBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  nameBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  nameBytes);	  buffer.writeRecordHeader(recordBuf,    currBytes);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
399	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  fileMode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  fileMode);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  fileMode);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
400	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getDirectoryEntry(recordBuf,  0);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
401	[BUG]  [BUGGY]  while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  buffer.isDirectory())  {  buffer.writeRecord(recordBuf);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
402	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecordHeader(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecordHeader(recordBuf);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
403	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
404	[BUG]  [BUGGY]  while(currBytes!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(currBytes!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(currBytes!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
405	[BUG]  [BUGGY]  while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf  >=  null)  {  buffer.writeRecord(recordBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
406	[BUG]  [BUGGY]  if(entry.getName().endsWith('/'))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith('/'))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith('/'))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
407	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
408	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
409	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }	  if(closed    ||    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
410	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLen  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordLen  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordLen  -  1);	  buffer.writeRecord(assemBuf,    0,    recordLen);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
411	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  nameBytes,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  nameBytes,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  nameBytes,  currSize);	  buffer.writeRecord(recordBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
412	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
413	[BUG]  [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
414	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.getEntry();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.getEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  recordBuf.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
415	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getEntry();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  this.archiveEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
416	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  buffer.getEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  buffer.getEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  buffer.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
417	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getEntry(recordBuf);	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
418	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  1,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  1,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  1,  0);	  buffer.writeRecordHeader(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
419	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
420	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
421	[BUG]  [BUGGY]  buffer.write(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.write(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.write(recordBuf);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
422	[BUG]  [BUGGY]  buffer.writeBytes(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(recordBuf,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(recordBuf,  assemLen);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
423	[BUG]  [BUGGY]  buffer.writeBytes(recordBuf,  currSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(recordBuf,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(recordBuf,  currSize);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
424	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordBuf);	  buffer.writeRecord(assemBuf,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
425	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf,  currBytes);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
426	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordBuf,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordBuf,  0);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
427	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
428	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
429	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBu  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBu  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBu	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
430	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currBytes  =  recordBuf.length;  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currBytes  =  recordBuf.length;  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  currBytes  =  recordBuf.length;  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
431	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
432	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
433	[BUG]  [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  buffer.writeRecord(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
434	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
435	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  getName();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
436	[BUG]  [BUGGY]  buffer.copyCurrentEntry(assemBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentEntry(assemBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentEntry(assemBuf);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
437	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  getISOControl();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
438	[BUG]  [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(closed  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
439	[BUG]  [BUGGY]  while(currBytes!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(currBytes!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(currBytes!=  null  &&  recordBuf!=  null)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
440	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  assemBuf.length  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  assemBuf.length  -  1);	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
441	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  0,  recordBuf.length  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  0,  recordBuf.length  -  1);	  buffer.writeRecord(recordBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
442	[BUG]  [BUGGY]  buffer.copyCurrentStructure(recordBuf,  currBytes);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.copyCurrentStructure(recordBuf,  currBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.copyCurrentStructure(recordBuf,  currBytes);	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
443	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
444	[BUG]  [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( "  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( "  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode  ==  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( "	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
445	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  currBytes  =  archiveEntry.getLongLinkEntry();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
446	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  2);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  2);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(recordBuf,  recordSize  +  2);  }	  if(closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
447	[BUG]  [BUGGY]  out.writeRecord(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  out.writeRecord(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	out.writeRecord(recordBuf,  recordSize);	  if(closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
448	[BUG]  [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(closed)  {  recordBuf.writeRecord(recordBuf,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
449	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
450	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
451	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  buffer[i]  =  entry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
452	[BUG]  [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(closed)  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
453	[BUG]  [BUGGY]  longLinkEntry  =  buffer.getLongDirectoryEntry(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  longLinkEntry  =  buffer.getLongDirectoryEntry(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	longLinkEntry  =  buffer.getLongDirectoryEntry(recordBuf);	  longLinkEntry    =    buffer.getDirectoryEntry(recordBuf);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
454	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append('/');  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
455	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append( "/ ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append( "/ ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append( "/ ");  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
456	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer.append(recordBuf);  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
457	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
458	[BUG]  [BUGGY]  if(closed  ||  recordSize  >  0)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordSize  >  0)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordSize  >  0)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
459	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  0,  assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
460	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  }	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
461	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  fileMode);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  fileMode);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuf,  fileMode);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
462	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(recordBuf,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	final  OutputStream  out  =  new  FileOutputStream(recordBuf,  assemLen);	  final    OutputStream    out    =    new    FileOutputStream(recordBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
463	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(recordBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(recordBuf,    recordSize);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
464	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  *  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordSize  *  recordSize  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordSize  *  recordSize  -  1);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
465	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemLen  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  assemLen  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  assemLen  -  1);	  buffer.writeRecord(recordBuf,    recordSize    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
466	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  recordLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  recordLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  recordLen);	  buffer.writeRecord(assemBuf,    recordLen);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
467	[BUG]  [BUGGY]  if(closed  ||  buffer.isDirectory())  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  buffer.isDirectory())  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  buffer.isDirectory())  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
468	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  recordSize);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
469	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  0);	  buffer.writeRecord(recordBuf,    0,    recordLONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
470	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(recordBuf,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(recordBuf,  0);	  while(!closed)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
471	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordBytes.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  0,  recordBytes.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  0,  recordBytes.length);	  buffer.writeRecordHeader(recordBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
472	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  buffer.writeRecord(assemBuf);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    buffer.writeRecord(assemBuf);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
473	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  0);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
474	[BUG]  [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  file);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordEntryHeader(recordBuf,  file);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordEntryHeader(recordBuf,  file);	  buffer.writeRecordEntryHeader(recordBuf);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
475	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  assemBuf,  nameBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  assemBuf,  nameBytes);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  assemBuf,  nameBytes);	  buffer.writeRecord(recordBuf,    nameBytes);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
476	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  nameBytes  +  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  nameBytes  +  1);	  buffer.writeRecord(recordBuf,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
477	[BUG]  [BUGGY]  buffer.writeCurrentStructure(recordBuf,  recordSize);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeCurrentStructure(recordBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeCurrentStructure(recordBuf,  recordSize);	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
478	[BUG]  [BUGGY]  buffer.writeEntryHeader(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeEntryHeader(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeEntryHeader(recordBuf);	  buffer.copyCurrentStructure(recordBuf);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
479	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    entry.getName();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
480	[BUG]  [BUGGY]  buffer.writeRecord(assemLen,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemLen,  0,  recordBuf.length);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemLen,  0,  recordBuf.length);	  buffer.writeRecord(recordBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
481	[BUG]  [BUGGY]  buffer.writeInt(assemLen);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(assemLen);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
482	[BUG]  [BUGGY]  buffer.writeInt(recordSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeInt(recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeInt(recordSize);	  buffer.writeInt(recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
483	[BUG]  [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
484	[BUG]  [BUGGY]  if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
485	[BUG]  [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
486	[BUG]  [BUGGY]  if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getDirectory();  if(!closed)  {  throw  new  RuntimeException( " ");  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getDirectory();    if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
487	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf[i];  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
488	[BUG]  [BUGGY]  buffer.writeRecord(recordBytes,  recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBytes,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBytes,  recordBuf);	  buffer.writeRecord(recordBuf,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
489	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
490	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entity.getName();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entity.getName();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entity.getName();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getName();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
491	[BUG]  [BUGGY]  buffer.writeRecordHeader(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(assemBuf,  0,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(assemBuf,  0,  assemLen);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
492	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordSize,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordSize,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordSize,  assemLen);	  buffer.writeRecordHeader(recordBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
493	[BUG]  [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
494	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
495	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive "))  {  currName  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
496	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  if(currName  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  if(currName  ==  null)  {  return;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  String,ArchiveEntry>  entry  =  entry.getName();  if(currName  ==  null)  {  return;  }	  if(entry.getName().endsWith(   "Archive   "))    {    String    currName    =    entry.getName();    if(currName    ==    null)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
497	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordBytes,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemBuf,  recordBytes,  currSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemBuf,  recordBytes,  currSize);	  buffer.writeRecord(assemBuf,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
498	[BUG]  [BUGGY]  buffer.writeRecordBuffer(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBuffer(recordBuf,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBuffer(recordBuf,  assemLen);	  buffer.writeRecordBuffer(recordBuf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
499	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordSize,  recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordSize,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordSize,  recordBuf);	  buffer.writeRecordHeader(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
500	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordBuf,  recordSize  -  1);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordBuf,  recordSize  -  1);	  buffer.writeRecordHeader(recordBuf,    recordSize);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
501	[BUG]  [BUGGY]  while(!closed  &&  buffer.writeRecord(recordBuf)!=  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  buffer.writeRecord(recordBuf)!=  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  buffer.writeRecord(recordBuf)!=  0)  {  buffer.writeRecord(recordBuf);  }	  while(!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
502	[BUG]  [BUGGY]  if(closed  ||  recordBuf.length  ==  0)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf.length  ==  0)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf.length  ==  0)  {  buffer.writeRecord(recordBuf);  }	  if(closed    ||    buffer.isDirectory())    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
503	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordLONGFILE_GNU);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordLONGFILE_GNU);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordLONGFILE_GNU);	  buffer.writeRecordHeader(recordSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
504	[BUG]  [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
505	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
506	[BUG]  [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed  ||  recordBuf!=  null)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
507	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  buffer.writeRecord(assemBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
508	[BUG]  [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  buffer.writeRecord(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  if(!closed)    {    buffer.writeRecord(assemBuf);    }    else    {    System.arraycopy(assemBuf,    0,    recordBuf,    0,    recordBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
509	[BUG]  [BUGGY]  buffer.writeRecord(recordBytes,  0,  recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBytes,  0,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBytes,  0,  recordBuf);	  buffer.writeRecord(recordBuf,    0,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
510	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(recordBuf,  0,  recordBytes,  assemLen);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(recordBuf,  0,  recordBytes,  assemLen);	  buffer.writeRecord(recordBuf,    0,    recordBytes);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
511	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Thread.currentThread().getContextClassLoader().writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Thread.currentThread().getContextClassLoader().writeRecord(recordBuf);	  if(closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
512	[BUG]  [BUGGY]  buffer.writeEntry(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeEntry(assemBuf,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeEntry(assemBuf,  recordSize);	  buffer.copyCurrentStructure(assemBuf);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
513	[BUG]  [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
514	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  buffer.append('/');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
515	[BUG]  [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
516	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
517	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  currSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  int  currSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  int  currSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  +=  blockSize;  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
518	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive ")||  entry.getName().endsWith( "Archive "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  i++)  {  currBytes	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    i++)    {    currBytes    +=    blockSize;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
519	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.entrySet();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  recordBuf.entrySet();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  recordBuf.entrySet();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
520	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getValue();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getValue();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
521	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  cacheEntry.getEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  Entry  <  K,  V>  entry  =  cacheEntry.getEntry();  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	Entry  <  K,  V>  entry  =  cacheEntry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getEntry();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
522	[BUG]  [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
523	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  long  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
524	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( ".Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( ".Archive_ "))  {  int  blockSize  =  recordBuf.length;  for(int  i  =  0;  i  <  blockSize;  ++i)  {  buffer.append('n');  }	  if(entry.getName().endsWith(   "Archive   "))    {    int    blockSize    =    recordBuf.length;    for(int    i    =    0;    i    <    blockSize;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
525	[BUG]  [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(longFileMode!=  LONGFILE_GNU)  {  if(currBytes  ==  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
526	[BUG]  [BUGGY]  if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry!=  null)  {  longLinkEntry  =  archiveEntry.getLongLinkEntry();  if(longLinkEntry!=  null)  {  buffer.closeArchiveEntry();  }	  if(currBytes    ==    null)    {    longLinkEntry    =    archiveEntry.getLongLinkEntry();    if(longLinkEntry!=    null)    {    buffer.closeArchiveEntry();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
527	[BUG]  [BUGGY]  buffer.writeRecordBytes(recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordBytes(recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordBytes(recordSize);	  buffer.writeRecordBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
528	[BUG]  [BUGGY]  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
529	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
530	[BUG]  [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  currBytes  +=  recordBuf[i];  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  currBytes  +=  recordBuf[i];  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	((  TarArchiveEntry)entry).getName().endsWith( "Archive "))  {  currBytes  +=  recordBuf[i];  }	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
531	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i]  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i]  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(entry.getName().endsWith( "Archive "))  {  for(int  i  =  0,  len  =  recordBuf.length;  i  <  len;  ++i)  {  currBytes  +=  recordBuf[i]	  if(entry.getName().endsWith(   "Archive   "))    {    for(int    i    =    0,    len    =    recordBuf.length;    i    <    len;    ++i)    {    currBytes    +=    recordBuf[i];    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
532	[BUG]  [BUGGY]  ||!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  ||!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	||!closed)  {  buffer.writeRecord(recordBuf,  0,  recordSize);  }	  ||!closed)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
533	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "TarArchiveEntry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "TarArchiveEntry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "TarArchiveEntry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
534	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  closeable  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  closeable  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  closeable  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
535	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "TarArchiveEntry  is  too  closeable  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "TarArchiveEntry  is  too  closeable  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "TarArchiveEntry  is  too  closeable  (  >   "  +  TarConstants.NAMELEN  + "  bytes) ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
536	[BUG]  [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + ") ");  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + ") ");  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  throw  new  RuntimeException( "Archive  entry  is  too  long  (  >   "  +  TarConstants.NAMELEN  + ") ");  }	  if(!closed)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
537	[BUG]  [BUGGY]  buffer.writeRecord(assemLen,  recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecord(assemLen,  recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecord(assemLen,  recordBuf);	  buffer.writeRecord(assemBuf,    assemLen);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
538	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  archiveEntry.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
539	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entity.getISOControl();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entity.getISOControl();  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  buffer[i]  =  entity.getISOControl();  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    buffer[i]    =    archiveEntry.getISOControl();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
540	[BUG]  [BUGGY]  buffer.writeRecordHeader(recordSize,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeRecordHeader(recordSize,  0);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeRecordHeader(recordSize,  0);	  buffer.writeRecordHeader(recordBuf,    0);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
541	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.write(assemBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.write(assemBuf,  0,  recordSize);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
542	[BUG]  [BUGGY]  buffer.writeBytes(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  buffer.writeBytes(assemBuf,  0,  recordSize);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	buffer.writeBytes(assemBuf,  0,  recordSize);	  buffer.writeBytes(recordBuf);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
543	[BUG]  [BUGGY]  while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed  &&  recordBuf!=  null  &&  recordBuf.length  >  0)  {  buffer.writeRecord(recordBuf);	  while(!closed    &&    recordBuf!=    null)    {    buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
544	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
545	[BUG]  [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(currBytes  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
546	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      write(0);  //  NUL  terminator  closeArchiveEntry();  }  else  if  (longFileMode  !=  LONGFILE_TRUNCATE)  {  throw  new  RuntimeException(     "file  name  '     "  +  entry.getName()  +       "'  is  too  long  (  >       "  +  TarConstants.NAMELEN  +       "  bytes)     ");  }  }  entry.writeEntryHeader(recordBuf);      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf.length;  }  [BUGGY]        currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  }  else  {  currSize  =  entry.getSize();  }  currName  =  entry.getName();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  nameBytes  recordBuf  boolean  closed  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	177	177	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  records.length;  i++)  {  currBytes  +=  recordBuf.length;  }	  if(!closed)    {    for(int    i    =    0;    i    <    recordBuf.length;    i++)    {    currBytes    +=    recordBuf.length;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
